// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newCustomerPreference(db *gorm.DB, opts ...gen.DOOption) customerPreference {
	_customerPreference := customerPreference{}

	_customerPreference.customerPreferenceDo.UseDB(db, opts...)
	_customerPreference.customerPreferenceDo.UseModel(&model.CustomerPreference{})

	tableName := _customerPreference.customerPreferenceDo.TableName()
	_customerPreference.ALL = field.NewAsterisk(tableName)
	_customerPreference.UserID = field.NewString(tableName, "user_id")
	_customerPreference.PreferencesKey = field.NewString(tableName, "preferences_key")
	_customerPreference.PreferencesValue = field.NewString(tableName, "preferences_value")

	_customerPreference.fillFieldMap()

	return _customerPreference
}

type customerPreference struct {
	customerPreferenceDo

	ALL              field.Asterisk
	UserID           field.String
	PreferencesKey   field.String
	PreferencesValue field.String

	fieldMap map[string]field.Expr
}

func (c customerPreference) Table(newTableName string) *customerPreference {
	c.customerPreferenceDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c customerPreference) As(alias string) *customerPreference {
	c.customerPreferenceDo.DO = *(c.customerPreferenceDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *customerPreference) updateTableName(table string) *customerPreference {
	c.ALL = field.NewAsterisk(table)
	c.UserID = field.NewString(table, "user_id")
	c.PreferencesKey = field.NewString(table, "preferences_key")
	c.PreferencesValue = field.NewString(table, "preferences_value")

	c.fillFieldMap()

	return c
}

func (c *customerPreference) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *customerPreference) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 3)
	c.fieldMap["user_id"] = c.UserID
	c.fieldMap["preferences_key"] = c.PreferencesKey
	c.fieldMap["preferences_value"] = c.PreferencesValue
}

func (c customerPreference) clone(db *gorm.DB) customerPreference {
	c.customerPreferenceDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c customerPreference) replaceDB(db *gorm.DB) customerPreference {
	c.customerPreferenceDo.ReplaceDB(db)
	return c
}

type customerPreferenceDo struct{ gen.DO }

type ICustomerPreferenceDo interface {
	gen.SubQuery
	Debug() ICustomerPreferenceDo
	WithContext(ctx context.Context) ICustomerPreferenceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICustomerPreferenceDo
	WriteDB() ICustomerPreferenceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICustomerPreferenceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICustomerPreferenceDo
	Not(conds ...gen.Condition) ICustomerPreferenceDo
	Or(conds ...gen.Condition) ICustomerPreferenceDo
	Select(conds ...field.Expr) ICustomerPreferenceDo
	Where(conds ...gen.Condition) ICustomerPreferenceDo
	Order(conds ...field.Expr) ICustomerPreferenceDo
	Distinct(cols ...field.Expr) ICustomerPreferenceDo
	Omit(cols ...field.Expr) ICustomerPreferenceDo
	Join(table schema.Tabler, on ...field.Expr) ICustomerPreferenceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICustomerPreferenceDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICustomerPreferenceDo
	Group(cols ...field.Expr) ICustomerPreferenceDo
	Having(conds ...gen.Condition) ICustomerPreferenceDo
	Limit(limit int) ICustomerPreferenceDo
	Offset(offset int) ICustomerPreferenceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICustomerPreferenceDo
	Unscoped() ICustomerPreferenceDo
	Create(values ...*model.CustomerPreference) error
	CreateInBatches(values []*model.CustomerPreference, batchSize int) error
	Save(values ...*model.CustomerPreference) error
	First() (*model.CustomerPreference, error)
	Take() (*model.CustomerPreference, error)
	Last() (*model.CustomerPreference, error)
	Find() ([]*model.CustomerPreference, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CustomerPreference, err error)
	FindInBatches(result *[]*model.CustomerPreference, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CustomerPreference) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICustomerPreferenceDo
	Assign(attrs ...field.AssignExpr) ICustomerPreferenceDo
	Joins(fields ...field.RelationField) ICustomerPreferenceDo
	Preload(fields ...field.RelationField) ICustomerPreferenceDo
	FirstOrInit() (*model.CustomerPreference, error)
	FirstOrCreate() (*model.CustomerPreference, error)
	FindByPage(offset int, limit int) (result []*model.CustomerPreference, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICustomerPreferenceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c customerPreferenceDo) Debug() ICustomerPreferenceDo {
	return c.withDO(c.DO.Debug())
}

func (c customerPreferenceDo) WithContext(ctx context.Context) ICustomerPreferenceDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c customerPreferenceDo) ReadDB() ICustomerPreferenceDo {
	return c.Clauses(dbresolver.Read)
}

func (c customerPreferenceDo) WriteDB() ICustomerPreferenceDo {
	return c.Clauses(dbresolver.Write)
}

func (c customerPreferenceDo) Session(config *gorm.Session) ICustomerPreferenceDo {
	return c.withDO(c.DO.Session(config))
}

func (c customerPreferenceDo) Clauses(conds ...clause.Expression) ICustomerPreferenceDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c customerPreferenceDo) Returning(value interface{}, columns ...string) ICustomerPreferenceDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c customerPreferenceDo) Not(conds ...gen.Condition) ICustomerPreferenceDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c customerPreferenceDo) Or(conds ...gen.Condition) ICustomerPreferenceDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c customerPreferenceDo) Select(conds ...field.Expr) ICustomerPreferenceDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c customerPreferenceDo) Where(conds ...gen.Condition) ICustomerPreferenceDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c customerPreferenceDo) Order(conds ...field.Expr) ICustomerPreferenceDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c customerPreferenceDo) Distinct(cols ...field.Expr) ICustomerPreferenceDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c customerPreferenceDo) Omit(cols ...field.Expr) ICustomerPreferenceDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c customerPreferenceDo) Join(table schema.Tabler, on ...field.Expr) ICustomerPreferenceDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c customerPreferenceDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICustomerPreferenceDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c customerPreferenceDo) RightJoin(table schema.Tabler, on ...field.Expr) ICustomerPreferenceDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c customerPreferenceDo) Group(cols ...field.Expr) ICustomerPreferenceDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c customerPreferenceDo) Having(conds ...gen.Condition) ICustomerPreferenceDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c customerPreferenceDo) Limit(limit int) ICustomerPreferenceDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c customerPreferenceDo) Offset(offset int) ICustomerPreferenceDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c customerPreferenceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICustomerPreferenceDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c customerPreferenceDo) Unscoped() ICustomerPreferenceDo {
	return c.withDO(c.DO.Unscoped())
}

func (c customerPreferenceDo) Create(values ...*model.CustomerPreference) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c customerPreferenceDo) CreateInBatches(values []*model.CustomerPreference, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c customerPreferenceDo) Save(values ...*model.CustomerPreference) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c customerPreferenceDo) First() (*model.CustomerPreference, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerPreference), nil
	}
}

func (c customerPreferenceDo) Take() (*model.CustomerPreference, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerPreference), nil
	}
}

func (c customerPreferenceDo) Last() (*model.CustomerPreference, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerPreference), nil
	}
}

func (c customerPreferenceDo) Find() ([]*model.CustomerPreference, error) {
	result, err := c.DO.Find()
	return result.([]*model.CustomerPreference), err
}

func (c customerPreferenceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CustomerPreference, err error) {
	buf := make([]*model.CustomerPreference, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c customerPreferenceDo) FindInBatches(result *[]*model.CustomerPreference, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c customerPreferenceDo) Attrs(attrs ...field.AssignExpr) ICustomerPreferenceDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c customerPreferenceDo) Assign(attrs ...field.AssignExpr) ICustomerPreferenceDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c customerPreferenceDo) Joins(fields ...field.RelationField) ICustomerPreferenceDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c customerPreferenceDo) Preload(fields ...field.RelationField) ICustomerPreferenceDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c customerPreferenceDo) FirstOrInit() (*model.CustomerPreference, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerPreference), nil
	}
}

func (c customerPreferenceDo) FirstOrCreate() (*model.CustomerPreference, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerPreference), nil
	}
}

func (c customerPreferenceDo) FindByPage(offset int, limit int) (result []*model.CustomerPreference, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c customerPreferenceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c customerPreferenceDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c customerPreferenceDo) Delete(models ...*model.CustomerPreference) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *customerPreferenceDo) withDO(do gen.Dao) *customerPreferenceDo {
	c.DO = *do.(*gen.DO)
	return c
}
