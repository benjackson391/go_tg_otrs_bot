// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newSurveyAnswer(db *gorm.DB, opts ...gen.DOOption) surveyAnswer {
	_surveyAnswer := surveyAnswer{}

	_surveyAnswer.surveyAnswerDo.UseDB(db, opts...)
	_surveyAnswer.surveyAnswerDo.UseModel(&model.SurveyAnswer{})

	tableName := _surveyAnswer.surveyAnswerDo.TableName()
	_surveyAnswer.ALL = field.NewAsterisk(tableName)
	_surveyAnswer.ID = field.NewInt64(tableName, "id")
	_surveyAnswer.QuestionID = field.NewInt64(tableName, "question_id")
	_surveyAnswer.Answer = field.NewString(tableName, "answer")
	_surveyAnswer.Position = field.NewInt32(tableName, "position")
	_surveyAnswer.CreateTime = field.NewTime(tableName, "create_time")
	_surveyAnswer.CreateBy = field.NewInt32(tableName, "create_by")
	_surveyAnswer.ChangeTime = field.NewTime(tableName, "change_time")
	_surveyAnswer.ChangeBy = field.NewInt32(tableName, "change_by")

	_surveyAnswer.fillFieldMap()

	return _surveyAnswer
}

type surveyAnswer struct {
	surveyAnswerDo

	ALL        field.Asterisk
	ID         field.Int64
	QuestionID field.Int64
	Answer     field.String
	Position   field.Int32
	CreateTime field.Time
	CreateBy   field.Int32
	ChangeTime field.Time
	ChangeBy   field.Int32

	fieldMap map[string]field.Expr
}

func (s surveyAnswer) Table(newTableName string) *surveyAnswer {
	s.surveyAnswerDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s surveyAnswer) As(alias string) *surveyAnswer {
	s.surveyAnswerDo.DO = *(s.surveyAnswerDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *surveyAnswer) updateTableName(table string) *surveyAnswer {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.QuestionID = field.NewInt64(table, "question_id")
	s.Answer = field.NewString(table, "answer")
	s.Position = field.NewInt32(table, "position")
	s.CreateTime = field.NewTime(table, "create_time")
	s.CreateBy = field.NewInt32(table, "create_by")
	s.ChangeTime = field.NewTime(table, "change_time")
	s.ChangeBy = field.NewInt32(table, "change_by")

	s.fillFieldMap()

	return s
}

func (s *surveyAnswer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *surveyAnswer) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["question_id"] = s.QuestionID
	s.fieldMap["answer"] = s.Answer
	s.fieldMap["position"] = s.Position
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["change_time"] = s.ChangeTime
	s.fieldMap["change_by"] = s.ChangeBy
}

func (s surveyAnswer) clone(db *gorm.DB) surveyAnswer {
	s.surveyAnswerDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s surveyAnswer) replaceDB(db *gorm.DB) surveyAnswer {
	s.surveyAnswerDo.ReplaceDB(db)
	return s
}

type surveyAnswerDo struct{ gen.DO }

type ISurveyAnswerDo interface {
	gen.SubQuery
	Debug() ISurveyAnswerDo
	WithContext(ctx context.Context) ISurveyAnswerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISurveyAnswerDo
	WriteDB() ISurveyAnswerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISurveyAnswerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISurveyAnswerDo
	Not(conds ...gen.Condition) ISurveyAnswerDo
	Or(conds ...gen.Condition) ISurveyAnswerDo
	Select(conds ...field.Expr) ISurveyAnswerDo
	Where(conds ...gen.Condition) ISurveyAnswerDo
	Order(conds ...field.Expr) ISurveyAnswerDo
	Distinct(cols ...field.Expr) ISurveyAnswerDo
	Omit(cols ...field.Expr) ISurveyAnswerDo
	Join(table schema.Tabler, on ...field.Expr) ISurveyAnswerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISurveyAnswerDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISurveyAnswerDo
	Group(cols ...field.Expr) ISurveyAnswerDo
	Having(conds ...gen.Condition) ISurveyAnswerDo
	Limit(limit int) ISurveyAnswerDo
	Offset(offset int) ISurveyAnswerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISurveyAnswerDo
	Unscoped() ISurveyAnswerDo
	Create(values ...*model.SurveyAnswer) error
	CreateInBatches(values []*model.SurveyAnswer, batchSize int) error
	Save(values ...*model.SurveyAnswer) error
	First() (*model.SurveyAnswer, error)
	Take() (*model.SurveyAnswer, error)
	Last() (*model.SurveyAnswer, error)
	Find() ([]*model.SurveyAnswer, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SurveyAnswer, err error)
	FindInBatches(result *[]*model.SurveyAnswer, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SurveyAnswer) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISurveyAnswerDo
	Assign(attrs ...field.AssignExpr) ISurveyAnswerDo
	Joins(fields ...field.RelationField) ISurveyAnswerDo
	Preload(fields ...field.RelationField) ISurveyAnswerDo
	FirstOrInit() (*model.SurveyAnswer, error)
	FirstOrCreate() (*model.SurveyAnswer, error)
	FindByPage(offset int, limit int) (result []*model.SurveyAnswer, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISurveyAnswerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s surveyAnswerDo) Debug() ISurveyAnswerDo {
	return s.withDO(s.DO.Debug())
}

func (s surveyAnswerDo) WithContext(ctx context.Context) ISurveyAnswerDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s surveyAnswerDo) ReadDB() ISurveyAnswerDo {
	return s.Clauses(dbresolver.Read)
}

func (s surveyAnswerDo) WriteDB() ISurveyAnswerDo {
	return s.Clauses(dbresolver.Write)
}

func (s surveyAnswerDo) Session(config *gorm.Session) ISurveyAnswerDo {
	return s.withDO(s.DO.Session(config))
}

func (s surveyAnswerDo) Clauses(conds ...clause.Expression) ISurveyAnswerDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s surveyAnswerDo) Returning(value interface{}, columns ...string) ISurveyAnswerDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s surveyAnswerDo) Not(conds ...gen.Condition) ISurveyAnswerDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s surveyAnswerDo) Or(conds ...gen.Condition) ISurveyAnswerDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s surveyAnswerDo) Select(conds ...field.Expr) ISurveyAnswerDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s surveyAnswerDo) Where(conds ...gen.Condition) ISurveyAnswerDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s surveyAnswerDo) Order(conds ...field.Expr) ISurveyAnswerDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s surveyAnswerDo) Distinct(cols ...field.Expr) ISurveyAnswerDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s surveyAnswerDo) Omit(cols ...field.Expr) ISurveyAnswerDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s surveyAnswerDo) Join(table schema.Tabler, on ...field.Expr) ISurveyAnswerDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s surveyAnswerDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISurveyAnswerDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s surveyAnswerDo) RightJoin(table schema.Tabler, on ...field.Expr) ISurveyAnswerDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s surveyAnswerDo) Group(cols ...field.Expr) ISurveyAnswerDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s surveyAnswerDo) Having(conds ...gen.Condition) ISurveyAnswerDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s surveyAnswerDo) Limit(limit int) ISurveyAnswerDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s surveyAnswerDo) Offset(offset int) ISurveyAnswerDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s surveyAnswerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISurveyAnswerDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s surveyAnswerDo) Unscoped() ISurveyAnswerDo {
	return s.withDO(s.DO.Unscoped())
}

func (s surveyAnswerDo) Create(values ...*model.SurveyAnswer) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s surveyAnswerDo) CreateInBatches(values []*model.SurveyAnswer, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s surveyAnswerDo) Save(values ...*model.SurveyAnswer) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s surveyAnswerDo) First() (*model.SurveyAnswer, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SurveyAnswer), nil
	}
}

func (s surveyAnswerDo) Take() (*model.SurveyAnswer, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SurveyAnswer), nil
	}
}

func (s surveyAnswerDo) Last() (*model.SurveyAnswer, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SurveyAnswer), nil
	}
}

func (s surveyAnswerDo) Find() ([]*model.SurveyAnswer, error) {
	result, err := s.DO.Find()
	return result.([]*model.SurveyAnswer), err
}

func (s surveyAnswerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SurveyAnswer, err error) {
	buf := make([]*model.SurveyAnswer, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s surveyAnswerDo) FindInBatches(result *[]*model.SurveyAnswer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s surveyAnswerDo) Attrs(attrs ...field.AssignExpr) ISurveyAnswerDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s surveyAnswerDo) Assign(attrs ...field.AssignExpr) ISurveyAnswerDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s surveyAnswerDo) Joins(fields ...field.RelationField) ISurveyAnswerDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s surveyAnswerDo) Preload(fields ...field.RelationField) ISurveyAnswerDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s surveyAnswerDo) FirstOrInit() (*model.SurveyAnswer, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SurveyAnswer), nil
	}
}

func (s surveyAnswerDo) FirstOrCreate() (*model.SurveyAnswer, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SurveyAnswer), nil
	}
}

func (s surveyAnswerDo) FindByPage(offset int, limit int) (result []*model.SurveyAnswer, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s surveyAnswerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s surveyAnswerDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s surveyAnswerDo) Delete(models ...*model.SurveyAnswer) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *surveyAnswerDo) withDO(do gen.Dao) *surveyAnswerDo {
	s.DO = *do.(*gen.DO)
	return s
}
