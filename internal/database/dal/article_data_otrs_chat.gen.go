// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newArticleDataOtrsChat(db *gorm.DB, opts ...gen.DOOption) articleDataOtrsChat {
	_articleDataOtrsChat := articleDataOtrsChat{}

	_articleDataOtrsChat.articleDataOtrsChatDo.UseDB(db, opts...)
	_articleDataOtrsChat.articleDataOtrsChatDo.UseModel(&model.ArticleDataOtrsChat{})

	tableName := _articleDataOtrsChat.articleDataOtrsChatDo.TableName()
	_articleDataOtrsChat.ALL = field.NewAsterisk(tableName)
	_articleDataOtrsChat.ID = field.NewInt64(tableName, "id")
	_articleDataOtrsChat.ArticleID = field.NewInt64(tableName, "article_id")
	_articleDataOtrsChat.ChatParticipantID = field.NewString(tableName, "chat_participant_id")
	_articleDataOtrsChat.ChatParticipantName = field.NewString(tableName, "chat_participant_name")
	_articleDataOtrsChat.ChatParticipantType = field.NewString(tableName, "chat_participant_type")
	_articleDataOtrsChat.MessageText = field.NewString(tableName, "message_text")
	_articleDataOtrsChat.SystemGenerated = field.NewInt32(tableName, "system_generated")
	_articleDataOtrsChat.CreateTime = field.NewTime(tableName, "create_time")

	_articleDataOtrsChat.fillFieldMap()

	return _articleDataOtrsChat
}

type articleDataOtrsChat struct {
	articleDataOtrsChatDo

	ALL                 field.Asterisk
	ID                  field.Int64
	ArticleID           field.Int64
	ChatParticipantID   field.String
	ChatParticipantName field.String
	ChatParticipantType field.String
	MessageText         field.String
	SystemGenerated     field.Int32
	CreateTime          field.Time

	fieldMap map[string]field.Expr
}

func (a articleDataOtrsChat) Table(newTableName string) *articleDataOtrsChat {
	a.articleDataOtrsChatDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a articleDataOtrsChat) As(alias string) *articleDataOtrsChat {
	a.articleDataOtrsChatDo.DO = *(a.articleDataOtrsChatDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *articleDataOtrsChat) updateTableName(table string) *articleDataOtrsChat {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.ArticleID = field.NewInt64(table, "article_id")
	a.ChatParticipantID = field.NewString(table, "chat_participant_id")
	a.ChatParticipantName = field.NewString(table, "chat_participant_name")
	a.ChatParticipantType = field.NewString(table, "chat_participant_type")
	a.MessageText = field.NewString(table, "message_text")
	a.SystemGenerated = field.NewInt32(table, "system_generated")
	a.CreateTime = field.NewTime(table, "create_time")

	a.fillFieldMap()

	return a
}

func (a *articleDataOtrsChat) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *articleDataOtrsChat) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 8)
	a.fieldMap["id"] = a.ID
	a.fieldMap["article_id"] = a.ArticleID
	a.fieldMap["chat_participant_id"] = a.ChatParticipantID
	a.fieldMap["chat_participant_name"] = a.ChatParticipantName
	a.fieldMap["chat_participant_type"] = a.ChatParticipantType
	a.fieldMap["message_text"] = a.MessageText
	a.fieldMap["system_generated"] = a.SystemGenerated
	a.fieldMap["create_time"] = a.CreateTime
}

func (a articleDataOtrsChat) clone(db *gorm.DB) articleDataOtrsChat {
	a.articleDataOtrsChatDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a articleDataOtrsChat) replaceDB(db *gorm.DB) articleDataOtrsChat {
	a.articleDataOtrsChatDo.ReplaceDB(db)
	return a
}

type articleDataOtrsChatDo struct{ gen.DO }

type IArticleDataOtrsChatDo interface {
	gen.SubQuery
	Debug() IArticleDataOtrsChatDo
	WithContext(ctx context.Context) IArticleDataOtrsChatDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IArticleDataOtrsChatDo
	WriteDB() IArticleDataOtrsChatDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IArticleDataOtrsChatDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IArticleDataOtrsChatDo
	Not(conds ...gen.Condition) IArticleDataOtrsChatDo
	Or(conds ...gen.Condition) IArticleDataOtrsChatDo
	Select(conds ...field.Expr) IArticleDataOtrsChatDo
	Where(conds ...gen.Condition) IArticleDataOtrsChatDo
	Order(conds ...field.Expr) IArticleDataOtrsChatDo
	Distinct(cols ...field.Expr) IArticleDataOtrsChatDo
	Omit(cols ...field.Expr) IArticleDataOtrsChatDo
	Join(table schema.Tabler, on ...field.Expr) IArticleDataOtrsChatDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IArticleDataOtrsChatDo
	RightJoin(table schema.Tabler, on ...field.Expr) IArticleDataOtrsChatDo
	Group(cols ...field.Expr) IArticleDataOtrsChatDo
	Having(conds ...gen.Condition) IArticleDataOtrsChatDo
	Limit(limit int) IArticleDataOtrsChatDo
	Offset(offset int) IArticleDataOtrsChatDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IArticleDataOtrsChatDo
	Unscoped() IArticleDataOtrsChatDo
	Create(values ...*model.ArticleDataOtrsChat) error
	CreateInBatches(values []*model.ArticleDataOtrsChat, batchSize int) error
	Save(values ...*model.ArticleDataOtrsChat) error
	First() (*model.ArticleDataOtrsChat, error)
	Take() (*model.ArticleDataOtrsChat, error)
	Last() (*model.ArticleDataOtrsChat, error)
	Find() ([]*model.ArticleDataOtrsChat, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ArticleDataOtrsChat, err error)
	FindInBatches(result *[]*model.ArticleDataOtrsChat, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ArticleDataOtrsChat) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IArticleDataOtrsChatDo
	Assign(attrs ...field.AssignExpr) IArticleDataOtrsChatDo
	Joins(fields ...field.RelationField) IArticleDataOtrsChatDo
	Preload(fields ...field.RelationField) IArticleDataOtrsChatDo
	FirstOrInit() (*model.ArticleDataOtrsChat, error)
	FirstOrCreate() (*model.ArticleDataOtrsChat, error)
	FindByPage(offset int, limit int) (result []*model.ArticleDataOtrsChat, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IArticleDataOtrsChatDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a articleDataOtrsChatDo) Debug() IArticleDataOtrsChatDo {
	return a.withDO(a.DO.Debug())
}

func (a articleDataOtrsChatDo) WithContext(ctx context.Context) IArticleDataOtrsChatDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a articleDataOtrsChatDo) ReadDB() IArticleDataOtrsChatDo {
	return a.Clauses(dbresolver.Read)
}

func (a articleDataOtrsChatDo) WriteDB() IArticleDataOtrsChatDo {
	return a.Clauses(dbresolver.Write)
}

func (a articleDataOtrsChatDo) Session(config *gorm.Session) IArticleDataOtrsChatDo {
	return a.withDO(a.DO.Session(config))
}

func (a articleDataOtrsChatDo) Clauses(conds ...clause.Expression) IArticleDataOtrsChatDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a articleDataOtrsChatDo) Returning(value interface{}, columns ...string) IArticleDataOtrsChatDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a articleDataOtrsChatDo) Not(conds ...gen.Condition) IArticleDataOtrsChatDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a articleDataOtrsChatDo) Or(conds ...gen.Condition) IArticleDataOtrsChatDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a articleDataOtrsChatDo) Select(conds ...field.Expr) IArticleDataOtrsChatDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a articleDataOtrsChatDo) Where(conds ...gen.Condition) IArticleDataOtrsChatDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a articleDataOtrsChatDo) Order(conds ...field.Expr) IArticleDataOtrsChatDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a articleDataOtrsChatDo) Distinct(cols ...field.Expr) IArticleDataOtrsChatDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a articleDataOtrsChatDo) Omit(cols ...field.Expr) IArticleDataOtrsChatDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a articleDataOtrsChatDo) Join(table schema.Tabler, on ...field.Expr) IArticleDataOtrsChatDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a articleDataOtrsChatDo) LeftJoin(table schema.Tabler, on ...field.Expr) IArticleDataOtrsChatDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a articleDataOtrsChatDo) RightJoin(table schema.Tabler, on ...field.Expr) IArticleDataOtrsChatDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a articleDataOtrsChatDo) Group(cols ...field.Expr) IArticleDataOtrsChatDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a articleDataOtrsChatDo) Having(conds ...gen.Condition) IArticleDataOtrsChatDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a articleDataOtrsChatDo) Limit(limit int) IArticleDataOtrsChatDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a articleDataOtrsChatDo) Offset(offset int) IArticleDataOtrsChatDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a articleDataOtrsChatDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IArticleDataOtrsChatDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a articleDataOtrsChatDo) Unscoped() IArticleDataOtrsChatDo {
	return a.withDO(a.DO.Unscoped())
}

func (a articleDataOtrsChatDo) Create(values ...*model.ArticleDataOtrsChat) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a articleDataOtrsChatDo) CreateInBatches(values []*model.ArticleDataOtrsChat, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a articleDataOtrsChatDo) Save(values ...*model.ArticleDataOtrsChat) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a articleDataOtrsChatDo) First() (*model.ArticleDataOtrsChat, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleDataOtrsChat), nil
	}
}

func (a articleDataOtrsChatDo) Take() (*model.ArticleDataOtrsChat, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleDataOtrsChat), nil
	}
}

func (a articleDataOtrsChatDo) Last() (*model.ArticleDataOtrsChat, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleDataOtrsChat), nil
	}
}

func (a articleDataOtrsChatDo) Find() ([]*model.ArticleDataOtrsChat, error) {
	result, err := a.DO.Find()
	return result.([]*model.ArticleDataOtrsChat), err
}

func (a articleDataOtrsChatDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ArticleDataOtrsChat, err error) {
	buf := make([]*model.ArticleDataOtrsChat, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a articleDataOtrsChatDo) FindInBatches(result *[]*model.ArticleDataOtrsChat, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a articleDataOtrsChatDo) Attrs(attrs ...field.AssignExpr) IArticleDataOtrsChatDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a articleDataOtrsChatDo) Assign(attrs ...field.AssignExpr) IArticleDataOtrsChatDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a articleDataOtrsChatDo) Joins(fields ...field.RelationField) IArticleDataOtrsChatDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a articleDataOtrsChatDo) Preload(fields ...field.RelationField) IArticleDataOtrsChatDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a articleDataOtrsChatDo) FirstOrInit() (*model.ArticleDataOtrsChat, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleDataOtrsChat), nil
	}
}

func (a articleDataOtrsChatDo) FirstOrCreate() (*model.ArticleDataOtrsChat, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleDataOtrsChat), nil
	}
}

func (a articleDataOtrsChatDo) FindByPage(offset int, limit int) (result []*model.ArticleDataOtrsChat, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a articleDataOtrsChatDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a articleDataOtrsChatDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a articleDataOtrsChatDo) Delete(models ...*model.ArticleDataOtrsChat) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *articleDataOtrsChatDo) withDO(do gen.Dao) *articleDataOtrsChatDo {
	a.DO = *do.(*gen.DO)
	return a
}
