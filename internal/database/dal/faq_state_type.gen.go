// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newFaqStateType(db *gorm.DB, opts ...gen.DOOption) faqStateType {
	_faqStateType := faqStateType{}

	_faqStateType.faqStateTypeDo.UseDB(db, opts...)
	_faqStateType.faqStateTypeDo.UseModel(&model.FaqStateType{})

	tableName := _faqStateType.faqStateTypeDo.TableName()
	_faqStateType.ALL = field.NewAsterisk(tableName)
	_faqStateType.ID = field.NewInt32(tableName, "id")
	_faqStateType.Name = field.NewString(tableName, "name")

	_faqStateType.fillFieldMap()

	return _faqStateType
}

type faqStateType struct {
	faqStateTypeDo

	ALL  field.Asterisk
	ID   field.Int32
	Name field.String

	fieldMap map[string]field.Expr
}

func (f faqStateType) Table(newTableName string) *faqStateType {
	f.faqStateTypeDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f faqStateType) As(alias string) *faqStateType {
	f.faqStateTypeDo.DO = *(f.faqStateTypeDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *faqStateType) updateTableName(table string) *faqStateType {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt32(table, "id")
	f.Name = field.NewString(table, "name")

	f.fillFieldMap()

	return f
}

func (f *faqStateType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *faqStateType) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 2)
	f.fieldMap["id"] = f.ID
	f.fieldMap["name"] = f.Name
}

func (f faqStateType) clone(db *gorm.DB) faqStateType {
	f.faqStateTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f faqStateType) replaceDB(db *gorm.DB) faqStateType {
	f.faqStateTypeDo.ReplaceDB(db)
	return f
}

type faqStateTypeDo struct{ gen.DO }

type IFaqStateTypeDo interface {
	gen.SubQuery
	Debug() IFaqStateTypeDo
	WithContext(ctx context.Context) IFaqStateTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFaqStateTypeDo
	WriteDB() IFaqStateTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFaqStateTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFaqStateTypeDo
	Not(conds ...gen.Condition) IFaqStateTypeDo
	Or(conds ...gen.Condition) IFaqStateTypeDo
	Select(conds ...field.Expr) IFaqStateTypeDo
	Where(conds ...gen.Condition) IFaqStateTypeDo
	Order(conds ...field.Expr) IFaqStateTypeDo
	Distinct(cols ...field.Expr) IFaqStateTypeDo
	Omit(cols ...field.Expr) IFaqStateTypeDo
	Join(table schema.Tabler, on ...field.Expr) IFaqStateTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFaqStateTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFaqStateTypeDo
	Group(cols ...field.Expr) IFaqStateTypeDo
	Having(conds ...gen.Condition) IFaqStateTypeDo
	Limit(limit int) IFaqStateTypeDo
	Offset(offset int) IFaqStateTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFaqStateTypeDo
	Unscoped() IFaqStateTypeDo
	Create(values ...*model.FaqStateType) error
	CreateInBatches(values []*model.FaqStateType, batchSize int) error
	Save(values ...*model.FaqStateType) error
	First() (*model.FaqStateType, error)
	Take() (*model.FaqStateType, error)
	Last() (*model.FaqStateType, error)
	Find() ([]*model.FaqStateType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FaqStateType, err error)
	FindInBatches(result *[]*model.FaqStateType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FaqStateType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFaqStateTypeDo
	Assign(attrs ...field.AssignExpr) IFaqStateTypeDo
	Joins(fields ...field.RelationField) IFaqStateTypeDo
	Preload(fields ...field.RelationField) IFaqStateTypeDo
	FirstOrInit() (*model.FaqStateType, error)
	FirstOrCreate() (*model.FaqStateType, error)
	FindByPage(offset int, limit int) (result []*model.FaqStateType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFaqStateTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f faqStateTypeDo) Debug() IFaqStateTypeDo {
	return f.withDO(f.DO.Debug())
}

func (f faqStateTypeDo) WithContext(ctx context.Context) IFaqStateTypeDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f faqStateTypeDo) ReadDB() IFaqStateTypeDo {
	return f.Clauses(dbresolver.Read)
}

func (f faqStateTypeDo) WriteDB() IFaqStateTypeDo {
	return f.Clauses(dbresolver.Write)
}

func (f faqStateTypeDo) Session(config *gorm.Session) IFaqStateTypeDo {
	return f.withDO(f.DO.Session(config))
}

func (f faqStateTypeDo) Clauses(conds ...clause.Expression) IFaqStateTypeDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f faqStateTypeDo) Returning(value interface{}, columns ...string) IFaqStateTypeDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f faqStateTypeDo) Not(conds ...gen.Condition) IFaqStateTypeDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f faqStateTypeDo) Or(conds ...gen.Condition) IFaqStateTypeDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f faqStateTypeDo) Select(conds ...field.Expr) IFaqStateTypeDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f faqStateTypeDo) Where(conds ...gen.Condition) IFaqStateTypeDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f faqStateTypeDo) Order(conds ...field.Expr) IFaqStateTypeDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f faqStateTypeDo) Distinct(cols ...field.Expr) IFaqStateTypeDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f faqStateTypeDo) Omit(cols ...field.Expr) IFaqStateTypeDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f faqStateTypeDo) Join(table schema.Tabler, on ...field.Expr) IFaqStateTypeDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f faqStateTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFaqStateTypeDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f faqStateTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IFaqStateTypeDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f faqStateTypeDo) Group(cols ...field.Expr) IFaqStateTypeDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f faqStateTypeDo) Having(conds ...gen.Condition) IFaqStateTypeDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f faqStateTypeDo) Limit(limit int) IFaqStateTypeDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f faqStateTypeDo) Offset(offset int) IFaqStateTypeDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f faqStateTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFaqStateTypeDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f faqStateTypeDo) Unscoped() IFaqStateTypeDo {
	return f.withDO(f.DO.Unscoped())
}

func (f faqStateTypeDo) Create(values ...*model.FaqStateType) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f faqStateTypeDo) CreateInBatches(values []*model.FaqStateType, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f faqStateTypeDo) Save(values ...*model.FaqStateType) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f faqStateTypeDo) First() (*model.FaqStateType, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqStateType), nil
	}
}

func (f faqStateTypeDo) Take() (*model.FaqStateType, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqStateType), nil
	}
}

func (f faqStateTypeDo) Last() (*model.FaqStateType, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqStateType), nil
	}
}

func (f faqStateTypeDo) Find() ([]*model.FaqStateType, error) {
	result, err := f.DO.Find()
	return result.([]*model.FaqStateType), err
}

func (f faqStateTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FaqStateType, err error) {
	buf := make([]*model.FaqStateType, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f faqStateTypeDo) FindInBatches(result *[]*model.FaqStateType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f faqStateTypeDo) Attrs(attrs ...field.AssignExpr) IFaqStateTypeDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f faqStateTypeDo) Assign(attrs ...field.AssignExpr) IFaqStateTypeDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f faqStateTypeDo) Joins(fields ...field.RelationField) IFaqStateTypeDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f faqStateTypeDo) Preload(fields ...field.RelationField) IFaqStateTypeDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f faqStateTypeDo) FirstOrInit() (*model.FaqStateType, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqStateType), nil
	}
}

func (f faqStateTypeDo) FirstOrCreate() (*model.FaqStateType, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqStateType), nil
	}
}

func (f faqStateTypeDo) FindByPage(offset int, limit int) (result []*model.FaqStateType, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f faqStateTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f faqStateTypeDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f faqStateTypeDo) Delete(models ...*model.FaqStateType) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *faqStateTypeDo) withDO(do gen.Dao) *faqStateTypeDo {
	f.DO = *do.(*gen.DO)
	return f
}
