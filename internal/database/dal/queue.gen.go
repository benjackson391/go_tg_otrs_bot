// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newQueue(db *gorm.DB, opts ...gen.DOOption) queue {
	_queue := queue{}

	_queue.queueDo.UseDB(db, opts...)
	_queue.queueDo.UseModel(&model.Queue{})

	tableName := _queue.queueDo.TableName()
	_queue.ALL = field.NewAsterisk(tableName)
	_queue.ID = field.NewInt32(tableName, "id")
	_queue.Name = field.NewString(tableName, "name")
	_queue.GroupID = field.NewInt32(tableName, "group_id")
	_queue.UnlockTimeout = field.NewInt32(tableName, "unlock_timeout")
	_queue.FirstResponseTime = field.NewInt32(tableName, "first_response_time")
	_queue.FirstResponseNotify = field.NewInt32(tableName, "first_response_notify")
	_queue.UpdateTime = field.NewInt32(tableName, "update_time")
	_queue.UpdateNotify = field.NewInt32(tableName, "update_notify")
	_queue.SolutionTime = field.NewInt32(tableName, "solution_time")
	_queue.SolutionNotify = field.NewInt32(tableName, "solution_notify")
	_queue.SystemAddressID = field.NewInt32(tableName, "system_address_id")
	_queue.CalendarName = field.NewString(tableName, "calendar_name")
	_queue.DefaultSignKey = field.NewString(tableName, "default_sign_key")
	_queue.SalutationID = field.NewInt32(tableName, "salutation_id")
	_queue.SignatureID = field.NewInt32(tableName, "signature_id")
	_queue.FollowUpID = field.NewInt32(tableName, "follow_up_id")
	_queue.FollowUpLock = field.NewInt32(tableName, "follow_up_lock")
	_queue.Comments = field.NewString(tableName, "comments")
	_queue.ValidID = field.NewInt32(tableName, "valid_id")
	_queue.CreateTime = field.NewTime(tableName, "create_time")
	_queue.CreateBy = field.NewInt32(tableName, "create_by")
	_queue.ChangeTime = field.NewTime(tableName, "change_time")
	_queue.ChangeBy = field.NewInt32(tableName, "change_by")

	_queue.fillFieldMap()

	return _queue
}

type queue struct {
	queueDo

	ALL                 field.Asterisk
	ID                  field.Int32
	Name                field.String
	GroupID             field.Int32
	UnlockTimeout       field.Int32
	FirstResponseTime   field.Int32
	FirstResponseNotify field.Int32
	UpdateTime          field.Int32
	UpdateNotify        field.Int32
	SolutionTime        field.Int32
	SolutionNotify      field.Int32
	SystemAddressID     field.Int32
	CalendarName        field.String
	DefaultSignKey      field.String
	SalutationID        field.Int32
	SignatureID         field.Int32
	FollowUpID          field.Int32
	FollowUpLock        field.Int32
	Comments            field.String
	ValidID             field.Int32
	CreateTime          field.Time
	CreateBy            field.Int32
	ChangeTime          field.Time
	ChangeBy            field.Int32

	fieldMap map[string]field.Expr
}

func (q queue) Table(newTableName string) *queue {
	q.queueDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q queue) As(alias string) *queue {
	q.queueDo.DO = *(q.queueDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *queue) updateTableName(table string) *queue {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt32(table, "id")
	q.Name = field.NewString(table, "name")
	q.GroupID = field.NewInt32(table, "group_id")
	q.UnlockTimeout = field.NewInt32(table, "unlock_timeout")
	q.FirstResponseTime = field.NewInt32(table, "first_response_time")
	q.FirstResponseNotify = field.NewInt32(table, "first_response_notify")
	q.UpdateTime = field.NewInt32(table, "update_time")
	q.UpdateNotify = field.NewInt32(table, "update_notify")
	q.SolutionTime = field.NewInt32(table, "solution_time")
	q.SolutionNotify = field.NewInt32(table, "solution_notify")
	q.SystemAddressID = field.NewInt32(table, "system_address_id")
	q.CalendarName = field.NewString(table, "calendar_name")
	q.DefaultSignKey = field.NewString(table, "default_sign_key")
	q.SalutationID = field.NewInt32(table, "salutation_id")
	q.SignatureID = field.NewInt32(table, "signature_id")
	q.FollowUpID = field.NewInt32(table, "follow_up_id")
	q.FollowUpLock = field.NewInt32(table, "follow_up_lock")
	q.Comments = field.NewString(table, "comments")
	q.ValidID = field.NewInt32(table, "valid_id")
	q.CreateTime = field.NewTime(table, "create_time")
	q.CreateBy = field.NewInt32(table, "create_by")
	q.ChangeTime = field.NewTime(table, "change_time")
	q.ChangeBy = field.NewInt32(table, "change_by")

	q.fillFieldMap()

	return q
}

func (q *queue) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *queue) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 23)
	q.fieldMap["id"] = q.ID
	q.fieldMap["name"] = q.Name
	q.fieldMap["group_id"] = q.GroupID
	q.fieldMap["unlock_timeout"] = q.UnlockTimeout
	q.fieldMap["first_response_time"] = q.FirstResponseTime
	q.fieldMap["first_response_notify"] = q.FirstResponseNotify
	q.fieldMap["update_time"] = q.UpdateTime
	q.fieldMap["update_notify"] = q.UpdateNotify
	q.fieldMap["solution_time"] = q.SolutionTime
	q.fieldMap["solution_notify"] = q.SolutionNotify
	q.fieldMap["system_address_id"] = q.SystemAddressID
	q.fieldMap["calendar_name"] = q.CalendarName
	q.fieldMap["default_sign_key"] = q.DefaultSignKey
	q.fieldMap["salutation_id"] = q.SalutationID
	q.fieldMap["signature_id"] = q.SignatureID
	q.fieldMap["follow_up_id"] = q.FollowUpID
	q.fieldMap["follow_up_lock"] = q.FollowUpLock
	q.fieldMap["comments"] = q.Comments
	q.fieldMap["valid_id"] = q.ValidID
	q.fieldMap["create_time"] = q.CreateTime
	q.fieldMap["create_by"] = q.CreateBy
	q.fieldMap["change_time"] = q.ChangeTime
	q.fieldMap["change_by"] = q.ChangeBy
}

func (q queue) clone(db *gorm.DB) queue {
	q.queueDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q queue) replaceDB(db *gorm.DB) queue {
	q.queueDo.ReplaceDB(db)
	return q
}

type queueDo struct{ gen.DO }

type IQueueDo interface {
	gen.SubQuery
	Debug() IQueueDo
	WithContext(ctx context.Context) IQueueDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQueueDo
	WriteDB() IQueueDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQueueDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQueueDo
	Not(conds ...gen.Condition) IQueueDo
	Or(conds ...gen.Condition) IQueueDo
	Select(conds ...field.Expr) IQueueDo
	Where(conds ...gen.Condition) IQueueDo
	Order(conds ...field.Expr) IQueueDo
	Distinct(cols ...field.Expr) IQueueDo
	Omit(cols ...field.Expr) IQueueDo
	Join(table schema.Tabler, on ...field.Expr) IQueueDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQueueDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQueueDo
	Group(cols ...field.Expr) IQueueDo
	Having(conds ...gen.Condition) IQueueDo
	Limit(limit int) IQueueDo
	Offset(offset int) IQueueDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQueueDo
	Unscoped() IQueueDo
	Create(values ...*model.Queue) error
	CreateInBatches(values []*model.Queue, batchSize int) error
	Save(values ...*model.Queue) error
	First() (*model.Queue, error)
	Take() (*model.Queue, error)
	Last() (*model.Queue, error)
	Find() ([]*model.Queue, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Queue, err error)
	FindInBatches(result *[]*model.Queue, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Queue) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQueueDo
	Assign(attrs ...field.AssignExpr) IQueueDo
	Joins(fields ...field.RelationField) IQueueDo
	Preload(fields ...field.RelationField) IQueueDo
	FirstOrInit() (*model.Queue, error)
	FirstOrCreate() (*model.Queue, error)
	FindByPage(offset int, limit int) (result []*model.Queue, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQueueDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q queueDo) Debug() IQueueDo {
	return q.withDO(q.DO.Debug())
}

func (q queueDo) WithContext(ctx context.Context) IQueueDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q queueDo) ReadDB() IQueueDo {
	return q.Clauses(dbresolver.Read)
}

func (q queueDo) WriteDB() IQueueDo {
	return q.Clauses(dbresolver.Write)
}

func (q queueDo) Session(config *gorm.Session) IQueueDo {
	return q.withDO(q.DO.Session(config))
}

func (q queueDo) Clauses(conds ...clause.Expression) IQueueDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q queueDo) Returning(value interface{}, columns ...string) IQueueDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q queueDo) Not(conds ...gen.Condition) IQueueDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q queueDo) Or(conds ...gen.Condition) IQueueDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q queueDo) Select(conds ...field.Expr) IQueueDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q queueDo) Where(conds ...gen.Condition) IQueueDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q queueDo) Order(conds ...field.Expr) IQueueDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q queueDo) Distinct(cols ...field.Expr) IQueueDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q queueDo) Omit(cols ...field.Expr) IQueueDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q queueDo) Join(table schema.Tabler, on ...field.Expr) IQueueDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q queueDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQueueDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q queueDo) RightJoin(table schema.Tabler, on ...field.Expr) IQueueDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q queueDo) Group(cols ...field.Expr) IQueueDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q queueDo) Having(conds ...gen.Condition) IQueueDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q queueDo) Limit(limit int) IQueueDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q queueDo) Offset(offset int) IQueueDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q queueDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQueueDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q queueDo) Unscoped() IQueueDo {
	return q.withDO(q.DO.Unscoped())
}

func (q queueDo) Create(values ...*model.Queue) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q queueDo) CreateInBatches(values []*model.Queue, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q queueDo) Save(values ...*model.Queue) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q queueDo) First() (*model.Queue, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Queue), nil
	}
}

func (q queueDo) Take() (*model.Queue, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Queue), nil
	}
}

func (q queueDo) Last() (*model.Queue, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Queue), nil
	}
}

func (q queueDo) Find() ([]*model.Queue, error) {
	result, err := q.DO.Find()
	return result.([]*model.Queue), err
}

func (q queueDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Queue, err error) {
	buf := make([]*model.Queue, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q queueDo) FindInBatches(result *[]*model.Queue, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q queueDo) Attrs(attrs ...field.AssignExpr) IQueueDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q queueDo) Assign(attrs ...field.AssignExpr) IQueueDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q queueDo) Joins(fields ...field.RelationField) IQueueDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q queueDo) Preload(fields ...field.RelationField) IQueueDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q queueDo) FirstOrInit() (*model.Queue, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Queue), nil
	}
}

func (q queueDo) FirstOrCreate() (*model.Queue, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Queue), nil
	}
}

func (q queueDo) FindByPage(offset int, limit int) (result []*model.Queue, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q queueDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q queueDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q queueDo) Delete(models ...*model.Queue) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *queueDo) withDO(do gen.Dao) *queueDo {
	q.DO = *do.(*gen.DO)
	return q
}
