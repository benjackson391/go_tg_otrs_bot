// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newPmProcess(db *gorm.DB, opts ...gen.DOOption) pmProcess {
	_pmProcess := pmProcess{}

	_pmProcess.pmProcessDo.UseDB(db, opts...)
	_pmProcess.pmProcessDo.UseModel(&model.PmProcess{})

	tableName := _pmProcess.pmProcessDo.TableName()
	_pmProcess.ALL = field.NewAsterisk(tableName)
	_pmProcess.ID = field.NewInt32(tableName, "id")
	_pmProcess.EntityID = field.NewString(tableName, "entity_id")
	_pmProcess.Name = field.NewString(tableName, "name")
	_pmProcess.StateEntityID = field.NewString(tableName, "state_entity_id")
	_pmProcess.Layout = field.NewBytes(tableName, "layout")
	_pmProcess.Config = field.NewBytes(tableName, "config")
	_pmProcess.CreateTime = field.NewTime(tableName, "create_time")
	_pmProcess.CreateBy = field.NewInt32(tableName, "create_by")
	_pmProcess.ChangeTime = field.NewTime(tableName, "change_time")
	_pmProcess.ChangeBy = field.NewInt32(tableName, "change_by")

	_pmProcess.fillFieldMap()

	return _pmProcess
}

type pmProcess struct {
	pmProcessDo

	ALL           field.Asterisk
	ID            field.Int32
	EntityID      field.String
	Name          field.String
	StateEntityID field.String
	Layout        field.Bytes
	Config        field.Bytes
	CreateTime    field.Time
	CreateBy      field.Int32
	ChangeTime    field.Time
	ChangeBy      field.Int32

	fieldMap map[string]field.Expr
}

func (p pmProcess) Table(newTableName string) *pmProcess {
	p.pmProcessDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmProcess) As(alias string) *pmProcess {
	p.pmProcessDo.DO = *(p.pmProcessDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmProcess) updateTableName(table string) *pmProcess {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.EntityID = field.NewString(table, "entity_id")
	p.Name = field.NewString(table, "name")
	p.StateEntityID = field.NewString(table, "state_entity_id")
	p.Layout = field.NewBytes(table, "layout")
	p.Config = field.NewBytes(table, "config")
	p.CreateTime = field.NewTime(table, "create_time")
	p.CreateBy = field.NewInt32(table, "create_by")
	p.ChangeTime = field.NewTime(table, "change_time")
	p.ChangeBy = field.NewInt32(table, "change_by")

	p.fillFieldMap()

	return p
}

func (p *pmProcess) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmProcess) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 10)
	p.fieldMap["id"] = p.ID
	p.fieldMap["entity_id"] = p.EntityID
	p.fieldMap["name"] = p.Name
	p.fieldMap["state_entity_id"] = p.StateEntityID
	p.fieldMap["layout"] = p.Layout
	p.fieldMap["config"] = p.Config
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["create_by"] = p.CreateBy
	p.fieldMap["change_time"] = p.ChangeTime
	p.fieldMap["change_by"] = p.ChangeBy
}

func (p pmProcess) clone(db *gorm.DB) pmProcess {
	p.pmProcessDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmProcess) replaceDB(db *gorm.DB) pmProcess {
	p.pmProcessDo.ReplaceDB(db)
	return p
}

type pmProcessDo struct{ gen.DO }

type IPmProcessDo interface {
	gen.SubQuery
	Debug() IPmProcessDo
	WithContext(ctx context.Context) IPmProcessDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPmProcessDo
	WriteDB() IPmProcessDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPmProcessDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPmProcessDo
	Not(conds ...gen.Condition) IPmProcessDo
	Or(conds ...gen.Condition) IPmProcessDo
	Select(conds ...field.Expr) IPmProcessDo
	Where(conds ...gen.Condition) IPmProcessDo
	Order(conds ...field.Expr) IPmProcessDo
	Distinct(cols ...field.Expr) IPmProcessDo
	Omit(cols ...field.Expr) IPmProcessDo
	Join(table schema.Tabler, on ...field.Expr) IPmProcessDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPmProcessDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPmProcessDo
	Group(cols ...field.Expr) IPmProcessDo
	Having(conds ...gen.Condition) IPmProcessDo
	Limit(limit int) IPmProcessDo
	Offset(offset int) IPmProcessDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPmProcessDo
	Unscoped() IPmProcessDo
	Create(values ...*model.PmProcess) error
	CreateInBatches(values []*model.PmProcess, batchSize int) error
	Save(values ...*model.PmProcess) error
	First() (*model.PmProcess, error)
	Take() (*model.PmProcess, error)
	Last() (*model.PmProcess, error)
	Find() ([]*model.PmProcess, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmProcess, err error)
	FindInBatches(result *[]*model.PmProcess, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PmProcess) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPmProcessDo
	Assign(attrs ...field.AssignExpr) IPmProcessDo
	Joins(fields ...field.RelationField) IPmProcessDo
	Preload(fields ...field.RelationField) IPmProcessDo
	FirstOrInit() (*model.PmProcess, error)
	FirstOrCreate() (*model.PmProcess, error)
	FindByPage(offset int, limit int) (result []*model.PmProcess, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPmProcessDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pmProcessDo) Debug() IPmProcessDo {
	return p.withDO(p.DO.Debug())
}

func (p pmProcessDo) WithContext(ctx context.Context) IPmProcessDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmProcessDo) ReadDB() IPmProcessDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmProcessDo) WriteDB() IPmProcessDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmProcessDo) Session(config *gorm.Session) IPmProcessDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmProcessDo) Clauses(conds ...clause.Expression) IPmProcessDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmProcessDo) Returning(value interface{}, columns ...string) IPmProcessDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmProcessDo) Not(conds ...gen.Condition) IPmProcessDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmProcessDo) Or(conds ...gen.Condition) IPmProcessDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmProcessDo) Select(conds ...field.Expr) IPmProcessDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmProcessDo) Where(conds ...gen.Condition) IPmProcessDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmProcessDo) Order(conds ...field.Expr) IPmProcessDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmProcessDo) Distinct(cols ...field.Expr) IPmProcessDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmProcessDo) Omit(cols ...field.Expr) IPmProcessDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmProcessDo) Join(table schema.Tabler, on ...field.Expr) IPmProcessDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmProcessDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPmProcessDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmProcessDo) RightJoin(table schema.Tabler, on ...field.Expr) IPmProcessDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmProcessDo) Group(cols ...field.Expr) IPmProcessDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmProcessDo) Having(conds ...gen.Condition) IPmProcessDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmProcessDo) Limit(limit int) IPmProcessDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmProcessDo) Offset(offset int) IPmProcessDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmProcessDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPmProcessDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmProcessDo) Unscoped() IPmProcessDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmProcessDo) Create(values ...*model.PmProcess) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmProcessDo) CreateInBatches(values []*model.PmProcess, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmProcessDo) Save(values ...*model.PmProcess) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmProcessDo) First() (*model.PmProcess, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmProcess), nil
	}
}

func (p pmProcessDo) Take() (*model.PmProcess, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmProcess), nil
	}
}

func (p pmProcessDo) Last() (*model.PmProcess, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmProcess), nil
	}
}

func (p pmProcessDo) Find() ([]*model.PmProcess, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmProcess), err
}

func (p pmProcessDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmProcess, err error) {
	buf := make([]*model.PmProcess, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmProcessDo) FindInBatches(result *[]*model.PmProcess, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmProcessDo) Attrs(attrs ...field.AssignExpr) IPmProcessDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmProcessDo) Assign(attrs ...field.AssignExpr) IPmProcessDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmProcessDo) Joins(fields ...field.RelationField) IPmProcessDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmProcessDo) Preload(fields ...field.RelationField) IPmProcessDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmProcessDo) FirstOrInit() (*model.PmProcess, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmProcess), nil
	}
}

func (p pmProcessDo) FirstOrCreate() (*model.PmProcess, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmProcess), nil
	}
}

func (p pmProcessDo) FindByPage(offset int, limit int) (result []*model.PmProcess, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmProcessDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmProcessDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmProcessDo) Delete(models ...*model.PmProcess) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmProcessDo) withDO(do gen.Dao) *pmProcessDo {
	p.DO = *do.(*gen.DO)
	return p
}
