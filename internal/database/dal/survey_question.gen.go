// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newSurveyQuestion(db *gorm.DB, opts ...gen.DOOption) surveyQuestion {
	_surveyQuestion := surveyQuestion{}

	_surveyQuestion.surveyQuestionDo.UseDB(db, opts...)
	_surveyQuestion.surveyQuestionDo.UseModel(&model.SurveyQuestion{})

	tableName := _surveyQuestion.surveyQuestionDo.TableName()
	_surveyQuestion.ALL = field.NewAsterisk(tableName)
	_surveyQuestion.ID = field.NewInt64(tableName, "id")
	_surveyQuestion.SurveyID = field.NewInt64(tableName, "survey_id")
	_surveyQuestion.Question = field.NewString(tableName, "question")
	_surveyQuestion.QuestionType = field.NewString(tableName, "question_type")
	_surveyQuestion.Position = field.NewInt32(tableName, "position")
	_surveyQuestion.AnswerRequired = field.NewInt32(tableName, "answer_required")
	_surveyQuestion.CreateTime = field.NewTime(tableName, "create_time")
	_surveyQuestion.CreateBy = field.NewInt32(tableName, "create_by")
	_surveyQuestion.ChangeTime = field.NewTime(tableName, "change_time")
	_surveyQuestion.ChangeBy = field.NewInt32(tableName, "change_by")

	_surveyQuestion.fillFieldMap()

	return _surveyQuestion
}

type surveyQuestion struct {
	surveyQuestionDo

	ALL            field.Asterisk
	ID             field.Int64
	SurveyID       field.Int64
	Question       field.String
	QuestionType   field.String
	Position       field.Int32
	AnswerRequired field.Int32
	CreateTime     field.Time
	CreateBy       field.Int32
	ChangeTime     field.Time
	ChangeBy       field.Int32

	fieldMap map[string]field.Expr
}

func (s surveyQuestion) Table(newTableName string) *surveyQuestion {
	s.surveyQuestionDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s surveyQuestion) As(alias string) *surveyQuestion {
	s.surveyQuestionDo.DO = *(s.surveyQuestionDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *surveyQuestion) updateTableName(table string) *surveyQuestion {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.SurveyID = field.NewInt64(table, "survey_id")
	s.Question = field.NewString(table, "question")
	s.QuestionType = field.NewString(table, "question_type")
	s.Position = field.NewInt32(table, "position")
	s.AnswerRequired = field.NewInt32(table, "answer_required")
	s.CreateTime = field.NewTime(table, "create_time")
	s.CreateBy = field.NewInt32(table, "create_by")
	s.ChangeTime = field.NewTime(table, "change_time")
	s.ChangeBy = field.NewInt32(table, "change_by")

	s.fillFieldMap()

	return s
}

func (s *surveyQuestion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *surveyQuestion) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["survey_id"] = s.SurveyID
	s.fieldMap["question"] = s.Question
	s.fieldMap["question_type"] = s.QuestionType
	s.fieldMap["position"] = s.Position
	s.fieldMap["answer_required"] = s.AnswerRequired
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["change_time"] = s.ChangeTime
	s.fieldMap["change_by"] = s.ChangeBy
}

func (s surveyQuestion) clone(db *gorm.DB) surveyQuestion {
	s.surveyQuestionDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s surveyQuestion) replaceDB(db *gorm.DB) surveyQuestion {
	s.surveyQuestionDo.ReplaceDB(db)
	return s
}

type surveyQuestionDo struct{ gen.DO }

type ISurveyQuestionDo interface {
	gen.SubQuery
	Debug() ISurveyQuestionDo
	WithContext(ctx context.Context) ISurveyQuestionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISurveyQuestionDo
	WriteDB() ISurveyQuestionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISurveyQuestionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISurveyQuestionDo
	Not(conds ...gen.Condition) ISurveyQuestionDo
	Or(conds ...gen.Condition) ISurveyQuestionDo
	Select(conds ...field.Expr) ISurveyQuestionDo
	Where(conds ...gen.Condition) ISurveyQuestionDo
	Order(conds ...field.Expr) ISurveyQuestionDo
	Distinct(cols ...field.Expr) ISurveyQuestionDo
	Omit(cols ...field.Expr) ISurveyQuestionDo
	Join(table schema.Tabler, on ...field.Expr) ISurveyQuestionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISurveyQuestionDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISurveyQuestionDo
	Group(cols ...field.Expr) ISurveyQuestionDo
	Having(conds ...gen.Condition) ISurveyQuestionDo
	Limit(limit int) ISurveyQuestionDo
	Offset(offset int) ISurveyQuestionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISurveyQuestionDo
	Unscoped() ISurveyQuestionDo
	Create(values ...*model.SurveyQuestion) error
	CreateInBatches(values []*model.SurveyQuestion, batchSize int) error
	Save(values ...*model.SurveyQuestion) error
	First() (*model.SurveyQuestion, error)
	Take() (*model.SurveyQuestion, error)
	Last() (*model.SurveyQuestion, error)
	Find() ([]*model.SurveyQuestion, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SurveyQuestion, err error)
	FindInBatches(result *[]*model.SurveyQuestion, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SurveyQuestion) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISurveyQuestionDo
	Assign(attrs ...field.AssignExpr) ISurveyQuestionDo
	Joins(fields ...field.RelationField) ISurveyQuestionDo
	Preload(fields ...field.RelationField) ISurveyQuestionDo
	FirstOrInit() (*model.SurveyQuestion, error)
	FirstOrCreate() (*model.SurveyQuestion, error)
	FindByPage(offset int, limit int) (result []*model.SurveyQuestion, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISurveyQuestionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s surveyQuestionDo) Debug() ISurveyQuestionDo {
	return s.withDO(s.DO.Debug())
}

func (s surveyQuestionDo) WithContext(ctx context.Context) ISurveyQuestionDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s surveyQuestionDo) ReadDB() ISurveyQuestionDo {
	return s.Clauses(dbresolver.Read)
}

func (s surveyQuestionDo) WriteDB() ISurveyQuestionDo {
	return s.Clauses(dbresolver.Write)
}

func (s surveyQuestionDo) Session(config *gorm.Session) ISurveyQuestionDo {
	return s.withDO(s.DO.Session(config))
}

func (s surveyQuestionDo) Clauses(conds ...clause.Expression) ISurveyQuestionDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s surveyQuestionDo) Returning(value interface{}, columns ...string) ISurveyQuestionDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s surveyQuestionDo) Not(conds ...gen.Condition) ISurveyQuestionDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s surveyQuestionDo) Or(conds ...gen.Condition) ISurveyQuestionDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s surveyQuestionDo) Select(conds ...field.Expr) ISurveyQuestionDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s surveyQuestionDo) Where(conds ...gen.Condition) ISurveyQuestionDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s surveyQuestionDo) Order(conds ...field.Expr) ISurveyQuestionDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s surveyQuestionDo) Distinct(cols ...field.Expr) ISurveyQuestionDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s surveyQuestionDo) Omit(cols ...field.Expr) ISurveyQuestionDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s surveyQuestionDo) Join(table schema.Tabler, on ...field.Expr) ISurveyQuestionDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s surveyQuestionDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISurveyQuestionDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s surveyQuestionDo) RightJoin(table schema.Tabler, on ...field.Expr) ISurveyQuestionDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s surveyQuestionDo) Group(cols ...field.Expr) ISurveyQuestionDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s surveyQuestionDo) Having(conds ...gen.Condition) ISurveyQuestionDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s surveyQuestionDo) Limit(limit int) ISurveyQuestionDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s surveyQuestionDo) Offset(offset int) ISurveyQuestionDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s surveyQuestionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISurveyQuestionDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s surveyQuestionDo) Unscoped() ISurveyQuestionDo {
	return s.withDO(s.DO.Unscoped())
}

func (s surveyQuestionDo) Create(values ...*model.SurveyQuestion) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s surveyQuestionDo) CreateInBatches(values []*model.SurveyQuestion, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s surveyQuestionDo) Save(values ...*model.SurveyQuestion) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s surveyQuestionDo) First() (*model.SurveyQuestion, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SurveyQuestion), nil
	}
}

func (s surveyQuestionDo) Take() (*model.SurveyQuestion, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SurveyQuestion), nil
	}
}

func (s surveyQuestionDo) Last() (*model.SurveyQuestion, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SurveyQuestion), nil
	}
}

func (s surveyQuestionDo) Find() ([]*model.SurveyQuestion, error) {
	result, err := s.DO.Find()
	return result.([]*model.SurveyQuestion), err
}

func (s surveyQuestionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SurveyQuestion, err error) {
	buf := make([]*model.SurveyQuestion, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s surveyQuestionDo) FindInBatches(result *[]*model.SurveyQuestion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s surveyQuestionDo) Attrs(attrs ...field.AssignExpr) ISurveyQuestionDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s surveyQuestionDo) Assign(attrs ...field.AssignExpr) ISurveyQuestionDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s surveyQuestionDo) Joins(fields ...field.RelationField) ISurveyQuestionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s surveyQuestionDo) Preload(fields ...field.RelationField) ISurveyQuestionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s surveyQuestionDo) FirstOrInit() (*model.SurveyQuestion, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SurveyQuestion), nil
	}
}

func (s surveyQuestionDo) FirstOrCreate() (*model.SurveyQuestion, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SurveyQuestion), nil
	}
}

func (s surveyQuestionDo) FindByPage(offset int, limit int) (result []*model.SurveyQuestion, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s surveyQuestionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s surveyQuestionDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s surveyQuestionDo) Delete(models ...*model.SurveyQuestion) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *surveyQuestionDo) withDO(do gen.Dao) *surveyQuestionDo {
	s.DO = *do.(*gen.DO)
	return s
}
