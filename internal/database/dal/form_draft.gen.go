// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newFormDraft(db *gorm.DB, opts ...gen.DOOption) formDraft {
	_formDraft := formDraft{}

	_formDraft.formDraftDo.UseDB(db, opts...)
	_formDraft.formDraftDo.UseModel(&model.FormDraft{})

	tableName := _formDraft.formDraftDo.TableName()
	_formDraft.ALL = field.NewAsterisk(tableName)
	_formDraft.ID = field.NewInt32(tableName, "id")
	_formDraft.ObjectType = field.NewString(tableName, "object_type")
	_formDraft.ObjectID = field.NewInt32(tableName, "object_id")
	_formDraft.Action = field.NewString(tableName, "action")
	_formDraft.Title = field.NewString(tableName, "title")
	_formDraft.Content = field.NewBytes(tableName, "content")
	_formDraft.CreateTime = field.NewTime(tableName, "create_time")
	_formDraft.CreateBy = field.NewInt32(tableName, "create_by")
	_formDraft.ChangeTime = field.NewTime(tableName, "change_time")
	_formDraft.ChangeBy = field.NewInt32(tableName, "change_by")

	_formDraft.fillFieldMap()

	return _formDraft
}

type formDraft struct {
	formDraftDo

	ALL        field.Asterisk
	ID         field.Int32
	ObjectType field.String
	ObjectID   field.Int32
	Action     field.String
	Title      field.String
	Content    field.Bytes
	CreateTime field.Time
	CreateBy   field.Int32
	ChangeTime field.Time
	ChangeBy   field.Int32

	fieldMap map[string]field.Expr
}

func (f formDraft) Table(newTableName string) *formDraft {
	f.formDraftDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f formDraft) As(alias string) *formDraft {
	f.formDraftDo.DO = *(f.formDraftDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *formDraft) updateTableName(table string) *formDraft {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt32(table, "id")
	f.ObjectType = field.NewString(table, "object_type")
	f.ObjectID = field.NewInt32(table, "object_id")
	f.Action = field.NewString(table, "action")
	f.Title = field.NewString(table, "title")
	f.Content = field.NewBytes(table, "content")
	f.CreateTime = field.NewTime(table, "create_time")
	f.CreateBy = field.NewInt32(table, "create_by")
	f.ChangeTime = field.NewTime(table, "change_time")
	f.ChangeBy = field.NewInt32(table, "change_by")

	f.fillFieldMap()

	return f
}

func (f *formDraft) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *formDraft) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 10)
	f.fieldMap["id"] = f.ID
	f.fieldMap["object_type"] = f.ObjectType
	f.fieldMap["object_id"] = f.ObjectID
	f.fieldMap["action"] = f.Action
	f.fieldMap["title"] = f.Title
	f.fieldMap["content"] = f.Content
	f.fieldMap["create_time"] = f.CreateTime
	f.fieldMap["create_by"] = f.CreateBy
	f.fieldMap["change_time"] = f.ChangeTime
	f.fieldMap["change_by"] = f.ChangeBy
}

func (f formDraft) clone(db *gorm.DB) formDraft {
	f.formDraftDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f formDraft) replaceDB(db *gorm.DB) formDraft {
	f.formDraftDo.ReplaceDB(db)
	return f
}

type formDraftDo struct{ gen.DO }

type IFormDraftDo interface {
	gen.SubQuery
	Debug() IFormDraftDo
	WithContext(ctx context.Context) IFormDraftDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFormDraftDo
	WriteDB() IFormDraftDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFormDraftDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFormDraftDo
	Not(conds ...gen.Condition) IFormDraftDo
	Or(conds ...gen.Condition) IFormDraftDo
	Select(conds ...field.Expr) IFormDraftDo
	Where(conds ...gen.Condition) IFormDraftDo
	Order(conds ...field.Expr) IFormDraftDo
	Distinct(cols ...field.Expr) IFormDraftDo
	Omit(cols ...field.Expr) IFormDraftDo
	Join(table schema.Tabler, on ...field.Expr) IFormDraftDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFormDraftDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFormDraftDo
	Group(cols ...field.Expr) IFormDraftDo
	Having(conds ...gen.Condition) IFormDraftDo
	Limit(limit int) IFormDraftDo
	Offset(offset int) IFormDraftDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFormDraftDo
	Unscoped() IFormDraftDo
	Create(values ...*model.FormDraft) error
	CreateInBatches(values []*model.FormDraft, batchSize int) error
	Save(values ...*model.FormDraft) error
	First() (*model.FormDraft, error)
	Take() (*model.FormDraft, error)
	Last() (*model.FormDraft, error)
	Find() ([]*model.FormDraft, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FormDraft, err error)
	FindInBatches(result *[]*model.FormDraft, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FormDraft) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFormDraftDo
	Assign(attrs ...field.AssignExpr) IFormDraftDo
	Joins(fields ...field.RelationField) IFormDraftDo
	Preload(fields ...field.RelationField) IFormDraftDo
	FirstOrInit() (*model.FormDraft, error)
	FirstOrCreate() (*model.FormDraft, error)
	FindByPage(offset int, limit int) (result []*model.FormDraft, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFormDraftDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f formDraftDo) Debug() IFormDraftDo {
	return f.withDO(f.DO.Debug())
}

func (f formDraftDo) WithContext(ctx context.Context) IFormDraftDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f formDraftDo) ReadDB() IFormDraftDo {
	return f.Clauses(dbresolver.Read)
}

func (f formDraftDo) WriteDB() IFormDraftDo {
	return f.Clauses(dbresolver.Write)
}

func (f formDraftDo) Session(config *gorm.Session) IFormDraftDo {
	return f.withDO(f.DO.Session(config))
}

func (f formDraftDo) Clauses(conds ...clause.Expression) IFormDraftDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f formDraftDo) Returning(value interface{}, columns ...string) IFormDraftDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f formDraftDo) Not(conds ...gen.Condition) IFormDraftDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f formDraftDo) Or(conds ...gen.Condition) IFormDraftDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f formDraftDo) Select(conds ...field.Expr) IFormDraftDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f formDraftDo) Where(conds ...gen.Condition) IFormDraftDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f formDraftDo) Order(conds ...field.Expr) IFormDraftDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f formDraftDo) Distinct(cols ...field.Expr) IFormDraftDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f formDraftDo) Omit(cols ...field.Expr) IFormDraftDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f formDraftDo) Join(table schema.Tabler, on ...field.Expr) IFormDraftDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f formDraftDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFormDraftDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f formDraftDo) RightJoin(table schema.Tabler, on ...field.Expr) IFormDraftDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f formDraftDo) Group(cols ...field.Expr) IFormDraftDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f formDraftDo) Having(conds ...gen.Condition) IFormDraftDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f formDraftDo) Limit(limit int) IFormDraftDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f formDraftDo) Offset(offset int) IFormDraftDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f formDraftDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFormDraftDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f formDraftDo) Unscoped() IFormDraftDo {
	return f.withDO(f.DO.Unscoped())
}

func (f formDraftDo) Create(values ...*model.FormDraft) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f formDraftDo) CreateInBatches(values []*model.FormDraft, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f formDraftDo) Save(values ...*model.FormDraft) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f formDraftDo) First() (*model.FormDraft, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FormDraft), nil
	}
}

func (f formDraftDo) Take() (*model.FormDraft, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FormDraft), nil
	}
}

func (f formDraftDo) Last() (*model.FormDraft, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FormDraft), nil
	}
}

func (f formDraftDo) Find() ([]*model.FormDraft, error) {
	result, err := f.DO.Find()
	return result.([]*model.FormDraft), err
}

func (f formDraftDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FormDraft, err error) {
	buf := make([]*model.FormDraft, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f formDraftDo) FindInBatches(result *[]*model.FormDraft, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f formDraftDo) Attrs(attrs ...field.AssignExpr) IFormDraftDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f formDraftDo) Assign(attrs ...field.AssignExpr) IFormDraftDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f formDraftDo) Joins(fields ...field.RelationField) IFormDraftDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f formDraftDo) Preload(fields ...field.RelationField) IFormDraftDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f formDraftDo) FirstOrInit() (*model.FormDraft, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FormDraft), nil
	}
}

func (f formDraftDo) FirstOrCreate() (*model.FormDraft, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FormDraft), nil
	}
}

func (f formDraftDo) FindByPage(offset int, limit int) (result []*model.FormDraft, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f formDraftDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f formDraftDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f formDraftDo) Delete(models ...*model.FormDraft) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *formDraftDo) withDO(do gen.Dao) *formDraftDo {
	f.DO = *do.(*gen.DO)
	return f
}
