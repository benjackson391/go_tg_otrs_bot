// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newTicketStateType(db *gorm.DB, opts ...gen.DOOption) ticketStateType {
	_ticketStateType := ticketStateType{}

	_ticketStateType.ticketStateTypeDo.UseDB(db, opts...)
	_ticketStateType.ticketStateTypeDo.UseModel(&model.TicketStateType{})

	tableName := _ticketStateType.ticketStateTypeDo.TableName()
	_ticketStateType.ALL = field.NewAsterisk(tableName)
	_ticketStateType.ID = field.NewInt32(tableName, "id")
	_ticketStateType.Name = field.NewString(tableName, "name")
	_ticketStateType.Comments = field.NewString(tableName, "comments")
	_ticketStateType.CreateTime = field.NewTime(tableName, "create_time")
	_ticketStateType.CreateBy = field.NewInt32(tableName, "create_by")
	_ticketStateType.ChangeTime = field.NewTime(tableName, "change_time")
	_ticketStateType.ChangeBy = field.NewInt32(tableName, "change_by")

	_ticketStateType.fillFieldMap()

	return _ticketStateType
}

type ticketStateType struct {
	ticketStateTypeDo

	ALL        field.Asterisk
	ID         field.Int32
	Name       field.String
	Comments   field.String
	CreateTime field.Time
	CreateBy   field.Int32
	ChangeTime field.Time
	ChangeBy   field.Int32

	fieldMap map[string]field.Expr
}

func (t ticketStateType) Table(newTableName string) *ticketStateType {
	t.ticketStateTypeDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t ticketStateType) As(alias string) *ticketStateType {
	t.ticketStateTypeDo.DO = *(t.ticketStateTypeDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *ticketStateType) updateTableName(table string) *ticketStateType {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.Name = field.NewString(table, "name")
	t.Comments = field.NewString(table, "comments")
	t.CreateTime = field.NewTime(table, "create_time")
	t.CreateBy = field.NewInt32(table, "create_by")
	t.ChangeTime = field.NewTime(table, "change_time")
	t.ChangeBy = field.NewInt32(table, "change_by")

	t.fillFieldMap()

	return t
}

func (t *ticketStateType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *ticketStateType) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["comments"] = t.Comments
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["create_by"] = t.CreateBy
	t.fieldMap["change_time"] = t.ChangeTime
	t.fieldMap["change_by"] = t.ChangeBy
}

func (t ticketStateType) clone(db *gorm.DB) ticketStateType {
	t.ticketStateTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t ticketStateType) replaceDB(db *gorm.DB) ticketStateType {
	t.ticketStateTypeDo.ReplaceDB(db)
	return t
}

type ticketStateTypeDo struct{ gen.DO }

type ITicketStateTypeDo interface {
	gen.SubQuery
	Debug() ITicketStateTypeDo
	WithContext(ctx context.Context) ITicketStateTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITicketStateTypeDo
	WriteDB() ITicketStateTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITicketStateTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITicketStateTypeDo
	Not(conds ...gen.Condition) ITicketStateTypeDo
	Or(conds ...gen.Condition) ITicketStateTypeDo
	Select(conds ...field.Expr) ITicketStateTypeDo
	Where(conds ...gen.Condition) ITicketStateTypeDo
	Order(conds ...field.Expr) ITicketStateTypeDo
	Distinct(cols ...field.Expr) ITicketStateTypeDo
	Omit(cols ...field.Expr) ITicketStateTypeDo
	Join(table schema.Tabler, on ...field.Expr) ITicketStateTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITicketStateTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITicketStateTypeDo
	Group(cols ...field.Expr) ITicketStateTypeDo
	Having(conds ...gen.Condition) ITicketStateTypeDo
	Limit(limit int) ITicketStateTypeDo
	Offset(offset int) ITicketStateTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITicketStateTypeDo
	Unscoped() ITicketStateTypeDo
	Create(values ...*model.TicketStateType) error
	CreateInBatches(values []*model.TicketStateType, batchSize int) error
	Save(values ...*model.TicketStateType) error
	First() (*model.TicketStateType, error)
	Take() (*model.TicketStateType, error)
	Last() (*model.TicketStateType, error)
	Find() ([]*model.TicketStateType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TicketStateType, err error)
	FindInBatches(result *[]*model.TicketStateType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TicketStateType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITicketStateTypeDo
	Assign(attrs ...field.AssignExpr) ITicketStateTypeDo
	Joins(fields ...field.RelationField) ITicketStateTypeDo
	Preload(fields ...field.RelationField) ITicketStateTypeDo
	FirstOrInit() (*model.TicketStateType, error)
	FirstOrCreate() (*model.TicketStateType, error)
	FindByPage(offset int, limit int) (result []*model.TicketStateType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITicketStateTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t ticketStateTypeDo) Debug() ITicketStateTypeDo {
	return t.withDO(t.DO.Debug())
}

func (t ticketStateTypeDo) WithContext(ctx context.Context) ITicketStateTypeDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t ticketStateTypeDo) ReadDB() ITicketStateTypeDo {
	return t.Clauses(dbresolver.Read)
}

func (t ticketStateTypeDo) WriteDB() ITicketStateTypeDo {
	return t.Clauses(dbresolver.Write)
}

func (t ticketStateTypeDo) Session(config *gorm.Session) ITicketStateTypeDo {
	return t.withDO(t.DO.Session(config))
}

func (t ticketStateTypeDo) Clauses(conds ...clause.Expression) ITicketStateTypeDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t ticketStateTypeDo) Returning(value interface{}, columns ...string) ITicketStateTypeDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t ticketStateTypeDo) Not(conds ...gen.Condition) ITicketStateTypeDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t ticketStateTypeDo) Or(conds ...gen.Condition) ITicketStateTypeDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t ticketStateTypeDo) Select(conds ...field.Expr) ITicketStateTypeDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t ticketStateTypeDo) Where(conds ...gen.Condition) ITicketStateTypeDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t ticketStateTypeDo) Order(conds ...field.Expr) ITicketStateTypeDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t ticketStateTypeDo) Distinct(cols ...field.Expr) ITicketStateTypeDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t ticketStateTypeDo) Omit(cols ...field.Expr) ITicketStateTypeDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t ticketStateTypeDo) Join(table schema.Tabler, on ...field.Expr) ITicketStateTypeDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t ticketStateTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITicketStateTypeDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t ticketStateTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) ITicketStateTypeDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t ticketStateTypeDo) Group(cols ...field.Expr) ITicketStateTypeDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t ticketStateTypeDo) Having(conds ...gen.Condition) ITicketStateTypeDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t ticketStateTypeDo) Limit(limit int) ITicketStateTypeDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t ticketStateTypeDo) Offset(offset int) ITicketStateTypeDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t ticketStateTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITicketStateTypeDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t ticketStateTypeDo) Unscoped() ITicketStateTypeDo {
	return t.withDO(t.DO.Unscoped())
}

func (t ticketStateTypeDo) Create(values ...*model.TicketStateType) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t ticketStateTypeDo) CreateInBatches(values []*model.TicketStateType, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t ticketStateTypeDo) Save(values ...*model.TicketStateType) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t ticketStateTypeDo) First() (*model.TicketStateType, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketStateType), nil
	}
}

func (t ticketStateTypeDo) Take() (*model.TicketStateType, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketStateType), nil
	}
}

func (t ticketStateTypeDo) Last() (*model.TicketStateType, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketStateType), nil
	}
}

func (t ticketStateTypeDo) Find() ([]*model.TicketStateType, error) {
	result, err := t.DO.Find()
	return result.([]*model.TicketStateType), err
}

func (t ticketStateTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TicketStateType, err error) {
	buf := make([]*model.TicketStateType, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t ticketStateTypeDo) FindInBatches(result *[]*model.TicketStateType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t ticketStateTypeDo) Attrs(attrs ...field.AssignExpr) ITicketStateTypeDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t ticketStateTypeDo) Assign(attrs ...field.AssignExpr) ITicketStateTypeDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t ticketStateTypeDo) Joins(fields ...field.RelationField) ITicketStateTypeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t ticketStateTypeDo) Preload(fields ...field.RelationField) ITicketStateTypeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t ticketStateTypeDo) FirstOrInit() (*model.TicketStateType, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketStateType), nil
	}
}

func (t ticketStateTypeDo) FirstOrCreate() (*model.TicketStateType, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketStateType), nil
	}
}

func (t ticketStateTypeDo) FindByPage(offset int, limit int) (result []*model.TicketStateType, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t ticketStateTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t ticketStateTypeDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t ticketStateTypeDo) Delete(models ...*model.TicketStateType) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *ticketStateTypeDo) withDO(do gen.Dao) *ticketStateTypeDo {
	t.DO = *do.(*gen.DO)
	return t
}
