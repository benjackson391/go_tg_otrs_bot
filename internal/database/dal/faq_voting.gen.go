// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newFaqVoting(db *gorm.DB, opts ...gen.DOOption) faqVoting {
	_faqVoting := faqVoting{}

	_faqVoting.faqVotingDo.UseDB(db, opts...)
	_faqVoting.faqVotingDo.UseModel(&model.FaqVoting{})

	tableName := _faqVoting.faqVotingDo.TableName()
	_faqVoting.ALL = field.NewAsterisk(tableName)
	_faqVoting.ID = field.NewInt64(tableName, "id")
	_faqVoting.CreatedBy = field.NewString(tableName, "created_by")
	_faqVoting.ItemID = field.NewInt32(tableName, "item_id")
	_faqVoting.Interface = field.NewString(tableName, "interface")
	_faqVoting.IP = field.NewString(tableName, "ip")
	_faqVoting.Rate = field.NewInt32(tableName, "rate")
	_faqVoting.Created = field.NewTime(tableName, "created")

	_faqVoting.fillFieldMap()

	return _faqVoting
}

type faqVoting struct {
	faqVotingDo

	ALL       field.Asterisk
	ID        field.Int64
	CreatedBy field.String
	ItemID    field.Int32
	Interface field.String
	IP        field.String
	Rate      field.Int32
	Created   field.Time

	fieldMap map[string]field.Expr
}

func (f faqVoting) Table(newTableName string) *faqVoting {
	f.faqVotingDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f faqVoting) As(alias string) *faqVoting {
	f.faqVotingDo.DO = *(f.faqVotingDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *faqVoting) updateTableName(table string) *faqVoting {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.CreatedBy = field.NewString(table, "created_by")
	f.ItemID = field.NewInt32(table, "item_id")
	f.Interface = field.NewString(table, "interface")
	f.IP = field.NewString(table, "ip")
	f.Rate = field.NewInt32(table, "rate")
	f.Created = field.NewTime(table, "created")

	f.fillFieldMap()

	return f
}

func (f *faqVoting) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *faqVoting) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 7)
	f.fieldMap["id"] = f.ID
	f.fieldMap["created_by"] = f.CreatedBy
	f.fieldMap["item_id"] = f.ItemID
	f.fieldMap["interface"] = f.Interface
	f.fieldMap["ip"] = f.IP
	f.fieldMap["rate"] = f.Rate
	f.fieldMap["created"] = f.Created
}

func (f faqVoting) clone(db *gorm.DB) faqVoting {
	f.faqVotingDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f faqVoting) replaceDB(db *gorm.DB) faqVoting {
	f.faqVotingDo.ReplaceDB(db)
	return f
}

type faqVotingDo struct{ gen.DO }

type IFaqVotingDo interface {
	gen.SubQuery
	Debug() IFaqVotingDo
	WithContext(ctx context.Context) IFaqVotingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFaqVotingDo
	WriteDB() IFaqVotingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFaqVotingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFaqVotingDo
	Not(conds ...gen.Condition) IFaqVotingDo
	Or(conds ...gen.Condition) IFaqVotingDo
	Select(conds ...field.Expr) IFaqVotingDo
	Where(conds ...gen.Condition) IFaqVotingDo
	Order(conds ...field.Expr) IFaqVotingDo
	Distinct(cols ...field.Expr) IFaqVotingDo
	Omit(cols ...field.Expr) IFaqVotingDo
	Join(table schema.Tabler, on ...field.Expr) IFaqVotingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFaqVotingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFaqVotingDo
	Group(cols ...field.Expr) IFaqVotingDo
	Having(conds ...gen.Condition) IFaqVotingDo
	Limit(limit int) IFaqVotingDo
	Offset(offset int) IFaqVotingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFaqVotingDo
	Unscoped() IFaqVotingDo
	Create(values ...*model.FaqVoting) error
	CreateInBatches(values []*model.FaqVoting, batchSize int) error
	Save(values ...*model.FaqVoting) error
	First() (*model.FaqVoting, error)
	Take() (*model.FaqVoting, error)
	Last() (*model.FaqVoting, error)
	Find() ([]*model.FaqVoting, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FaqVoting, err error)
	FindInBatches(result *[]*model.FaqVoting, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FaqVoting) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFaqVotingDo
	Assign(attrs ...field.AssignExpr) IFaqVotingDo
	Joins(fields ...field.RelationField) IFaqVotingDo
	Preload(fields ...field.RelationField) IFaqVotingDo
	FirstOrInit() (*model.FaqVoting, error)
	FirstOrCreate() (*model.FaqVoting, error)
	FindByPage(offset int, limit int) (result []*model.FaqVoting, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFaqVotingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f faqVotingDo) Debug() IFaqVotingDo {
	return f.withDO(f.DO.Debug())
}

func (f faqVotingDo) WithContext(ctx context.Context) IFaqVotingDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f faqVotingDo) ReadDB() IFaqVotingDo {
	return f.Clauses(dbresolver.Read)
}

func (f faqVotingDo) WriteDB() IFaqVotingDo {
	return f.Clauses(dbresolver.Write)
}

func (f faqVotingDo) Session(config *gorm.Session) IFaqVotingDo {
	return f.withDO(f.DO.Session(config))
}

func (f faqVotingDo) Clauses(conds ...clause.Expression) IFaqVotingDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f faqVotingDo) Returning(value interface{}, columns ...string) IFaqVotingDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f faqVotingDo) Not(conds ...gen.Condition) IFaqVotingDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f faqVotingDo) Or(conds ...gen.Condition) IFaqVotingDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f faqVotingDo) Select(conds ...field.Expr) IFaqVotingDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f faqVotingDo) Where(conds ...gen.Condition) IFaqVotingDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f faqVotingDo) Order(conds ...field.Expr) IFaqVotingDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f faqVotingDo) Distinct(cols ...field.Expr) IFaqVotingDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f faqVotingDo) Omit(cols ...field.Expr) IFaqVotingDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f faqVotingDo) Join(table schema.Tabler, on ...field.Expr) IFaqVotingDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f faqVotingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFaqVotingDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f faqVotingDo) RightJoin(table schema.Tabler, on ...field.Expr) IFaqVotingDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f faqVotingDo) Group(cols ...field.Expr) IFaqVotingDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f faqVotingDo) Having(conds ...gen.Condition) IFaqVotingDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f faqVotingDo) Limit(limit int) IFaqVotingDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f faqVotingDo) Offset(offset int) IFaqVotingDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f faqVotingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFaqVotingDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f faqVotingDo) Unscoped() IFaqVotingDo {
	return f.withDO(f.DO.Unscoped())
}

func (f faqVotingDo) Create(values ...*model.FaqVoting) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f faqVotingDo) CreateInBatches(values []*model.FaqVoting, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f faqVotingDo) Save(values ...*model.FaqVoting) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f faqVotingDo) First() (*model.FaqVoting, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqVoting), nil
	}
}

func (f faqVotingDo) Take() (*model.FaqVoting, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqVoting), nil
	}
}

func (f faqVotingDo) Last() (*model.FaqVoting, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqVoting), nil
	}
}

func (f faqVotingDo) Find() ([]*model.FaqVoting, error) {
	result, err := f.DO.Find()
	return result.([]*model.FaqVoting), err
}

func (f faqVotingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FaqVoting, err error) {
	buf := make([]*model.FaqVoting, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f faqVotingDo) FindInBatches(result *[]*model.FaqVoting, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f faqVotingDo) Attrs(attrs ...field.AssignExpr) IFaqVotingDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f faqVotingDo) Assign(attrs ...field.AssignExpr) IFaqVotingDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f faqVotingDo) Joins(fields ...field.RelationField) IFaqVotingDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f faqVotingDo) Preload(fields ...field.RelationField) IFaqVotingDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f faqVotingDo) FirstOrInit() (*model.FaqVoting, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqVoting), nil
	}
}

func (f faqVotingDo) FirstOrCreate() (*model.FaqVoting, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqVoting), nil
	}
}

func (f faqVotingDo) FindByPage(offset int, limit int) (result []*model.FaqVoting, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f faqVotingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f faqVotingDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f faqVotingDo) Delete(models ...*model.FaqVoting) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *faqVotingDo) withDO(do gen.Dao) *faqVotingDo {
	f.DO = *do.(*gen.DO)
	return f
}
