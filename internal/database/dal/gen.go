// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                           = new(Query)
	Acl                         *acl
	AclSync                     *aclSync
	Article                     *article
	ArticleDataMime             *articleDataMime
	ArticleDataMimeAttachment   *articleDataMimeAttachment
	ArticleDataMimePlain        *articleDataMimePlain
	ArticleDataMimeSendError    *articleDataMimeSendError
	ArticleDataOtrsChat         *articleDataOtrsChat
	ArticleFlag                 *articleFlag
	ArticleSearchIndex          *articleSearchIndex
	ArticleSenderType           *articleSenderType
	AutoResponse                *autoResponse
	AutoResponseType            *autoResponseType
	Calendar                    *calendar
	CalendarAppointment         *calendarAppointment
	CalendarAppointmentTicket   *calendarAppointmentTicket
	CloudServiceConfig          *cloudServiceConfig
	CommunicationChannel        *communicationChannel
	CommunicationLog            *communicationLog
	CommunicationLogObjLookup   *communicationLogObjLookup
	CommunicationLogObject      *communicationLogObject
	CommunicationLogObjectEntry *communicationLogObjectEntry
	CustomerCompany             *customerCompany
	CustomerPreference          *customerPreference
	CustomerUser                *customerUser
	CustomerUserCustomer        *customerUserCustomer
	DynamicField                *dynamicField
	DynamicFieldObjIDName       *dynamicFieldObjIDName
	DynamicFieldValue           *dynamicFieldValue
	FaqAttachment               *faqAttachment
	FaqCategory                 *faqCategory
	FaqCategoryGroup            *faqCategoryGroup
	FaqHistory                  *faqHistory
	FaqItem                     *faqItem
	FaqLanguage                 *faqLanguage
	FaqLog                      *faqLog
	FaqState                    *faqState
	FaqStateType                *faqStateType
	FaqVoting                   *faqVoting
	FilterTemplate              *filterTemplate
	FollowUpPossible            *followUpPossible
	FormDraft                   *formDraft
	GenericAgentJob             *genericAgentJob
	GiDebuggerEntry             *giDebuggerEntry
	GiDebuggerEntryContent      *giDebuggerEntryContent
	GiWebserviceConfig          *giWebserviceConfig
	GiWebserviceConfigHistory   *giWebserviceConfigHistory
	Group                       *group
	GroupCustomer               *groupCustomer
	GroupCustomerUser           *groupCustomerUser
	GroupRole                   *groupRole
	GroupUser                   *groupUser
	LinkObject                  *linkObject
	LinkRelation                *linkRelation
	LinkState                   *linkState
	LinkType                    *linkType
	MailAccount                 *mailAccount
	MailQueue                   *mailQueue
	NotificationEvent           *notificationEvent
	NotificationEventItem       *notificationEventItem
	NotificationEventMessage    *notificationEventMessage
	Orgstructure                *orgstructure
	PackageRepository           *packageRepository
	PersonalQueue               *personalQueue
	PersonalService             *personalService
	PmActivity                  *pmActivity
	PmActivityDialog            *pmActivityDialog
	PmEntitySync                *pmEntitySync
	PmProcess                   *pmProcess
	PmTransition                *pmTransition
	PmTransitionAction          *pmTransitionAction
	PostmasterFilter            *postmasterFilter
	ProcessID                   *processID
	Queue                       *queue
	QueueAutoResponse           *queueAutoResponse
	QueuePreference             *queuePreference
	QueueStandardTemplate       *queueStandardTemplate
	Role                        *role
	RoleUser                    *roleUser
	SLA                         *sLA
	SLAPreference               *sLAPreference
	Salutation                  *salutation
	SchedulerFutureTask         *schedulerFutureTask
	SchedulerRecurrentTask      *schedulerRecurrentTask
	SchedulerTask               *schedulerTask
	SearchProfile               *searchProfile
	Service                     *service
	ServiceCustomerUser         *serviceCustomerUser
	ServicePreference           *servicePreference
	ServiceSLA                  *serviceSLA
	Session                     *session
	Signature                   *signature
	SmimeSignerCertRelation     *smimeSignerCertRelation
	StandardAttachment          *standardAttachment
	StandardTemplate            *standardTemplate
	StandardTemplateAttachment  *standardTemplateAttachment
	Survey                      *survey
	SurveyAnswer                *surveyAnswer
	SurveyQuestion              *surveyQuestion
	SurveyQueue                 *surveyQueue
	SurveyRequest               *surveyRequest
	SurveyVote                  *surveyVote
	SysconfigDefault            *sysconfigDefault
	SysconfigDefaultVersion     *sysconfigDefaultVersion
	SysconfigDeployment         *sysconfigDeployment
	SysconfigDeploymentLock     *sysconfigDeploymentLock
	SysconfigModified           *sysconfigModified
	SysconfigModifiedVersion    *sysconfigModifiedVersion
	SystemAddress               *systemAddress
	SystemDatum                 *systemDatum
	SystemMaintenance           *systemMaintenance
	TgTicket                    *tgTicket
	TgUser                      *tgUser
	Ticket                      *ticket
	TicketFlag                  *ticketFlag
	TicketHistory               *ticketHistory
	TicketHistoryType           *ticketHistoryType
	TicketIndex                 *ticketIndex
	TicketLockIndex             *ticketLockIndex
	TicketLockType              *ticketLockType
	TicketLoopProtection        *ticketLoopProtection
	TicketNumberCounter         *ticketNumberCounter
	TicketPriority              *ticketPriority
	TicketState                 *ticketState
	TicketStateType             *ticketStateType
	TicketType                  *ticketType
	TicketWatcher               *ticketWatcher
	TimeAccounting              *timeAccounting
	User                        *user
	UserPreference              *userPreference
	Valid                       *valid
	VirtualF                    *virtualF
	VirtualFsDb                 *virtualFsDb
	VirtualFsPreference         *virtualFsPreference
	WebUploadCache              *webUploadCache
	XMLStorage                  *xMLStorage
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Acl = &Q.Acl
	AclSync = &Q.AclSync
	Article = &Q.Article
	ArticleDataMime = &Q.ArticleDataMime
	ArticleDataMimeAttachment = &Q.ArticleDataMimeAttachment
	ArticleDataMimePlain = &Q.ArticleDataMimePlain
	ArticleDataMimeSendError = &Q.ArticleDataMimeSendError
	ArticleDataOtrsChat = &Q.ArticleDataOtrsChat
	ArticleFlag = &Q.ArticleFlag
	ArticleSearchIndex = &Q.ArticleSearchIndex
	ArticleSenderType = &Q.ArticleSenderType
	AutoResponse = &Q.AutoResponse
	AutoResponseType = &Q.AutoResponseType
	Calendar = &Q.Calendar
	CalendarAppointment = &Q.CalendarAppointment
	CalendarAppointmentTicket = &Q.CalendarAppointmentTicket
	CloudServiceConfig = &Q.CloudServiceConfig
	CommunicationChannel = &Q.CommunicationChannel
	CommunicationLog = &Q.CommunicationLog
	CommunicationLogObjLookup = &Q.CommunicationLogObjLookup
	CommunicationLogObject = &Q.CommunicationLogObject
	CommunicationLogObjectEntry = &Q.CommunicationLogObjectEntry
	CustomerCompany = &Q.CustomerCompany
	CustomerPreference = &Q.CustomerPreference
	CustomerUser = &Q.CustomerUser
	CustomerUserCustomer = &Q.CustomerUserCustomer
	DynamicField = &Q.DynamicField
	DynamicFieldObjIDName = &Q.DynamicFieldObjIDName
	DynamicFieldValue = &Q.DynamicFieldValue
	FaqAttachment = &Q.FaqAttachment
	FaqCategory = &Q.FaqCategory
	FaqCategoryGroup = &Q.FaqCategoryGroup
	FaqHistory = &Q.FaqHistory
	FaqItem = &Q.FaqItem
	FaqLanguage = &Q.FaqLanguage
	FaqLog = &Q.FaqLog
	FaqState = &Q.FaqState
	FaqStateType = &Q.FaqStateType
	FaqVoting = &Q.FaqVoting
	FilterTemplate = &Q.FilterTemplate
	FollowUpPossible = &Q.FollowUpPossible
	FormDraft = &Q.FormDraft
	GenericAgentJob = &Q.GenericAgentJob
	GiDebuggerEntry = &Q.GiDebuggerEntry
	GiDebuggerEntryContent = &Q.GiDebuggerEntryContent
	GiWebserviceConfig = &Q.GiWebserviceConfig
	GiWebserviceConfigHistory = &Q.GiWebserviceConfigHistory
	Group = &Q.Group
	GroupCustomer = &Q.GroupCustomer
	GroupCustomerUser = &Q.GroupCustomerUser
	GroupRole = &Q.GroupRole
	GroupUser = &Q.GroupUser
	LinkObject = &Q.LinkObject
	LinkRelation = &Q.LinkRelation
	LinkState = &Q.LinkState
	LinkType = &Q.LinkType
	MailAccount = &Q.MailAccount
	MailQueue = &Q.MailQueue
	NotificationEvent = &Q.NotificationEvent
	NotificationEventItem = &Q.NotificationEventItem
	NotificationEventMessage = &Q.NotificationEventMessage
	Orgstructure = &Q.Orgstructure
	PackageRepository = &Q.PackageRepository
	PersonalQueue = &Q.PersonalQueue
	PersonalService = &Q.PersonalService
	PmActivity = &Q.PmActivity
	PmActivityDialog = &Q.PmActivityDialog
	PmEntitySync = &Q.PmEntitySync
	PmProcess = &Q.PmProcess
	PmTransition = &Q.PmTransition
	PmTransitionAction = &Q.PmTransitionAction
	PostmasterFilter = &Q.PostmasterFilter
	ProcessID = &Q.ProcessID
	Queue = &Q.Queue
	QueueAutoResponse = &Q.QueueAutoResponse
	QueuePreference = &Q.QueuePreference
	QueueStandardTemplate = &Q.QueueStandardTemplate
	Role = &Q.Role
	RoleUser = &Q.RoleUser
	SLA = &Q.SLA
	SLAPreference = &Q.SLAPreference
	Salutation = &Q.Salutation
	SchedulerFutureTask = &Q.SchedulerFutureTask
	SchedulerRecurrentTask = &Q.SchedulerRecurrentTask
	SchedulerTask = &Q.SchedulerTask
	SearchProfile = &Q.SearchProfile
	Service = &Q.Service
	ServiceCustomerUser = &Q.ServiceCustomerUser
	ServicePreference = &Q.ServicePreference
	ServiceSLA = &Q.ServiceSLA
	Session = &Q.Session
	Signature = &Q.Signature
	SmimeSignerCertRelation = &Q.SmimeSignerCertRelation
	StandardAttachment = &Q.StandardAttachment
	StandardTemplate = &Q.StandardTemplate
	StandardTemplateAttachment = &Q.StandardTemplateAttachment
	Survey = &Q.Survey
	SurveyAnswer = &Q.SurveyAnswer
	SurveyQuestion = &Q.SurveyQuestion
	SurveyQueue = &Q.SurveyQueue
	SurveyRequest = &Q.SurveyRequest
	SurveyVote = &Q.SurveyVote
	SysconfigDefault = &Q.SysconfigDefault
	SysconfigDefaultVersion = &Q.SysconfigDefaultVersion
	SysconfigDeployment = &Q.SysconfigDeployment
	SysconfigDeploymentLock = &Q.SysconfigDeploymentLock
	SysconfigModified = &Q.SysconfigModified
	SysconfigModifiedVersion = &Q.SysconfigModifiedVersion
	SystemAddress = &Q.SystemAddress
	SystemDatum = &Q.SystemDatum
	SystemMaintenance = &Q.SystemMaintenance
	TgTicket = &Q.TgTicket
	TgUser = &Q.TgUser
	Ticket = &Q.Ticket
	TicketFlag = &Q.TicketFlag
	TicketHistory = &Q.TicketHistory
	TicketHistoryType = &Q.TicketHistoryType
	TicketIndex = &Q.TicketIndex
	TicketLockIndex = &Q.TicketLockIndex
	TicketLockType = &Q.TicketLockType
	TicketLoopProtection = &Q.TicketLoopProtection
	TicketNumberCounter = &Q.TicketNumberCounter
	TicketPriority = &Q.TicketPriority
	TicketState = &Q.TicketState
	TicketStateType = &Q.TicketStateType
	TicketType = &Q.TicketType
	TicketWatcher = &Q.TicketWatcher
	TimeAccounting = &Q.TimeAccounting
	User = &Q.User
	UserPreference = &Q.UserPreference
	Valid = &Q.Valid
	VirtualF = &Q.VirtualF
	VirtualFsDb = &Q.VirtualFsDb
	VirtualFsPreference = &Q.VirtualFsPreference
	WebUploadCache = &Q.WebUploadCache
	XMLStorage = &Q.XMLStorage
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                          db,
		Acl:                         newAcl(db, opts...),
		AclSync:                     newAclSync(db, opts...),
		Article:                     newArticle(db, opts...),
		ArticleDataMime:             newArticleDataMime(db, opts...),
		ArticleDataMimeAttachment:   newArticleDataMimeAttachment(db, opts...),
		ArticleDataMimePlain:        newArticleDataMimePlain(db, opts...),
		ArticleDataMimeSendError:    newArticleDataMimeSendError(db, opts...),
		ArticleDataOtrsChat:         newArticleDataOtrsChat(db, opts...),
		ArticleFlag:                 newArticleFlag(db, opts...),
		ArticleSearchIndex:          newArticleSearchIndex(db, opts...),
		ArticleSenderType:           newArticleSenderType(db, opts...),
		AutoResponse:                newAutoResponse(db, opts...),
		AutoResponseType:            newAutoResponseType(db, opts...),
		Calendar:                    newCalendar(db, opts...),
		CalendarAppointment:         newCalendarAppointment(db, opts...),
		CalendarAppointmentTicket:   newCalendarAppointmentTicket(db, opts...),
		CloudServiceConfig:          newCloudServiceConfig(db, opts...),
		CommunicationChannel:        newCommunicationChannel(db, opts...),
		CommunicationLog:            newCommunicationLog(db, opts...),
		CommunicationLogObjLookup:   newCommunicationLogObjLookup(db, opts...),
		CommunicationLogObject:      newCommunicationLogObject(db, opts...),
		CommunicationLogObjectEntry: newCommunicationLogObjectEntry(db, opts...),
		CustomerCompany:             newCustomerCompany(db, opts...),
		CustomerPreference:          newCustomerPreference(db, opts...),
		CustomerUser:                newCustomerUser(db, opts...),
		CustomerUserCustomer:        newCustomerUserCustomer(db, opts...),
		DynamicField:                newDynamicField(db, opts...),
		DynamicFieldObjIDName:       newDynamicFieldObjIDName(db, opts...),
		DynamicFieldValue:           newDynamicFieldValue(db, opts...),
		FaqAttachment:               newFaqAttachment(db, opts...),
		FaqCategory:                 newFaqCategory(db, opts...),
		FaqCategoryGroup:            newFaqCategoryGroup(db, opts...),
		FaqHistory:                  newFaqHistory(db, opts...),
		FaqItem:                     newFaqItem(db, opts...),
		FaqLanguage:                 newFaqLanguage(db, opts...),
		FaqLog:                      newFaqLog(db, opts...),
		FaqState:                    newFaqState(db, opts...),
		FaqStateType:                newFaqStateType(db, opts...),
		FaqVoting:                   newFaqVoting(db, opts...),
		FilterTemplate:              newFilterTemplate(db, opts...),
		FollowUpPossible:            newFollowUpPossible(db, opts...),
		FormDraft:                   newFormDraft(db, opts...),
		GenericAgentJob:             newGenericAgentJob(db, opts...),
		GiDebuggerEntry:             newGiDebuggerEntry(db, opts...),
		GiDebuggerEntryContent:      newGiDebuggerEntryContent(db, opts...),
		GiWebserviceConfig:          newGiWebserviceConfig(db, opts...),
		GiWebserviceConfigHistory:   newGiWebserviceConfigHistory(db, opts...),
		Group:                       newGroup(db, opts...),
		GroupCustomer:               newGroupCustomer(db, opts...),
		GroupCustomerUser:           newGroupCustomerUser(db, opts...),
		GroupRole:                   newGroupRole(db, opts...),
		GroupUser:                   newGroupUser(db, opts...),
		LinkObject:                  newLinkObject(db, opts...),
		LinkRelation:                newLinkRelation(db, opts...),
		LinkState:                   newLinkState(db, opts...),
		LinkType:                    newLinkType(db, opts...),
		MailAccount:                 newMailAccount(db, opts...),
		MailQueue:                   newMailQueue(db, opts...),
		NotificationEvent:           newNotificationEvent(db, opts...),
		NotificationEventItem:       newNotificationEventItem(db, opts...),
		NotificationEventMessage:    newNotificationEventMessage(db, opts...),
		Orgstructure:                newOrgstructure(db, opts...),
		PackageRepository:           newPackageRepository(db, opts...),
		PersonalQueue:               newPersonalQueue(db, opts...),
		PersonalService:             newPersonalService(db, opts...),
		PmActivity:                  newPmActivity(db, opts...),
		PmActivityDialog:            newPmActivityDialog(db, opts...),
		PmEntitySync:                newPmEntitySync(db, opts...),
		PmProcess:                   newPmProcess(db, opts...),
		PmTransition:                newPmTransition(db, opts...),
		PmTransitionAction:          newPmTransitionAction(db, opts...),
		PostmasterFilter:            newPostmasterFilter(db, opts...),
		ProcessID:                   newProcessID(db, opts...),
		Queue:                       newQueue(db, opts...),
		QueueAutoResponse:           newQueueAutoResponse(db, opts...),
		QueuePreference:             newQueuePreference(db, opts...),
		QueueStandardTemplate:       newQueueStandardTemplate(db, opts...),
		Role:                        newRole(db, opts...),
		RoleUser:                    newRoleUser(db, opts...),
		SLA:                         newSLA(db, opts...),
		SLAPreference:               newSLAPreference(db, opts...),
		Salutation:                  newSalutation(db, opts...),
		SchedulerFutureTask:         newSchedulerFutureTask(db, opts...),
		SchedulerRecurrentTask:      newSchedulerRecurrentTask(db, opts...),
		SchedulerTask:               newSchedulerTask(db, opts...),
		SearchProfile:               newSearchProfile(db, opts...),
		Service:                     newService(db, opts...),
		ServiceCustomerUser:         newServiceCustomerUser(db, opts...),
		ServicePreference:           newServicePreference(db, opts...),
		ServiceSLA:                  newServiceSLA(db, opts...),
		Session:                     newSession(db, opts...),
		Signature:                   newSignature(db, opts...),
		SmimeSignerCertRelation:     newSmimeSignerCertRelation(db, opts...),
		StandardAttachment:          newStandardAttachment(db, opts...),
		StandardTemplate:            newStandardTemplate(db, opts...),
		StandardTemplateAttachment:  newStandardTemplateAttachment(db, opts...),
		Survey:                      newSurvey(db, opts...),
		SurveyAnswer:                newSurveyAnswer(db, opts...),
		SurveyQuestion:              newSurveyQuestion(db, opts...),
		SurveyQueue:                 newSurveyQueue(db, opts...),
		SurveyRequest:               newSurveyRequest(db, opts...),
		SurveyVote:                  newSurveyVote(db, opts...),
		SysconfigDefault:            newSysconfigDefault(db, opts...),
		SysconfigDefaultVersion:     newSysconfigDefaultVersion(db, opts...),
		SysconfigDeployment:         newSysconfigDeployment(db, opts...),
		SysconfigDeploymentLock:     newSysconfigDeploymentLock(db, opts...),
		SysconfigModified:           newSysconfigModified(db, opts...),
		SysconfigModifiedVersion:    newSysconfigModifiedVersion(db, opts...),
		SystemAddress:               newSystemAddress(db, opts...),
		SystemDatum:                 newSystemDatum(db, opts...),
		SystemMaintenance:           newSystemMaintenance(db, opts...),
		TgTicket:                    newTgTicket(db, opts...),
		TgUser:                      newTgUser(db, opts...),
		Ticket:                      newTicket(db, opts...),
		TicketFlag:                  newTicketFlag(db, opts...),
		TicketHistory:               newTicketHistory(db, opts...),
		TicketHistoryType:           newTicketHistoryType(db, opts...),
		TicketIndex:                 newTicketIndex(db, opts...),
		TicketLockIndex:             newTicketLockIndex(db, opts...),
		TicketLockType:              newTicketLockType(db, opts...),
		TicketLoopProtection:        newTicketLoopProtection(db, opts...),
		TicketNumberCounter:         newTicketNumberCounter(db, opts...),
		TicketPriority:              newTicketPriority(db, opts...),
		TicketState:                 newTicketState(db, opts...),
		TicketStateType:             newTicketStateType(db, opts...),
		TicketType:                  newTicketType(db, opts...),
		TicketWatcher:               newTicketWatcher(db, opts...),
		TimeAccounting:              newTimeAccounting(db, opts...),
		User:                        newUser(db, opts...),
		UserPreference:              newUserPreference(db, opts...),
		Valid:                       newValid(db, opts...),
		VirtualF:                    newVirtualF(db, opts...),
		VirtualFsDb:                 newVirtualFsDb(db, opts...),
		VirtualFsPreference:         newVirtualFsPreference(db, opts...),
		WebUploadCache:              newWebUploadCache(db, opts...),
		XMLStorage:                  newXMLStorage(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Acl                         acl
	AclSync                     aclSync
	Article                     article
	ArticleDataMime             articleDataMime
	ArticleDataMimeAttachment   articleDataMimeAttachment
	ArticleDataMimePlain        articleDataMimePlain
	ArticleDataMimeSendError    articleDataMimeSendError
	ArticleDataOtrsChat         articleDataOtrsChat
	ArticleFlag                 articleFlag
	ArticleSearchIndex          articleSearchIndex
	ArticleSenderType           articleSenderType
	AutoResponse                autoResponse
	AutoResponseType            autoResponseType
	Calendar                    calendar
	CalendarAppointment         calendarAppointment
	CalendarAppointmentTicket   calendarAppointmentTicket
	CloudServiceConfig          cloudServiceConfig
	CommunicationChannel        communicationChannel
	CommunicationLog            communicationLog
	CommunicationLogObjLookup   communicationLogObjLookup
	CommunicationLogObject      communicationLogObject
	CommunicationLogObjectEntry communicationLogObjectEntry
	CustomerCompany             customerCompany
	CustomerPreference          customerPreference
	CustomerUser                customerUser
	CustomerUserCustomer        customerUserCustomer
	DynamicField                dynamicField
	DynamicFieldObjIDName       dynamicFieldObjIDName
	DynamicFieldValue           dynamicFieldValue
	FaqAttachment               faqAttachment
	FaqCategory                 faqCategory
	FaqCategoryGroup            faqCategoryGroup
	FaqHistory                  faqHistory
	FaqItem                     faqItem
	FaqLanguage                 faqLanguage
	FaqLog                      faqLog
	FaqState                    faqState
	FaqStateType                faqStateType
	FaqVoting                   faqVoting
	FilterTemplate              filterTemplate
	FollowUpPossible            followUpPossible
	FormDraft                   formDraft
	GenericAgentJob             genericAgentJob
	GiDebuggerEntry             giDebuggerEntry
	GiDebuggerEntryContent      giDebuggerEntryContent
	GiWebserviceConfig          giWebserviceConfig
	GiWebserviceConfigHistory   giWebserviceConfigHistory
	Group                       group
	GroupCustomer               groupCustomer
	GroupCustomerUser           groupCustomerUser
	GroupRole                   groupRole
	GroupUser                   groupUser
	LinkObject                  linkObject
	LinkRelation                linkRelation
	LinkState                   linkState
	LinkType                    linkType
	MailAccount                 mailAccount
	MailQueue                   mailQueue
	NotificationEvent           notificationEvent
	NotificationEventItem       notificationEventItem
	NotificationEventMessage    notificationEventMessage
	Orgstructure                orgstructure
	PackageRepository           packageRepository
	PersonalQueue               personalQueue
	PersonalService             personalService
	PmActivity                  pmActivity
	PmActivityDialog            pmActivityDialog
	PmEntitySync                pmEntitySync
	PmProcess                   pmProcess
	PmTransition                pmTransition
	PmTransitionAction          pmTransitionAction
	PostmasterFilter            postmasterFilter
	ProcessID                   processID
	Queue                       queue
	QueueAutoResponse           queueAutoResponse
	QueuePreference             queuePreference
	QueueStandardTemplate       queueStandardTemplate
	Role                        role
	RoleUser                    roleUser
	SLA                         sLA
	SLAPreference               sLAPreference
	Salutation                  salutation
	SchedulerFutureTask         schedulerFutureTask
	SchedulerRecurrentTask      schedulerRecurrentTask
	SchedulerTask               schedulerTask
	SearchProfile               searchProfile
	Service                     service
	ServiceCustomerUser         serviceCustomerUser
	ServicePreference           servicePreference
	ServiceSLA                  serviceSLA
	Session                     session
	Signature                   signature
	SmimeSignerCertRelation     smimeSignerCertRelation
	StandardAttachment          standardAttachment
	StandardTemplate            standardTemplate
	StandardTemplateAttachment  standardTemplateAttachment
	Survey                      survey
	SurveyAnswer                surveyAnswer
	SurveyQuestion              surveyQuestion
	SurveyQueue                 surveyQueue
	SurveyRequest               surveyRequest
	SurveyVote                  surveyVote
	SysconfigDefault            sysconfigDefault
	SysconfigDefaultVersion     sysconfigDefaultVersion
	SysconfigDeployment         sysconfigDeployment
	SysconfigDeploymentLock     sysconfigDeploymentLock
	SysconfigModified           sysconfigModified
	SysconfigModifiedVersion    sysconfigModifiedVersion
	SystemAddress               systemAddress
	SystemDatum                 systemDatum
	SystemMaintenance           systemMaintenance
	TgTicket                    tgTicket
	TgUser                      tgUser
	Ticket                      ticket
	TicketFlag                  ticketFlag
	TicketHistory               ticketHistory
	TicketHistoryType           ticketHistoryType
	TicketIndex                 ticketIndex
	TicketLockIndex             ticketLockIndex
	TicketLockType              ticketLockType
	TicketLoopProtection        ticketLoopProtection
	TicketNumberCounter         ticketNumberCounter
	TicketPriority              ticketPriority
	TicketState                 ticketState
	TicketStateType             ticketStateType
	TicketType                  ticketType
	TicketWatcher               ticketWatcher
	TimeAccounting              timeAccounting
	User                        user
	UserPreference              userPreference
	Valid                       valid
	VirtualF                    virtualF
	VirtualFsDb                 virtualFsDb
	VirtualFsPreference         virtualFsPreference
	WebUploadCache              webUploadCache
	XMLStorage                  xMLStorage
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                          db,
		Acl:                         q.Acl.clone(db),
		AclSync:                     q.AclSync.clone(db),
		Article:                     q.Article.clone(db),
		ArticleDataMime:             q.ArticleDataMime.clone(db),
		ArticleDataMimeAttachment:   q.ArticleDataMimeAttachment.clone(db),
		ArticleDataMimePlain:        q.ArticleDataMimePlain.clone(db),
		ArticleDataMimeSendError:    q.ArticleDataMimeSendError.clone(db),
		ArticleDataOtrsChat:         q.ArticleDataOtrsChat.clone(db),
		ArticleFlag:                 q.ArticleFlag.clone(db),
		ArticleSearchIndex:          q.ArticleSearchIndex.clone(db),
		ArticleSenderType:           q.ArticleSenderType.clone(db),
		AutoResponse:                q.AutoResponse.clone(db),
		AutoResponseType:            q.AutoResponseType.clone(db),
		Calendar:                    q.Calendar.clone(db),
		CalendarAppointment:         q.CalendarAppointment.clone(db),
		CalendarAppointmentTicket:   q.CalendarAppointmentTicket.clone(db),
		CloudServiceConfig:          q.CloudServiceConfig.clone(db),
		CommunicationChannel:        q.CommunicationChannel.clone(db),
		CommunicationLog:            q.CommunicationLog.clone(db),
		CommunicationLogObjLookup:   q.CommunicationLogObjLookup.clone(db),
		CommunicationLogObject:      q.CommunicationLogObject.clone(db),
		CommunicationLogObjectEntry: q.CommunicationLogObjectEntry.clone(db),
		CustomerCompany:             q.CustomerCompany.clone(db),
		CustomerPreference:          q.CustomerPreference.clone(db),
		CustomerUser:                q.CustomerUser.clone(db),
		CustomerUserCustomer:        q.CustomerUserCustomer.clone(db),
		DynamicField:                q.DynamicField.clone(db),
		DynamicFieldObjIDName:       q.DynamicFieldObjIDName.clone(db),
		DynamicFieldValue:           q.DynamicFieldValue.clone(db),
		FaqAttachment:               q.FaqAttachment.clone(db),
		FaqCategory:                 q.FaqCategory.clone(db),
		FaqCategoryGroup:            q.FaqCategoryGroup.clone(db),
		FaqHistory:                  q.FaqHistory.clone(db),
		FaqItem:                     q.FaqItem.clone(db),
		FaqLanguage:                 q.FaqLanguage.clone(db),
		FaqLog:                      q.FaqLog.clone(db),
		FaqState:                    q.FaqState.clone(db),
		FaqStateType:                q.FaqStateType.clone(db),
		FaqVoting:                   q.FaqVoting.clone(db),
		FilterTemplate:              q.FilterTemplate.clone(db),
		FollowUpPossible:            q.FollowUpPossible.clone(db),
		FormDraft:                   q.FormDraft.clone(db),
		GenericAgentJob:             q.GenericAgentJob.clone(db),
		GiDebuggerEntry:             q.GiDebuggerEntry.clone(db),
		GiDebuggerEntryContent:      q.GiDebuggerEntryContent.clone(db),
		GiWebserviceConfig:          q.GiWebserviceConfig.clone(db),
		GiWebserviceConfigHistory:   q.GiWebserviceConfigHistory.clone(db),
		Group:                       q.Group.clone(db),
		GroupCustomer:               q.GroupCustomer.clone(db),
		GroupCustomerUser:           q.GroupCustomerUser.clone(db),
		GroupRole:                   q.GroupRole.clone(db),
		GroupUser:                   q.GroupUser.clone(db),
		LinkObject:                  q.LinkObject.clone(db),
		LinkRelation:                q.LinkRelation.clone(db),
		LinkState:                   q.LinkState.clone(db),
		LinkType:                    q.LinkType.clone(db),
		MailAccount:                 q.MailAccount.clone(db),
		MailQueue:                   q.MailQueue.clone(db),
		NotificationEvent:           q.NotificationEvent.clone(db),
		NotificationEventItem:       q.NotificationEventItem.clone(db),
		NotificationEventMessage:    q.NotificationEventMessage.clone(db),
		Orgstructure:                q.Orgstructure.clone(db),
		PackageRepository:           q.PackageRepository.clone(db),
		PersonalQueue:               q.PersonalQueue.clone(db),
		PersonalService:             q.PersonalService.clone(db),
		PmActivity:                  q.PmActivity.clone(db),
		PmActivityDialog:            q.PmActivityDialog.clone(db),
		PmEntitySync:                q.PmEntitySync.clone(db),
		PmProcess:                   q.PmProcess.clone(db),
		PmTransition:                q.PmTransition.clone(db),
		PmTransitionAction:          q.PmTransitionAction.clone(db),
		PostmasterFilter:            q.PostmasterFilter.clone(db),
		ProcessID:                   q.ProcessID.clone(db),
		Queue:                       q.Queue.clone(db),
		QueueAutoResponse:           q.QueueAutoResponse.clone(db),
		QueuePreference:             q.QueuePreference.clone(db),
		QueueStandardTemplate:       q.QueueStandardTemplate.clone(db),
		Role:                        q.Role.clone(db),
		RoleUser:                    q.RoleUser.clone(db),
		SLA:                         q.SLA.clone(db),
		SLAPreference:               q.SLAPreference.clone(db),
		Salutation:                  q.Salutation.clone(db),
		SchedulerFutureTask:         q.SchedulerFutureTask.clone(db),
		SchedulerRecurrentTask:      q.SchedulerRecurrentTask.clone(db),
		SchedulerTask:               q.SchedulerTask.clone(db),
		SearchProfile:               q.SearchProfile.clone(db),
		Service:                     q.Service.clone(db),
		ServiceCustomerUser:         q.ServiceCustomerUser.clone(db),
		ServicePreference:           q.ServicePreference.clone(db),
		ServiceSLA:                  q.ServiceSLA.clone(db),
		Session:                     q.Session.clone(db),
		Signature:                   q.Signature.clone(db),
		SmimeSignerCertRelation:     q.SmimeSignerCertRelation.clone(db),
		StandardAttachment:          q.StandardAttachment.clone(db),
		StandardTemplate:            q.StandardTemplate.clone(db),
		StandardTemplateAttachment:  q.StandardTemplateAttachment.clone(db),
		Survey:                      q.Survey.clone(db),
		SurveyAnswer:                q.SurveyAnswer.clone(db),
		SurveyQuestion:              q.SurveyQuestion.clone(db),
		SurveyQueue:                 q.SurveyQueue.clone(db),
		SurveyRequest:               q.SurveyRequest.clone(db),
		SurveyVote:                  q.SurveyVote.clone(db),
		SysconfigDefault:            q.SysconfigDefault.clone(db),
		SysconfigDefaultVersion:     q.SysconfigDefaultVersion.clone(db),
		SysconfigDeployment:         q.SysconfigDeployment.clone(db),
		SysconfigDeploymentLock:     q.SysconfigDeploymentLock.clone(db),
		SysconfigModified:           q.SysconfigModified.clone(db),
		SysconfigModifiedVersion:    q.SysconfigModifiedVersion.clone(db),
		SystemAddress:               q.SystemAddress.clone(db),
		SystemDatum:                 q.SystemDatum.clone(db),
		SystemMaintenance:           q.SystemMaintenance.clone(db),
		TgTicket:                    q.TgTicket.clone(db),
		TgUser:                      q.TgUser.clone(db),
		Ticket:                      q.Ticket.clone(db),
		TicketFlag:                  q.TicketFlag.clone(db),
		TicketHistory:               q.TicketHistory.clone(db),
		TicketHistoryType:           q.TicketHistoryType.clone(db),
		TicketIndex:                 q.TicketIndex.clone(db),
		TicketLockIndex:             q.TicketLockIndex.clone(db),
		TicketLockType:              q.TicketLockType.clone(db),
		TicketLoopProtection:        q.TicketLoopProtection.clone(db),
		TicketNumberCounter:         q.TicketNumberCounter.clone(db),
		TicketPriority:              q.TicketPriority.clone(db),
		TicketState:                 q.TicketState.clone(db),
		TicketStateType:             q.TicketStateType.clone(db),
		TicketType:                  q.TicketType.clone(db),
		TicketWatcher:               q.TicketWatcher.clone(db),
		TimeAccounting:              q.TimeAccounting.clone(db),
		User:                        q.User.clone(db),
		UserPreference:              q.UserPreference.clone(db),
		Valid:                       q.Valid.clone(db),
		VirtualF:                    q.VirtualF.clone(db),
		VirtualFsDb:                 q.VirtualFsDb.clone(db),
		VirtualFsPreference:         q.VirtualFsPreference.clone(db),
		WebUploadCache:              q.WebUploadCache.clone(db),
		XMLStorage:                  q.XMLStorage.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                          db,
		Acl:                         q.Acl.replaceDB(db),
		AclSync:                     q.AclSync.replaceDB(db),
		Article:                     q.Article.replaceDB(db),
		ArticleDataMime:             q.ArticleDataMime.replaceDB(db),
		ArticleDataMimeAttachment:   q.ArticleDataMimeAttachment.replaceDB(db),
		ArticleDataMimePlain:        q.ArticleDataMimePlain.replaceDB(db),
		ArticleDataMimeSendError:    q.ArticleDataMimeSendError.replaceDB(db),
		ArticleDataOtrsChat:         q.ArticleDataOtrsChat.replaceDB(db),
		ArticleFlag:                 q.ArticleFlag.replaceDB(db),
		ArticleSearchIndex:          q.ArticleSearchIndex.replaceDB(db),
		ArticleSenderType:           q.ArticleSenderType.replaceDB(db),
		AutoResponse:                q.AutoResponse.replaceDB(db),
		AutoResponseType:            q.AutoResponseType.replaceDB(db),
		Calendar:                    q.Calendar.replaceDB(db),
		CalendarAppointment:         q.CalendarAppointment.replaceDB(db),
		CalendarAppointmentTicket:   q.CalendarAppointmentTicket.replaceDB(db),
		CloudServiceConfig:          q.CloudServiceConfig.replaceDB(db),
		CommunicationChannel:        q.CommunicationChannel.replaceDB(db),
		CommunicationLog:            q.CommunicationLog.replaceDB(db),
		CommunicationLogObjLookup:   q.CommunicationLogObjLookup.replaceDB(db),
		CommunicationLogObject:      q.CommunicationLogObject.replaceDB(db),
		CommunicationLogObjectEntry: q.CommunicationLogObjectEntry.replaceDB(db),
		CustomerCompany:             q.CustomerCompany.replaceDB(db),
		CustomerPreference:          q.CustomerPreference.replaceDB(db),
		CustomerUser:                q.CustomerUser.replaceDB(db),
		CustomerUserCustomer:        q.CustomerUserCustomer.replaceDB(db),
		DynamicField:                q.DynamicField.replaceDB(db),
		DynamicFieldObjIDName:       q.DynamicFieldObjIDName.replaceDB(db),
		DynamicFieldValue:           q.DynamicFieldValue.replaceDB(db),
		FaqAttachment:               q.FaqAttachment.replaceDB(db),
		FaqCategory:                 q.FaqCategory.replaceDB(db),
		FaqCategoryGroup:            q.FaqCategoryGroup.replaceDB(db),
		FaqHistory:                  q.FaqHistory.replaceDB(db),
		FaqItem:                     q.FaqItem.replaceDB(db),
		FaqLanguage:                 q.FaqLanguage.replaceDB(db),
		FaqLog:                      q.FaqLog.replaceDB(db),
		FaqState:                    q.FaqState.replaceDB(db),
		FaqStateType:                q.FaqStateType.replaceDB(db),
		FaqVoting:                   q.FaqVoting.replaceDB(db),
		FilterTemplate:              q.FilterTemplate.replaceDB(db),
		FollowUpPossible:            q.FollowUpPossible.replaceDB(db),
		FormDraft:                   q.FormDraft.replaceDB(db),
		GenericAgentJob:             q.GenericAgentJob.replaceDB(db),
		GiDebuggerEntry:             q.GiDebuggerEntry.replaceDB(db),
		GiDebuggerEntryContent:      q.GiDebuggerEntryContent.replaceDB(db),
		GiWebserviceConfig:          q.GiWebserviceConfig.replaceDB(db),
		GiWebserviceConfigHistory:   q.GiWebserviceConfigHistory.replaceDB(db),
		Group:                       q.Group.replaceDB(db),
		GroupCustomer:               q.GroupCustomer.replaceDB(db),
		GroupCustomerUser:           q.GroupCustomerUser.replaceDB(db),
		GroupRole:                   q.GroupRole.replaceDB(db),
		GroupUser:                   q.GroupUser.replaceDB(db),
		LinkObject:                  q.LinkObject.replaceDB(db),
		LinkRelation:                q.LinkRelation.replaceDB(db),
		LinkState:                   q.LinkState.replaceDB(db),
		LinkType:                    q.LinkType.replaceDB(db),
		MailAccount:                 q.MailAccount.replaceDB(db),
		MailQueue:                   q.MailQueue.replaceDB(db),
		NotificationEvent:           q.NotificationEvent.replaceDB(db),
		NotificationEventItem:       q.NotificationEventItem.replaceDB(db),
		NotificationEventMessage:    q.NotificationEventMessage.replaceDB(db),
		Orgstructure:                q.Orgstructure.replaceDB(db),
		PackageRepository:           q.PackageRepository.replaceDB(db),
		PersonalQueue:               q.PersonalQueue.replaceDB(db),
		PersonalService:             q.PersonalService.replaceDB(db),
		PmActivity:                  q.PmActivity.replaceDB(db),
		PmActivityDialog:            q.PmActivityDialog.replaceDB(db),
		PmEntitySync:                q.PmEntitySync.replaceDB(db),
		PmProcess:                   q.PmProcess.replaceDB(db),
		PmTransition:                q.PmTransition.replaceDB(db),
		PmTransitionAction:          q.PmTransitionAction.replaceDB(db),
		PostmasterFilter:            q.PostmasterFilter.replaceDB(db),
		ProcessID:                   q.ProcessID.replaceDB(db),
		Queue:                       q.Queue.replaceDB(db),
		QueueAutoResponse:           q.QueueAutoResponse.replaceDB(db),
		QueuePreference:             q.QueuePreference.replaceDB(db),
		QueueStandardTemplate:       q.QueueStandardTemplate.replaceDB(db),
		Role:                        q.Role.replaceDB(db),
		RoleUser:                    q.RoleUser.replaceDB(db),
		SLA:                         q.SLA.replaceDB(db),
		SLAPreference:               q.SLAPreference.replaceDB(db),
		Salutation:                  q.Salutation.replaceDB(db),
		SchedulerFutureTask:         q.SchedulerFutureTask.replaceDB(db),
		SchedulerRecurrentTask:      q.SchedulerRecurrentTask.replaceDB(db),
		SchedulerTask:               q.SchedulerTask.replaceDB(db),
		SearchProfile:               q.SearchProfile.replaceDB(db),
		Service:                     q.Service.replaceDB(db),
		ServiceCustomerUser:         q.ServiceCustomerUser.replaceDB(db),
		ServicePreference:           q.ServicePreference.replaceDB(db),
		ServiceSLA:                  q.ServiceSLA.replaceDB(db),
		Session:                     q.Session.replaceDB(db),
		Signature:                   q.Signature.replaceDB(db),
		SmimeSignerCertRelation:     q.SmimeSignerCertRelation.replaceDB(db),
		StandardAttachment:          q.StandardAttachment.replaceDB(db),
		StandardTemplate:            q.StandardTemplate.replaceDB(db),
		StandardTemplateAttachment:  q.StandardTemplateAttachment.replaceDB(db),
		Survey:                      q.Survey.replaceDB(db),
		SurveyAnswer:                q.SurveyAnswer.replaceDB(db),
		SurveyQuestion:              q.SurveyQuestion.replaceDB(db),
		SurveyQueue:                 q.SurveyQueue.replaceDB(db),
		SurveyRequest:               q.SurveyRequest.replaceDB(db),
		SurveyVote:                  q.SurveyVote.replaceDB(db),
		SysconfigDefault:            q.SysconfigDefault.replaceDB(db),
		SysconfigDefaultVersion:     q.SysconfigDefaultVersion.replaceDB(db),
		SysconfigDeployment:         q.SysconfigDeployment.replaceDB(db),
		SysconfigDeploymentLock:     q.SysconfigDeploymentLock.replaceDB(db),
		SysconfigModified:           q.SysconfigModified.replaceDB(db),
		SysconfigModifiedVersion:    q.SysconfigModifiedVersion.replaceDB(db),
		SystemAddress:               q.SystemAddress.replaceDB(db),
		SystemDatum:                 q.SystemDatum.replaceDB(db),
		SystemMaintenance:           q.SystemMaintenance.replaceDB(db),
		TgTicket:                    q.TgTicket.replaceDB(db),
		TgUser:                      q.TgUser.replaceDB(db),
		Ticket:                      q.Ticket.replaceDB(db),
		TicketFlag:                  q.TicketFlag.replaceDB(db),
		TicketHistory:               q.TicketHistory.replaceDB(db),
		TicketHistoryType:           q.TicketHistoryType.replaceDB(db),
		TicketIndex:                 q.TicketIndex.replaceDB(db),
		TicketLockIndex:             q.TicketLockIndex.replaceDB(db),
		TicketLockType:              q.TicketLockType.replaceDB(db),
		TicketLoopProtection:        q.TicketLoopProtection.replaceDB(db),
		TicketNumberCounter:         q.TicketNumberCounter.replaceDB(db),
		TicketPriority:              q.TicketPriority.replaceDB(db),
		TicketState:                 q.TicketState.replaceDB(db),
		TicketStateType:             q.TicketStateType.replaceDB(db),
		TicketType:                  q.TicketType.replaceDB(db),
		TicketWatcher:               q.TicketWatcher.replaceDB(db),
		TimeAccounting:              q.TimeAccounting.replaceDB(db),
		User:                        q.User.replaceDB(db),
		UserPreference:              q.UserPreference.replaceDB(db),
		Valid:                       q.Valid.replaceDB(db),
		VirtualF:                    q.VirtualF.replaceDB(db),
		VirtualFsDb:                 q.VirtualFsDb.replaceDB(db),
		VirtualFsPreference:         q.VirtualFsPreference.replaceDB(db),
		WebUploadCache:              q.WebUploadCache.replaceDB(db),
		XMLStorage:                  q.XMLStorage.replaceDB(db),
	}
}

type queryCtx struct {
	Acl                         IAclDo
	AclSync                     IAclSyncDo
	Article                     IArticleDo
	ArticleDataMime             IArticleDataMimeDo
	ArticleDataMimeAttachment   IArticleDataMimeAttachmentDo
	ArticleDataMimePlain        IArticleDataMimePlainDo
	ArticleDataMimeSendError    IArticleDataMimeSendErrorDo
	ArticleDataOtrsChat         IArticleDataOtrsChatDo
	ArticleFlag                 IArticleFlagDo
	ArticleSearchIndex          IArticleSearchIndexDo
	ArticleSenderType           IArticleSenderTypeDo
	AutoResponse                IAutoResponseDo
	AutoResponseType            IAutoResponseTypeDo
	Calendar                    ICalendarDo
	CalendarAppointment         ICalendarAppointmentDo
	CalendarAppointmentTicket   ICalendarAppointmentTicketDo
	CloudServiceConfig          ICloudServiceConfigDo
	CommunicationChannel        ICommunicationChannelDo
	CommunicationLog            ICommunicationLogDo
	CommunicationLogObjLookup   ICommunicationLogObjLookupDo
	CommunicationLogObject      ICommunicationLogObjectDo
	CommunicationLogObjectEntry ICommunicationLogObjectEntryDo
	CustomerCompany             ICustomerCompanyDo
	CustomerPreference          ICustomerPreferenceDo
	CustomerUser                ICustomerUserDo
	CustomerUserCustomer        ICustomerUserCustomerDo
	DynamicField                IDynamicFieldDo
	DynamicFieldObjIDName       IDynamicFieldObjIDNameDo
	DynamicFieldValue           IDynamicFieldValueDo
	FaqAttachment               IFaqAttachmentDo
	FaqCategory                 IFaqCategoryDo
	FaqCategoryGroup            IFaqCategoryGroupDo
	FaqHistory                  IFaqHistoryDo
	FaqItem                     IFaqItemDo
	FaqLanguage                 IFaqLanguageDo
	FaqLog                      IFaqLogDo
	FaqState                    IFaqStateDo
	FaqStateType                IFaqStateTypeDo
	FaqVoting                   IFaqVotingDo
	FilterTemplate              IFilterTemplateDo
	FollowUpPossible            IFollowUpPossibleDo
	FormDraft                   IFormDraftDo
	GenericAgentJob             IGenericAgentJobDo
	GiDebuggerEntry             IGiDebuggerEntryDo
	GiDebuggerEntryContent      IGiDebuggerEntryContentDo
	GiWebserviceConfig          IGiWebserviceConfigDo
	GiWebserviceConfigHistory   IGiWebserviceConfigHistoryDo
	Group                       IGroupDo
	GroupCustomer               IGroupCustomerDo
	GroupCustomerUser           IGroupCustomerUserDo
	GroupRole                   IGroupRoleDo
	GroupUser                   IGroupUserDo
	LinkObject                  ILinkObjectDo
	LinkRelation                ILinkRelationDo
	LinkState                   ILinkStateDo
	LinkType                    ILinkTypeDo
	MailAccount                 IMailAccountDo
	MailQueue                   IMailQueueDo
	NotificationEvent           INotificationEventDo
	NotificationEventItem       INotificationEventItemDo
	NotificationEventMessage    INotificationEventMessageDo
	Orgstructure                IOrgstructureDo
	PackageRepository           IPackageRepositoryDo
	PersonalQueue               IPersonalQueueDo
	PersonalService             IPersonalServiceDo
	PmActivity                  IPmActivityDo
	PmActivityDialog            IPmActivityDialogDo
	PmEntitySync                IPmEntitySyncDo
	PmProcess                   IPmProcessDo
	PmTransition                IPmTransitionDo
	PmTransitionAction          IPmTransitionActionDo
	PostmasterFilter            IPostmasterFilterDo
	ProcessID                   IProcessIDDo
	Queue                       IQueueDo
	QueueAutoResponse           IQueueAutoResponseDo
	QueuePreference             IQueuePreferenceDo
	QueueStandardTemplate       IQueueStandardTemplateDo
	Role                        IRoleDo
	RoleUser                    IRoleUserDo
	SLA                         ISLADo
	SLAPreference               ISLAPreferenceDo
	Salutation                  ISalutationDo
	SchedulerFutureTask         ISchedulerFutureTaskDo
	SchedulerRecurrentTask      ISchedulerRecurrentTaskDo
	SchedulerTask               ISchedulerTaskDo
	SearchProfile               ISearchProfileDo
	Service                     IServiceDo
	ServiceCustomerUser         IServiceCustomerUserDo
	ServicePreference           IServicePreferenceDo
	ServiceSLA                  IServiceSLADo
	Session                     ISessionDo
	Signature                   ISignatureDo
	SmimeSignerCertRelation     ISmimeSignerCertRelationDo
	StandardAttachment          IStandardAttachmentDo
	StandardTemplate            IStandardTemplateDo
	StandardTemplateAttachment  IStandardTemplateAttachmentDo
	Survey                      ISurveyDo
	SurveyAnswer                ISurveyAnswerDo
	SurveyQuestion              ISurveyQuestionDo
	SurveyQueue                 ISurveyQueueDo
	SurveyRequest               ISurveyRequestDo
	SurveyVote                  ISurveyVoteDo
	SysconfigDefault            ISysconfigDefaultDo
	SysconfigDefaultVersion     ISysconfigDefaultVersionDo
	SysconfigDeployment         ISysconfigDeploymentDo
	SysconfigDeploymentLock     ISysconfigDeploymentLockDo
	SysconfigModified           ISysconfigModifiedDo
	SysconfigModifiedVersion    ISysconfigModifiedVersionDo
	SystemAddress               ISystemAddressDo
	SystemDatum                 ISystemDatumDo
	SystemMaintenance           ISystemMaintenanceDo
	TgTicket                    ITgTicketDo
	TgUser                      ITgUserDo
	Ticket                      ITicketDo
	TicketFlag                  ITicketFlagDo
	TicketHistory               ITicketHistoryDo
	TicketHistoryType           ITicketHistoryTypeDo
	TicketIndex                 ITicketIndexDo
	TicketLockIndex             ITicketLockIndexDo
	TicketLockType              ITicketLockTypeDo
	TicketLoopProtection        ITicketLoopProtectionDo
	TicketNumberCounter         ITicketNumberCounterDo
	TicketPriority              ITicketPriorityDo
	TicketState                 ITicketStateDo
	TicketStateType             ITicketStateTypeDo
	TicketType                  ITicketTypeDo
	TicketWatcher               ITicketWatcherDo
	TimeAccounting              ITimeAccountingDo
	User                        IUserDo
	UserPreference              IUserPreferenceDo
	Valid                       IValidDo
	VirtualF                    IVirtualFDo
	VirtualFsDb                 IVirtualFsDbDo
	VirtualFsPreference         IVirtualFsPreferenceDo
	WebUploadCache              IWebUploadCacheDo
	XMLStorage                  IXMLStorageDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Acl:                         q.Acl.WithContext(ctx),
		AclSync:                     q.AclSync.WithContext(ctx),
		Article:                     q.Article.WithContext(ctx),
		ArticleDataMime:             q.ArticleDataMime.WithContext(ctx),
		ArticleDataMimeAttachment:   q.ArticleDataMimeAttachment.WithContext(ctx),
		ArticleDataMimePlain:        q.ArticleDataMimePlain.WithContext(ctx),
		ArticleDataMimeSendError:    q.ArticleDataMimeSendError.WithContext(ctx),
		ArticleDataOtrsChat:         q.ArticleDataOtrsChat.WithContext(ctx),
		ArticleFlag:                 q.ArticleFlag.WithContext(ctx),
		ArticleSearchIndex:          q.ArticleSearchIndex.WithContext(ctx),
		ArticleSenderType:           q.ArticleSenderType.WithContext(ctx),
		AutoResponse:                q.AutoResponse.WithContext(ctx),
		AutoResponseType:            q.AutoResponseType.WithContext(ctx),
		Calendar:                    q.Calendar.WithContext(ctx),
		CalendarAppointment:         q.CalendarAppointment.WithContext(ctx),
		CalendarAppointmentTicket:   q.CalendarAppointmentTicket.WithContext(ctx),
		CloudServiceConfig:          q.CloudServiceConfig.WithContext(ctx),
		CommunicationChannel:        q.CommunicationChannel.WithContext(ctx),
		CommunicationLog:            q.CommunicationLog.WithContext(ctx),
		CommunicationLogObjLookup:   q.CommunicationLogObjLookup.WithContext(ctx),
		CommunicationLogObject:      q.CommunicationLogObject.WithContext(ctx),
		CommunicationLogObjectEntry: q.CommunicationLogObjectEntry.WithContext(ctx),
		CustomerCompany:             q.CustomerCompany.WithContext(ctx),
		CustomerPreference:          q.CustomerPreference.WithContext(ctx),
		CustomerUser:                q.CustomerUser.WithContext(ctx),
		CustomerUserCustomer:        q.CustomerUserCustomer.WithContext(ctx),
		DynamicField:                q.DynamicField.WithContext(ctx),
		DynamicFieldObjIDName:       q.DynamicFieldObjIDName.WithContext(ctx),
		DynamicFieldValue:           q.DynamicFieldValue.WithContext(ctx),
		FaqAttachment:               q.FaqAttachment.WithContext(ctx),
		FaqCategory:                 q.FaqCategory.WithContext(ctx),
		FaqCategoryGroup:            q.FaqCategoryGroup.WithContext(ctx),
		FaqHistory:                  q.FaqHistory.WithContext(ctx),
		FaqItem:                     q.FaqItem.WithContext(ctx),
		FaqLanguage:                 q.FaqLanguage.WithContext(ctx),
		FaqLog:                      q.FaqLog.WithContext(ctx),
		FaqState:                    q.FaqState.WithContext(ctx),
		FaqStateType:                q.FaqStateType.WithContext(ctx),
		FaqVoting:                   q.FaqVoting.WithContext(ctx),
		FilterTemplate:              q.FilterTemplate.WithContext(ctx),
		FollowUpPossible:            q.FollowUpPossible.WithContext(ctx),
		FormDraft:                   q.FormDraft.WithContext(ctx),
		GenericAgentJob:             q.GenericAgentJob.WithContext(ctx),
		GiDebuggerEntry:             q.GiDebuggerEntry.WithContext(ctx),
		GiDebuggerEntryContent:      q.GiDebuggerEntryContent.WithContext(ctx),
		GiWebserviceConfig:          q.GiWebserviceConfig.WithContext(ctx),
		GiWebserviceConfigHistory:   q.GiWebserviceConfigHistory.WithContext(ctx),
		Group:                       q.Group.WithContext(ctx),
		GroupCustomer:               q.GroupCustomer.WithContext(ctx),
		GroupCustomerUser:           q.GroupCustomerUser.WithContext(ctx),
		GroupRole:                   q.GroupRole.WithContext(ctx),
		GroupUser:                   q.GroupUser.WithContext(ctx),
		LinkObject:                  q.LinkObject.WithContext(ctx),
		LinkRelation:                q.LinkRelation.WithContext(ctx),
		LinkState:                   q.LinkState.WithContext(ctx),
		LinkType:                    q.LinkType.WithContext(ctx),
		MailAccount:                 q.MailAccount.WithContext(ctx),
		MailQueue:                   q.MailQueue.WithContext(ctx),
		NotificationEvent:           q.NotificationEvent.WithContext(ctx),
		NotificationEventItem:       q.NotificationEventItem.WithContext(ctx),
		NotificationEventMessage:    q.NotificationEventMessage.WithContext(ctx),
		Orgstructure:                q.Orgstructure.WithContext(ctx),
		PackageRepository:           q.PackageRepository.WithContext(ctx),
		PersonalQueue:               q.PersonalQueue.WithContext(ctx),
		PersonalService:             q.PersonalService.WithContext(ctx),
		PmActivity:                  q.PmActivity.WithContext(ctx),
		PmActivityDialog:            q.PmActivityDialog.WithContext(ctx),
		PmEntitySync:                q.PmEntitySync.WithContext(ctx),
		PmProcess:                   q.PmProcess.WithContext(ctx),
		PmTransition:                q.PmTransition.WithContext(ctx),
		PmTransitionAction:          q.PmTransitionAction.WithContext(ctx),
		PostmasterFilter:            q.PostmasterFilter.WithContext(ctx),
		ProcessID:                   q.ProcessID.WithContext(ctx),
		Queue:                       q.Queue.WithContext(ctx),
		QueueAutoResponse:           q.QueueAutoResponse.WithContext(ctx),
		QueuePreference:             q.QueuePreference.WithContext(ctx),
		QueueStandardTemplate:       q.QueueStandardTemplate.WithContext(ctx),
		Role:                        q.Role.WithContext(ctx),
		RoleUser:                    q.RoleUser.WithContext(ctx),
		SLA:                         q.SLA.WithContext(ctx),
		SLAPreference:               q.SLAPreference.WithContext(ctx),
		Salutation:                  q.Salutation.WithContext(ctx),
		SchedulerFutureTask:         q.SchedulerFutureTask.WithContext(ctx),
		SchedulerRecurrentTask:      q.SchedulerRecurrentTask.WithContext(ctx),
		SchedulerTask:               q.SchedulerTask.WithContext(ctx),
		SearchProfile:               q.SearchProfile.WithContext(ctx),
		Service:                     q.Service.WithContext(ctx),
		ServiceCustomerUser:         q.ServiceCustomerUser.WithContext(ctx),
		ServicePreference:           q.ServicePreference.WithContext(ctx),
		ServiceSLA:                  q.ServiceSLA.WithContext(ctx),
		Session:                     q.Session.WithContext(ctx),
		Signature:                   q.Signature.WithContext(ctx),
		SmimeSignerCertRelation:     q.SmimeSignerCertRelation.WithContext(ctx),
		StandardAttachment:          q.StandardAttachment.WithContext(ctx),
		StandardTemplate:            q.StandardTemplate.WithContext(ctx),
		StandardTemplateAttachment:  q.StandardTemplateAttachment.WithContext(ctx),
		Survey:                      q.Survey.WithContext(ctx),
		SurveyAnswer:                q.SurveyAnswer.WithContext(ctx),
		SurveyQuestion:              q.SurveyQuestion.WithContext(ctx),
		SurveyQueue:                 q.SurveyQueue.WithContext(ctx),
		SurveyRequest:               q.SurveyRequest.WithContext(ctx),
		SurveyVote:                  q.SurveyVote.WithContext(ctx),
		SysconfigDefault:            q.SysconfigDefault.WithContext(ctx),
		SysconfigDefaultVersion:     q.SysconfigDefaultVersion.WithContext(ctx),
		SysconfigDeployment:         q.SysconfigDeployment.WithContext(ctx),
		SysconfigDeploymentLock:     q.SysconfigDeploymentLock.WithContext(ctx),
		SysconfigModified:           q.SysconfigModified.WithContext(ctx),
		SysconfigModifiedVersion:    q.SysconfigModifiedVersion.WithContext(ctx),
		SystemAddress:               q.SystemAddress.WithContext(ctx),
		SystemDatum:                 q.SystemDatum.WithContext(ctx),
		SystemMaintenance:           q.SystemMaintenance.WithContext(ctx),
		TgTicket:                    q.TgTicket.WithContext(ctx),
		TgUser:                      q.TgUser.WithContext(ctx),
		Ticket:                      q.Ticket.WithContext(ctx),
		TicketFlag:                  q.TicketFlag.WithContext(ctx),
		TicketHistory:               q.TicketHistory.WithContext(ctx),
		TicketHistoryType:           q.TicketHistoryType.WithContext(ctx),
		TicketIndex:                 q.TicketIndex.WithContext(ctx),
		TicketLockIndex:             q.TicketLockIndex.WithContext(ctx),
		TicketLockType:              q.TicketLockType.WithContext(ctx),
		TicketLoopProtection:        q.TicketLoopProtection.WithContext(ctx),
		TicketNumberCounter:         q.TicketNumberCounter.WithContext(ctx),
		TicketPriority:              q.TicketPriority.WithContext(ctx),
		TicketState:                 q.TicketState.WithContext(ctx),
		TicketStateType:             q.TicketStateType.WithContext(ctx),
		TicketType:                  q.TicketType.WithContext(ctx),
		TicketWatcher:               q.TicketWatcher.WithContext(ctx),
		TimeAccounting:              q.TimeAccounting.WithContext(ctx),
		User:                        q.User.WithContext(ctx),
		UserPreference:              q.UserPreference.WithContext(ctx),
		Valid:                       q.Valid.WithContext(ctx),
		VirtualF:                    q.VirtualF.WithContext(ctx),
		VirtualFsDb:                 q.VirtualFsDb.WithContext(ctx),
		VirtualFsPreference:         q.VirtualFsPreference.WithContext(ctx),
		WebUploadCache:              q.WebUploadCache.WithContext(ctx),
		XMLStorage:                  q.XMLStorage.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
