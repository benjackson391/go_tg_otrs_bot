// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newPersonalService(db *gorm.DB, opts ...gen.DOOption) personalService {
	_personalService := personalService{}

	_personalService.personalServiceDo.UseDB(db, opts...)
	_personalService.personalServiceDo.UseModel(&model.PersonalService{})

	tableName := _personalService.personalServiceDo.TableName()
	_personalService.ALL = field.NewAsterisk(tableName)
	_personalService.UserID = field.NewInt32(tableName, "user_id")
	_personalService.ServiceID = field.NewInt32(tableName, "service_id")

	_personalService.fillFieldMap()

	return _personalService
}

type personalService struct {
	personalServiceDo

	ALL       field.Asterisk
	UserID    field.Int32
	ServiceID field.Int32

	fieldMap map[string]field.Expr
}

func (p personalService) Table(newTableName string) *personalService {
	p.personalServiceDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p personalService) As(alias string) *personalService {
	p.personalServiceDo.DO = *(p.personalServiceDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *personalService) updateTableName(table string) *personalService {
	p.ALL = field.NewAsterisk(table)
	p.UserID = field.NewInt32(table, "user_id")
	p.ServiceID = field.NewInt32(table, "service_id")

	p.fillFieldMap()

	return p
}

func (p *personalService) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *personalService) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 2)
	p.fieldMap["user_id"] = p.UserID
	p.fieldMap["service_id"] = p.ServiceID
}

func (p personalService) clone(db *gorm.DB) personalService {
	p.personalServiceDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p personalService) replaceDB(db *gorm.DB) personalService {
	p.personalServiceDo.ReplaceDB(db)
	return p
}

type personalServiceDo struct{ gen.DO }

type IPersonalServiceDo interface {
	gen.SubQuery
	Debug() IPersonalServiceDo
	WithContext(ctx context.Context) IPersonalServiceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPersonalServiceDo
	WriteDB() IPersonalServiceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPersonalServiceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPersonalServiceDo
	Not(conds ...gen.Condition) IPersonalServiceDo
	Or(conds ...gen.Condition) IPersonalServiceDo
	Select(conds ...field.Expr) IPersonalServiceDo
	Where(conds ...gen.Condition) IPersonalServiceDo
	Order(conds ...field.Expr) IPersonalServiceDo
	Distinct(cols ...field.Expr) IPersonalServiceDo
	Omit(cols ...field.Expr) IPersonalServiceDo
	Join(table schema.Tabler, on ...field.Expr) IPersonalServiceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPersonalServiceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPersonalServiceDo
	Group(cols ...field.Expr) IPersonalServiceDo
	Having(conds ...gen.Condition) IPersonalServiceDo
	Limit(limit int) IPersonalServiceDo
	Offset(offset int) IPersonalServiceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPersonalServiceDo
	Unscoped() IPersonalServiceDo
	Create(values ...*model.PersonalService) error
	CreateInBatches(values []*model.PersonalService, batchSize int) error
	Save(values ...*model.PersonalService) error
	First() (*model.PersonalService, error)
	Take() (*model.PersonalService, error)
	Last() (*model.PersonalService, error)
	Find() ([]*model.PersonalService, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PersonalService, err error)
	FindInBatches(result *[]*model.PersonalService, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PersonalService) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPersonalServiceDo
	Assign(attrs ...field.AssignExpr) IPersonalServiceDo
	Joins(fields ...field.RelationField) IPersonalServiceDo
	Preload(fields ...field.RelationField) IPersonalServiceDo
	FirstOrInit() (*model.PersonalService, error)
	FirstOrCreate() (*model.PersonalService, error)
	FindByPage(offset int, limit int) (result []*model.PersonalService, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPersonalServiceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p personalServiceDo) Debug() IPersonalServiceDo {
	return p.withDO(p.DO.Debug())
}

func (p personalServiceDo) WithContext(ctx context.Context) IPersonalServiceDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p personalServiceDo) ReadDB() IPersonalServiceDo {
	return p.Clauses(dbresolver.Read)
}

func (p personalServiceDo) WriteDB() IPersonalServiceDo {
	return p.Clauses(dbresolver.Write)
}

func (p personalServiceDo) Session(config *gorm.Session) IPersonalServiceDo {
	return p.withDO(p.DO.Session(config))
}

func (p personalServiceDo) Clauses(conds ...clause.Expression) IPersonalServiceDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p personalServiceDo) Returning(value interface{}, columns ...string) IPersonalServiceDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p personalServiceDo) Not(conds ...gen.Condition) IPersonalServiceDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p personalServiceDo) Or(conds ...gen.Condition) IPersonalServiceDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p personalServiceDo) Select(conds ...field.Expr) IPersonalServiceDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p personalServiceDo) Where(conds ...gen.Condition) IPersonalServiceDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p personalServiceDo) Order(conds ...field.Expr) IPersonalServiceDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p personalServiceDo) Distinct(cols ...field.Expr) IPersonalServiceDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p personalServiceDo) Omit(cols ...field.Expr) IPersonalServiceDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p personalServiceDo) Join(table schema.Tabler, on ...field.Expr) IPersonalServiceDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p personalServiceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPersonalServiceDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p personalServiceDo) RightJoin(table schema.Tabler, on ...field.Expr) IPersonalServiceDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p personalServiceDo) Group(cols ...field.Expr) IPersonalServiceDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p personalServiceDo) Having(conds ...gen.Condition) IPersonalServiceDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p personalServiceDo) Limit(limit int) IPersonalServiceDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p personalServiceDo) Offset(offset int) IPersonalServiceDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p personalServiceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPersonalServiceDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p personalServiceDo) Unscoped() IPersonalServiceDo {
	return p.withDO(p.DO.Unscoped())
}

func (p personalServiceDo) Create(values ...*model.PersonalService) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p personalServiceDo) CreateInBatches(values []*model.PersonalService, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p personalServiceDo) Save(values ...*model.PersonalService) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p personalServiceDo) First() (*model.PersonalService, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PersonalService), nil
	}
}

func (p personalServiceDo) Take() (*model.PersonalService, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PersonalService), nil
	}
}

func (p personalServiceDo) Last() (*model.PersonalService, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PersonalService), nil
	}
}

func (p personalServiceDo) Find() ([]*model.PersonalService, error) {
	result, err := p.DO.Find()
	return result.([]*model.PersonalService), err
}

func (p personalServiceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PersonalService, err error) {
	buf := make([]*model.PersonalService, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p personalServiceDo) FindInBatches(result *[]*model.PersonalService, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p personalServiceDo) Attrs(attrs ...field.AssignExpr) IPersonalServiceDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p personalServiceDo) Assign(attrs ...field.AssignExpr) IPersonalServiceDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p personalServiceDo) Joins(fields ...field.RelationField) IPersonalServiceDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p personalServiceDo) Preload(fields ...field.RelationField) IPersonalServiceDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p personalServiceDo) FirstOrInit() (*model.PersonalService, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PersonalService), nil
	}
}

func (p personalServiceDo) FirstOrCreate() (*model.PersonalService, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PersonalService), nil
	}
}

func (p personalServiceDo) FindByPage(offset int, limit int) (result []*model.PersonalService, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p personalServiceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p personalServiceDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p personalServiceDo) Delete(models ...*model.PersonalService) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *personalServiceDo) withDO(do gen.Dao) *personalServiceDo {
	p.DO = *do.(*gen.DO)
	return p
}
