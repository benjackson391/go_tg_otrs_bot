// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newServiceSLA(db *gorm.DB, opts ...gen.DOOption) serviceSLA {
	_serviceSLA := serviceSLA{}

	_serviceSLA.serviceSLADo.UseDB(db, opts...)
	_serviceSLA.serviceSLADo.UseModel(&model.ServiceSLA{})

	tableName := _serviceSLA.serviceSLADo.TableName()
	_serviceSLA.ALL = field.NewAsterisk(tableName)
	_serviceSLA.ServiceID = field.NewInt32(tableName, "service_id")
	_serviceSLA.SLAID = field.NewInt32(tableName, "sla_id")

	_serviceSLA.fillFieldMap()

	return _serviceSLA
}

type serviceSLA struct {
	serviceSLADo

	ALL       field.Asterisk
	ServiceID field.Int32
	SLAID     field.Int32

	fieldMap map[string]field.Expr
}

func (s serviceSLA) Table(newTableName string) *serviceSLA {
	s.serviceSLADo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serviceSLA) As(alias string) *serviceSLA {
	s.serviceSLADo.DO = *(s.serviceSLADo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serviceSLA) updateTableName(table string) *serviceSLA {
	s.ALL = field.NewAsterisk(table)
	s.ServiceID = field.NewInt32(table, "service_id")
	s.SLAID = field.NewInt32(table, "sla_id")

	s.fillFieldMap()

	return s
}

func (s *serviceSLA) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serviceSLA) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 2)
	s.fieldMap["service_id"] = s.ServiceID
	s.fieldMap["sla_id"] = s.SLAID
}

func (s serviceSLA) clone(db *gorm.DB) serviceSLA {
	s.serviceSLADo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serviceSLA) replaceDB(db *gorm.DB) serviceSLA {
	s.serviceSLADo.ReplaceDB(db)
	return s
}

type serviceSLADo struct{ gen.DO }

type IServiceSLADo interface {
	gen.SubQuery
	Debug() IServiceSLADo
	WithContext(ctx context.Context) IServiceSLADo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServiceSLADo
	WriteDB() IServiceSLADo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServiceSLADo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServiceSLADo
	Not(conds ...gen.Condition) IServiceSLADo
	Or(conds ...gen.Condition) IServiceSLADo
	Select(conds ...field.Expr) IServiceSLADo
	Where(conds ...gen.Condition) IServiceSLADo
	Order(conds ...field.Expr) IServiceSLADo
	Distinct(cols ...field.Expr) IServiceSLADo
	Omit(cols ...field.Expr) IServiceSLADo
	Join(table schema.Tabler, on ...field.Expr) IServiceSLADo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServiceSLADo
	RightJoin(table schema.Tabler, on ...field.Expr) IServiceSLADo
	Group(cols ...field.Expr) IServiceSLADo
	Having(conds ...gen.Condition) IServiceSLADo
	Limit(limit int) IServiceSLADo
	Offset(offset int) IServiceSLADo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServiceSLADo
	Unscoped() IServiceSLADo
	Create(values ...*model.ServiceSLA) error
	CreateInBatches(values []*model.ServiceSLA, batchSize int) error
	Save(values ...*model.ServiceSLA) error
	First() (*model.ServiceSLA, error)
	Take() (*model.ServiceSLA, error)
	Last() (*model.ServiceSLA, error)
	Find() ([]*model.ServiceSLA, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServiceSLA, err error)
	FindInBatches(result *[]*model.ServiceSLA, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ServiceSLA) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServiceSLADo
	Assign(attrs ...field.AssignExpr) IServiceSLADo
	Joins(fields ...field.RelationField) IServiceSLADo
	Preload(fields ...field.RelationField) IServiceSLADo
	FirstOrInit() (*model.ServiceSLA, error)
	FirstOrCreate() (*model.ServiceSLA, error)
	FindByPage(offset int, limit int) (result []*model.ServiceSLA, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServiceSLADo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serviceSLADo) Debug() IServiceSLADo {
	return s.withDO(s.DO.Debug())
}

func (s serviceSLADo) WithContext(ctx context.Context) IServiceSLADo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serviceSLADo) ReadDB() IServiceSLADo {
	return s.Clauses(dbresolver.Read)
}

func (s serviceSLADo) WriteDB() IServiceSLADo {
	return s.Clauses(dbresolver.Write)
}

func (s serviceSLADo) Session(config *gorm.Session) IServiceSLADo {
	return s.withDO(s.DO.Session(config))
}

func (s serviceSLADo) Clauses(conds ...clause.Expression) IServiceSLADo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serviceSLADo) Returning(value interface{}, columns ...string) IServiceSLADo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serviceSLADo) Not(conds ...gen.Condition) IServiceSLADo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serviceSLADo) Or(conds ...gen.Condition) IServiceSLADo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serviceSLADo) Select(conds ...field.Expr) IServiceSLADo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serviceSLADo) Where(conds ...gen.Condition) IServiceSLADo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serviceSLADo) Order(conds ...field.Expr) IServiceSLADo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serviceSLADo) Distinct(cols ...field.Expr) IServiceSLADo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serviceSLADo) Omit(cols ...field.Expr) IServiceSLADo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serviceSLADo) Join(table schema.Tabler, on ...field.Expr) IServiceSLADo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serviceSLADo) LeftJoin(table schema.Tabler, on ...field.Expr) IServiceSLADo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serviceSLADo) RightJoin(table schema.Tabler, on ...field.Expr) IServiceSLADo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serviceSLADo) Group(cols ...field.Expr) IServiceSLADo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serviceSLADo) Having(conds ...gen.Condition) IServiceSLADo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serviceSLADo) Limit(limit int) IServiceSLADo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serviceSLADo) Offset(offset int) IServiceSLADo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serviceSLADo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServiceSLADo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serviceSLADo) Unscoped() IServiceSLADo {
	return s.withDO(s.DO.Unscoped())
}

func (s serviceSLADo) Create(values ...*model.ServiceSLA) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serviceSLADo) CreateInBatches(values []*model.ServiceSLA, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serviceSLADo) Save(values ...*model.ServiceSLA) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serviceSLADo) First() (*model.ServiceSLA, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceSLA), nil
	}
}

func (s serviceSLADo) Take() (*model.ServiceSLA, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceSLA), nil
	}
}

func (s serviceSLADo) Last() (*model.ServiceSLA, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceSLA), nil
	}
}

func (s serviceSLADo) Find() ([]*model.ServiceSLA, error) {
	result, err := s.DO.Find()
	return result.([]*model.ServiceSLA), err
}

func (s serviceSLADo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServiceSLA, err error) {
	buf := make([]*model.ServiceSLA, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serviceSLADo) FindInBatches(result *[]*model.ServiceSLA, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serviceSLADo) Attrs(attrs ...field.AssignExpr) IServiceSLADo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serviceSLADo) Assign(attrs ...field.AssignExpr) IServiceSLADo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serviceSLADo) Joins(fields ...field.RelationField) IServiceSLADo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serviceSLADo) Preload(fields ...field.RelationField) IServiceSLADo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serviceSLADo) FirstOrInit() (*model.ServiceSLA, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceSLA), nil
	}
}

func (s serviceSLADo) FirstOrCreate() (*model.ServiceSLA, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceSLA), nil
	}
}

func (s serviceSLADo) FindByPage(offset int, limit int) (result []*model.ServiceSLA, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serviceSLADo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serviceSLADo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serviceSLADo) Delete(models ...*model.ServiceSLA) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serviceSLADo) withDO(do gen.Dao) *serviceSLADo {
	s.DO = *do.(*gen.DO)
	return s
}
