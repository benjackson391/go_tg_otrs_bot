// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newFilterTemplate(db *gorm.DB, opts ...gen.DOOption) filterTemplate {
	_filterTemplate := filterTemplate{}

	_filterTemplate.filterTemplateDo.UseDB(db, opts...)
	_filterTemplate.filterTemplateDo.UseModel(&model.FilterTemplate{})

	tableName := _filterTemplate.filterTemplateDo.TableName()
	_filterTemplate.ALL = field.NewAsterisk(tableName)
	_filterTemplate.ID = field.NewInt32(tableName, "id")
	_filterTemplate.Name = field.NewString(tableName, "name")
	_filterTemplate.Filter = field.NewString(tableName, "filter")
	_filterTemplate.StatID = field.NewInt32(tableName, "stat_id")

	_filterTemplate.fillFieldMap()

	return _filterTemplate
}

type filterTemplate struct {
	filterTemplateDo

	ALL    field.Asterisk
	ID     field.Int32
	Name   field.String
	Filter field.String
	StatID field.Int32

	fieldMap map[string]field.Expr
}

func (f filterTemplate) Table(newTableName string) *filterTemplate {
	f.filterTemplateDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f filterTemplate) As(alias string) *filterTemplate {
	f.filterTemplateDo.DO = *(f.filterTemplateDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *filterTemplate) updateTableName(table string) *filterTemplate {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt32(table, "id")
	f.Name = field.NewString(table, "name")
	f.Filter = field.NewString(table, "filter")
	f.StatID = field.NewInt32(table, "stat_id")

	f.fillFieldMap()

	return f
}

func (f *filterTemplate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *filterTemplate) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 4)
	f.fieldMap["id"] = f.ID
	f.fieldMap["name"] = f.Name
	f.fieldMap["filter"] = f.Filter
	f.fieldMap["stat_id"] = f.StatID
}

func (f filterTemplate) clone(db *gorm.DB) filterTemplate {
	f.filterTemplateDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f filterTemplate) replaceDB(db *gorm.DB) filterTemplate {
	f.filterTemplateDo.ReplaceDB(db)
	return f
}

type filterTemplateDo struct{ gen.DO }

type IFilterTemplateDo interface {
	gen.SubQuery
	Debug() IFilterTemplateDo
	WithContext(ctx context.Context) IFilterTemplateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFilterTemplateDo
	WriteDB() IFilterTemplateDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFilterTemplateDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFilterTemplateDo
	Not(conds ...gen.Condition) IFilterTemplateDo
	Or(conds ...gen.Condition) IFilterTemplateDo
	Select(conds ...field.Expr) IFilterTemplateDo
	Where(conds ...gen.Condition) IFilterTemplateDo
	Order(conds ...field.Expr) IFilterTemplateDo
	Distinct(cols ...field.Expr) IFilterTemplateDo
	Omit(cols ...field.Expr) IFilterTemplateDo
	Join(table schema.Tabler, on ...field.Expr) IFilterTemplateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFilterTemplateDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFilterTemplateDo
	Group(cols ...field.Expr) IFilterTemplateDo
	Having(conds ...gen.Condition) IFilterTemplateDo
	Limit(limit int) IFilterTemplateDo
	Offset(offset int) IFilterTemplateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFilterTemplateDo
	Unscoped() IFilterTemplateDo
	Create(values ...*model.FilterTemplate) error
	CreateInBatches(values []*model.FilterTemplate, batchSize int) error
	Save(values ...*model.FilterTemplate) error
	First() (*model.FilterTemplate, error)
	Take() (*model.FilterTemplate, error)
	Last() (*model.FilterTemplate, error)
	Find() ([]*model.FilterTemplate, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FilterTemplate, err error)
	FindInBatches(result *[]*model.FilterTemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FilterTemplate) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFilterTemplateDo
	Assign(attrs ...field.AssignExpr) IFilterTemplateDo
	Joins(fields ...field.RelationField) IFilterTemplateDo
	Preload(fields ...field.RelationField) IFilterTemplateDo
	FirstOrInit() (*model.FilterTemplate, error)
	FirstOrCreate() (*model.FilterTemplate, error)
	FindByPage(offset int, limit int) (result []*model.FilterTemplate, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFilterTemplateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f filterTemplateDo) Debug() IFilterTemplateDo {
	return f.withDO(f.DO.Debug())
}

func (f filterTemplateDo) WithContext(ctx context.Context) IFilterTemplateDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f filterTemplateDo) ReadDB() IFilterTemplateDo {
	return f.Clauses(dbresolver.Read)
}

func (f filterTemplateDo) WriteDB() IFilterTemplateDo {
	return f.Clauses(dbresolver.Write)
}

func (f filterTemplateDo) Session(config *gorm.Session) IFilterTemplateDo {
	return f.withDO(f.DO.Session(config))
}

func (f filterTemplateDo) Clauses(conds ...clause.Expression) IFilterTemplateDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f filterTemplateDo) Returning(value interface{}, columns ...string) IFilterTemplateDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f filterTemplateDo) Not(conds ...gen.Condition) IFilterTemplateDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f filterTemplateDo) Or(conds ...gen.Condition) IFilterTemplateDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f filterTemplateDo) Select(conds ...field.Expr) IFilterTemplateDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f filterTemplateDo) Where(conds ...gen.Condition) IFilterTemplateDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f filterTemplateDo) Order(conds ...field.Expr) IFilterTemplateDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f filterTemplateDo) Distinct(cols ...field.Expr) IFilterTemplateDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f filterTemplateDo) Omit(cols ...field.Expr) IFilterTemplateDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f filterTemplateDo) Join(table schema.Tabler, on ...field.Expr) IFilterTemplateDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f filterTemplateDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFilterTemplateDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f filterTemplateDo) RightJoin(table schema.Tabler, on ...field.Expr) IFilterTemplateDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f filterTemplateDo) Group(cols ...field.Expr) IFilterTemplateDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f filterTemplateDo) Having(conds ...gen.Condition) IFilterTemplateDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f filterTemplateDo) Limit(limit int) IFilterTemplateDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f filterTemplateDo) Offset(offset int) IFilterTemplateDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f filterTemplateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFilterTemplateDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f filterTemplateDo) Unscoped() IFilterTemplateDo {
	return f.withDO(f.DO.Unscoped())
}

func (f filterTemplateDo) Create(values ...*model.FilterTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f filterTemplateDo) CreateInBatches(values []*model.FilterTemplate, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f filterTemplateDo) Save(values ...*model.FilterTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f filterTemplateDo) First() (*model.FilterTemplate, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FilterTemplate), nil
	}
}

func (f filterTemplateDo) Take() (*model.FilterTemplate, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FilterTemplate), nil
	}
}

func (f filterTemplateDo) Last() (*model.FilterTemplate, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FilterTemplate), nil
	}
}

func (f filterTemplateDo) Find() ([]*model.FilterTemplate, error) {
	result, err := f.DO.Find()
	return result.([]*model.FilterTemplate), err
}

func (f filterTemplateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FilterTemplate, err error) {
	buf := make([]*model.FilterTemplate, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f filterTemplateDo) FindInBatches(result *[]*model.FilterTemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f filterTemplateDo) Attrs(attrs ...field.AssignExpr) IFilterTemplateDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f filterTemplateDo) Assign(attrs ...field.AssignExpr) IFilterTemplateDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f filterTemplateDo) Joins(fields ...field.RelationField) IFilterTemplateDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f filterTemplateDo) Preload(fields ...field.RelationField) IFilterTemplateDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f filterTemplateDo) FirstOrInit() (*model.FilterTemplate, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FilterTemplate), nil
	}
}

func (f filterTemplateDo) FirstOrCreate() (*model.FilterTemplate, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FilterTemplate), nil
	}
}

func (f filterTemplateDo) FindByPage(offset int, limit int) (result []*model.FilterTemplate, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f filterTemplateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f filterTemplateDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f filterTemplateDo) Delete(models ...*model.FilterTemplate) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *filterTemplateDo) withDO(do gen.Dao) *filterTemplateDo {
	f.DO = *do.(*gen.DO)
	return f
}
