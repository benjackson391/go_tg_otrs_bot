// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newCommunicationLogObjectEntry(db *gorm.DB, opts ...gen.DOOption) communicationLogObjectEntry {
	_communicationLogObjectEntry := communicationLogObjectEntry{}

	_communicationLogObjectEntry.communicationLogObjectEntryDo.UseDB(db, opts...)
	_communicationLogObjectEntry.communicationLogObjectEntryDo.UseModel(&model.CommunicationLogObjectEntry{})

	tableName := _communicationLogObjectEntry.communicationLogObjectEntryDo.TableName()
	_communicationLogObjectEntry.ALL = field.NewAsterisk(tableName)
	_communicationLogObjectEntry.ID = field.NewInt64(tableName, "id")
	_communicationLogObjectEntry.CommunicationLogObjectID = field.NewInt64(tableName, "communication_log_object_id")
	_communicationLogObjectEntry.LogKey = field.NewString(tableName, "log_key")
	_communicationLogObjectEntry.LogValue = field.NewString(tableName, "log_value")
	_communicationLogObjectEntry.Priority = field.NewString(tableName, "priority")
	_communicationLogObjectEntry.CreateTime = field.NewTime(tableName, "create_time")

	_communicationLogObjectEntry.fillFieldMap()

	return _communicationLogObjectEntry
}

type communicationLogObjectEntry struct {
	communicationLogObjectEntryDo

	ALL                      field.Asterisk
	ID                       field.Int64
	CommunicationLogObjectID field.Int64
	LogKey                   field.String
	LogValue                 field.String
	Priority                 field.String
	CreateTime               field.Time

	fieldMap map[string]field.Expr
}

func (c communicationLogObjectEntry) Table(newTableName string) *communicationLogObjectEntry {
	c.communicationLogObjectEntryDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c communicationLogObjectEntry) As(alias string) *communicationLogObjectEntry {
	c.communicationLogObjectEntryDo.DO = *(c.communicationLogObjectEntryDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *communicationLogObjectEntry) updateTableName(table string) *communicationLogObjectEntry {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CommunicationLogObjectID = field.NewInt64(table, "communication_log_object_id")
	c.LogKey = field.NewString(table, "log_key")
	c.LogValue = field.NewString(table, "log_value")
	c.Priority = field.NewString(table, "priority")
	c.CreateTime = field.NewTime(table, "create_time")

	c.fillFieldMap()

	return c
}

func (c *communicationLogObjectEntry) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *communicationLogObjectEntry) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["id"] = c.ID
	c.fieldMap["communication_log_object_id"] = c.CommunicationLogObjectID
	c.fieldMap["log_key"] = c.LogKey
	c.fieldMap["log_value"] = c.LogValue
	c.fieldMap["priority"] = c.Priority
	c.fieldMap["create_time"] = c.CreateTime
}

func (c communicationLogObjectEntry) clone(db *gorm.DB) communicationLogObjectEntry {
	c.communicationLogObjectEntryDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c communicationLogObjectEntry) replaceDB(db *gorm.DB) communicationLogObjectEntry {
	c.communicationLogObjectEntryDo.ReplaceDB(db)
	return c
}

type communicationLogObjectEntryDo struct{ gen.DO }

type ICommunicationLogObjectEntryDo interface {
	gen.SubQuery
	Debug() ICommunicationLogObjectEntryDo
	WithContext(ctx context.Context) ICommunicationLogObjectEntryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICommunicationLogObjectEntryDo
	WriteDB() ICommunicationLogObjectEntryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICommunicationLogObjectEntryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICommunicationLogObjectEntryDo
	Not(conds ...gen.Condition) ICommunicationLogObjectEntryDo
	Or(conds ...gen.Condition) ICommunicationLogObjectEntryDo
	Select(conds ...field.Expr) ICommunicationLogObjectEntryDo
	Where(conds ...gen.Condition) ICommunicationLogObjectEntryDo
	Order(conds ...field.Expr) ICommunicationLogObjectEntryDo
	Distinct(cols ...field.Expr) ICommunicationLogObjectEntryDo
	Omit(cols ...field.Expr) ICommunicationLogObjectEntryDo
	Join(table schema.Tabler, on ...field.Expr) ICommunicationLogObjectEntryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICommunicationLogObjectEntryDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICommunicationLogObjectEntryDo
	Group(cols ...field.Expr) ICommunicationLogObjectEntryDo
	Having(conds ...gen.Condition) ICommunicationLogObjectEntryDo
	Limit(limit int) ICommunicationLogObjectEntryDo
	Offset(offset int) ICommunicationLogObjectEntryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICommunicationLogObjectEntryDo
	Unscoped() ICommunicationLogObjectEntryDo
	Create(values ...*model.CommunicationLogObjectEntry) error
	CreateInBatches(values []*model.CommunicationLogObjectEntry, batchSize int) error
	Save(values ...*model.CommunicationLogObjectEntry) error
	First() (*model.CommunicationLogObjectEntry, error)
	Take() (*model.CommunicationLogObjectEntry, error)
	Last() (*model.CommunicationLogObjectEntry, error)
	Find() ([]*model.CommunicationLogObjectEntry, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CommunicationLogObjectEntry, err error)
	FindInBatches(result *[]*model.CommunicationLogObjectEntry, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CommunicationLogObjectEntry) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICommunicationLogObjectEntryDo
	Assign(attrs ...field.AssignExpr) ICommunicationLogObjectEntryDo
	Joins(fields ...field.RelationField) ICommunicationLogObjectEntryDo
	Preload(fields ...field.RelationField) ICommunicationLogObjectEntryDo
	FirstOrInit() (*model.CommunicationLogObjectEntry, error)
	FirstOrCreate() (*model.CommunicationLogObjectEntry, error)
	FindByPage(offset int, limit int) (result []*model.CommunicationLogObjectEntry, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICommunicationLogObjectEntryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c communicationLogObjectEntryDo) Debug() ICommunicationLogObjectEntryDo {
	return c.withDO(c.DO.Debug())
}

func (c communicationLogObjectEntryDo) WithContext(ctx context.Context) ICommunicationLogObjectEntryDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c communicationLogObjectEntryDo) ReadDB() ICommunicationLogObjectEntryDo {
	return c.Clauses(dbresolver.Read)
}

func (c communicationLogObjectEntryDo) WriteDB() ICommunicationLogObjectEntryDo {
	return c.Clauses(dbresolver.Write)
}

func (c communicationLogObjectEntryDo) Session(config *gorm.Session) ICommunicationLogObjectEntryDo {
	return c.withDO(c.DO.Session(config))
}

func (c communicationLogObjectEntryDo) Clauses(conds ...clause.Expression) ICommunicationLogObjectEntryDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c communicationLogObjectEntryDo) Returning(value interface{}, columns ...string) ICommunicationLogObjectEntryDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c communicationLogObjectEntryDo) Not(conds ...gen.Condition) ICommunicationLogObjectEntryDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c communicationLogObjectEntryDo) Or(conds ...gen.Condition) ICommunicationLogObjectEntryDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c communicationLogObjectEntryDo) Select(conds ...field.Expr) ICommunicationLogObjectEntryDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c communicationLogObjectEntryDo) Where(conds ...gen.Condition) ICommunicationLogObjectEntryDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c communicationLogObjectEntryDo) Order(conds ...field.Expr) ICommunicationLogObjectEntryDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c communicationLogObjectEntryDo) Distinct(cols ...field.Expr) ICommunicationLogObjectEntryDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c communicationLogObjectEntryDo) Omit(cols ...field.Expr) ICommunicationLogObjectEntryDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c communicationLogObjectEntryDo) Join(table schema.Tabler, on ...field.Expr) ICommunicationLogObjectEntryDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c communicationLogObjectEntryDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICommunicationLogObjectEntryDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c communicationLogObjectEntryDo) RightJoin(table schema.Tabler, on ...field.Expr) ICommunicationLogObjectEntryDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c communicationLogObjectEntryDo) Group(cols ...field.Expr) ICommunicationLogObjectEntryDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c communicationLogObjectEntryDo) Having(conds ...gen.Condition) ICommunicationLogObjectEntryDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c communicationLogObjectEntryDo) Limit(limit int) ICommunicationLogObjectEntryDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c communicationLogObjectEntryDo) Offset(offset int) ICommunicationLogObjectEntryDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c communicationLogObjectEntryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICommunicationLogObjectEntryDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c communicationLogObjectEntryDo) Unscoped() ICommunicationLogObjectEntryDo {
	return c.withDO(c.DO.Unscoped())
}

func (c communicationLogObjectEntryDo) Create(values ...*model.CommunicationLogObjectEntry) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c communicationLogObjectEntryDo) CreateInBatches(values []*model.CommunicationLogObjectEntry, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c communicationLogObjectEntryDo) Save(values ...*model.CommunicationLogObjectEntry) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c communicationLogObjectEntryDo) First() (*model.CommunicationLogObjectEntry, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunicationLogObjectEntry), nil
	}
}

func (c communicationLogObjectEntryDo) Take() (*model.CommunicationLogObjectEntry, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunicationLogObjectEntry), nil
	}
}

func (c communicationLogObjectEntryDo) Last() (*model.CommunicationLogObjectEntry, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunicationLogObjectEntry), nil
	}
}

func (c communicationLogObjectEntryDo) Find() ([]*model.CommunicationLogObjectEntry, error) {
	result, err := c.DO.Find()
	return result.([]*model.CommunicationLogObjectEntry), err
}

func (c communicationLogObjectEntryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CommunicationLogObjectEntry, err error) {
	buf := make([]*model.CommunicationLogObjectEntry, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c communicationLogObjectEntryDo) FindInBatches(result *[]*model.CommunicationLogObjectEntry, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c communicationLogObjectEntryDo) Attrs(attrs ...field.AssignExpr) ICommunicationLogObjectEntryDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c communicationLogObjectEntryDo) Assign(attrs ...field.AssignExpr) ICommunicationLogObjectEntryDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c communicationLogObjectEntryDo) Joins(fields ...field.RelationField) ICommunicationLogObjectEntryDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c communicationLogObjectEntryDo) Preload(fields ...field.RelationField) ICommunicationLogObjectEntryDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c communicationLogObjectEntryDo) FirstOrInit() (*model.CommunicationLogObjectEntry, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunicationLogObjectEntry), nil
	}
}

func (c communicationLogObjectEntryDo) FirstOrCreate() (*model.CommunicationLogObjectEntry, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunicationLogObjectEntry), nil
	}
}

func (c communicationLogObjectEntryDo) FindByPage(offset int, limit int) (result []*model.CommunicationLogObjectEntry, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c communicationLogObjectEntryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c communicationLogObjectEntryDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c communicationLogObjectEntryDo) Delete(models ...*model.CommunicationLogObjectEntry) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *communicationLogObjectEntryDo) withDO(do gen.Dao) *communicationLogObjectEntryDo {
	c.DO = *do.(*gen.DO)
	return c
}
