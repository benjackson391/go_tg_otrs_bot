// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newSysconfigModifiedVersion(db *gorm.DB, opts ...gen.DOOption) sysconfigModifiedVersion {
	_sysconfigModifiedVersion := sysconfigModifiedVersion{}

	_sysconfigModifiedVersion.sysconfigModifiedVersionDo.UseDB(db, opts...)
	_sysconfigModifiedVersion.sysconfigModifiedVersionDo.UseModel(&model.SysconfigModifiedVersion{})

	tableName := _sysconfigModifiedVersion.sysconfigModifiedVersionDo.TableName()
	_sysconfigModifiedVersion.ALL = field.NewAsterisk(tableName)
	_sysconfigModifiedVersion.ID = field.NewInt32(tableName, "id")
	_sysconfigModifiedVersion.SysconfigDefaultVersionID = field.NewInt32(tableName, "sysconfig_default_version_id")
	_sysconfigModifiedVersion.Name = field.NewString(tableName, "name")
	_sysconfigModifiedVersion.UserID = field.NewInt32(tableName, "user_id")
	_sysconfigModifiedVersion.IsValid = field.NewInt32(tableName, "is_valid")
	_sysconfigModifiedVersion.UserModificationActive = field.NewInt32(tableName, "user_modification_active")
	_sysconfigModifiedVersion.EffectiveValue = field.NewBytes(tableName, "effective_value")
	_sysconfigModifiedVersion.ResetToDefault = field.NewInt32(tableName, "reset_to_default")
	_sysconfigModifiedVersion.CreateTime = field.NewTime(tableName, "create_time")
	_sysconfigModifiedVersion.CreateBy = field.NewInt32(tableName, "create_by")
	_sysconfigModifiedVersion.ChangeTime = field.NewTime(tableName, "change_time")
	_sysconfigModifiedVersion.ChangeBy = field.NewInt32(tableName, "change_by")

	_sysconfigModifiedVersion.fillFieldMap()

	return _sysconfigModifiedVersion
}

type sysconfigModifiedVersion struct {
	sysconfigModifiedVersionDo

	ALL                       field.Asterisk
	ID                        field.Int32
	SysconfigDefaultVersionID field.Int32
	Name                      field.String
	UserID                    field.Int32
	IsValid                   field.Int32
	UserModificationActive    field.Int32
	EffectiveValue            field.Bytes
	ResetToDefault            field.Int32
	CreateTime                field.Time
	CreateBy                  field.Int32
	ChangeTime                field.Time
	ChangeBy                  field.Int32

	fieldMap map[string]field.Expr
}

func (s sysconfigModifiedVersion) Table(newTableName string) *sysconfigModifiedVersion {
	s.sysconfigModifiedVersionDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysconfigModifiedVersion) As(alias string) *sysconfigModifiedVersion {
	s.sysconfigModifiedVersionDo.DO = *(s.sysconfigModifiedVersionDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysconfigModifiedVersion) updateTableName(table string) *sysconfigModifiedVersion {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.SysconfigDefaultVersionID = field.NewInt32(table, "sysconfig_default_version_id")
	s.Name = field.NewString(table, "name")
	s.UserID = field.NewInt32(table, "user_id")
	s.IsValid = field.NewInt32(table, "is_valid")
	s.UserModificationActive = field.NewInt32(table, "user_modification_active")
	s.EffectiveValue = field.NewBytes(table, "effective_value")
	s.ResetToDefault = field.NewInt32(table, "reset_to_default")
	s.CreateTime = field.NewTime(table, "create_time")
	s.CreateBy = field.NewInt32(table, "create_by")
	s.ChangeTime = field.NewTime(table, "change_time")
	s.ChangeBy = field.NewInt32(table, "change_by")

	s.fillFieldMap()

	return s
}

func (s *sysconfigModifiedVersion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysconfigModifiedVersion) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["id"] = s.ID
	s.fieldMap["sysconfig_default_version_id"] = s.SysconfigDefaultVersionID
	s.fieldMap["name"] = s.Name
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["is_valid"] = s.IsValid
	s.fieldMap["user_modification_active"] = s.UserModificationActive
	s.fieldMap["effective_value"] = s.EffectiveValue
	s.fieldMap["reset_to_default"] = s.ResetToDefault
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["change_time"] = s.ChangeTime
	s.fieldMap["change_by"] = s.ChangeBy
}

func (s sysconfigModifiedVersion) clone(db *gorm.DB) sysconfigModifiedVersion {
	s.sysconfigModifiedVersionDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysconfigModifiedVersion) replaceDB(db *gorm.DB) sysconfigModifiedVersion {
	s.sysconfigModifiedVersionDo.ReplaceDB(db)
	return s
}

type sysconfigModifiedVersionDo struct{ gen.DO }

type ISysconfigModifiedVersionDo interface {
	gen.SubQuery
	Debug() ISysconfigModifiedVersionDo
	WithContext(ctx context.Context) ISysconfigModifiedVersionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysconfigModifiedVersionDo
	WriteDB() ISysconfigModifiedVersionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysconfigModifiedVersionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysconfigModifiedVersionDo
	Not(conds ...gen.Condition) ISysconfigModifiedVersionDo
	Or(conds ...gen.Condition) ISysconfigModifiedVersionDo
	Select(conds ...field.Expr) ISysconfigModifiedVersionDo
	Where(conds ...gen.Condition) ISysconfigModifiedVersionDo
	Order(conds ...field.Expr) ISysconfigModifiedVersionDo
	Distinct(cols ...field.Expr) ISysconfigModifiedVersionDo
	Omit(cols ...field.Expr) ISysconfigModifiedVersionDo
	Join(table schema.Tabler, on ...field.Expr) ISysconfigModifiedVersionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysconfigModifiedVersionDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysconfigModifiedVersionDo
	Group(cols ...field.Expr) ISysconfigModifiedVersionDo
	Having(conds ...gen.Condition) ISysconfigModifiedVersionDo
	Limit(limit int) ISysconfigModifiedVersionDo
	Offset(offset int) ISysconfigModifiedVersionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysconfigModifiedVersionDo
	Unscoped() ISysconfigModifiedVersionDo
	Create(values ...*model.SysconfigModifiedVersion) error
	CreateInBatches(values []*model.SysconfigModifiedVersion, batchSize int) error
	Save(values ...*model.SysconfigModifiedVersion) error
	First() (*model.SysconfigModifiedVersion, error)
	Take() (*model.SysconfigModifiedVersion, error)
	Last() (*model.SysconfigModifiedVersion, error)
	Find() ([]*model.SysconfigModifiedVersion, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysconfigModifiedVersion, err error)
	FindInBatches(result *[]*model.SysconfigModifiedVersion, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysconfigModifiedVersion) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysconfigModifiedVersionDo
	Assign(attrs ...field.AssignExpr) ISysconfigModifiedVersionDo
	Joins(fields ...field.RelationField) ISysconfigModifiedVersionDo
	Preload(fields ...field.RelationField) ISysconfigModifiedVersionDo
	FirstOrInit() (*model.SysconfigModifiedVersion, error)
	FirstOrCreate() (*model.SysconfigModifiedVersion, error)
	FindByPage(offset int, limit int) (result []*model.SysconfigModifiedVersion, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysconfigModifiedVersionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysconfigModifiedVersionDo) Debug() ISysconfigModifiedVersionDo {
	return s.withDO(s.DO.Debug())
}

func (s sysconfigModifiedVersionDo) WithContext(ctx context.Context) ISysconfigModifiedVersionDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysconfigModifiedVersionDo) ReadDB() ISysconfigModifiedVersionDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysconfigModifiedVersionDo) WriteDB() ISysconfigModifiedVersionDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysconfigModifiedVersionDo) Session(config *gorm.Session) ISysconfigModifiedVersionDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysconfigModifiedVersionDo) Clauses(conds ...clause.Expression) ISysconfigModifiedVersionDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysconfigModifiedVersionDo) Returning(value interface{}, columns ...string) ISysconfigModifiedVersionDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysconfigModifiedVersionDo) Not(conds ...gen.Condition) ISysconfigModifiedVersionDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysconfigModifiedVersionDo) Or(conds ...gen.Condition) ISysconfigModifiedVersionDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysconfigModifiedVersionDo) Select(conds ...field.Expr) ISysconfigModifiedVersionDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysconfigModifiedVersionDo) Where(conds ...gen.Condition) ISysconfigModifiedVersionDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysconfigModifiedVersionDo) Order(conds ...field.Expr) ISysconfigModifiedVersionDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysconfigModifiedVersionDo) Distinct(cols ...field.Expr) ISysconfigModifiedVersionDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysconfigModifiedVersionDo) Omit(cols ...field.Expr) ISysconfigModifiedVersionDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysconfigModifiedVersionDo) Join(table schema.Tabler, on ...field.Expr) ISysconfigModifiedVersionDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysconfigModifiedVersionDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysconfigModifiedVersionDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysconfigModifiedVersionDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysconfigModifiedVersionDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysconfigModifiedVersionDo) Group(cols ...field.Expr) ISysconfigModifiedVersionDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysconfigModifiedVersionDo) Having(conds ...gen.Condition) ISysconfigModifiedVersionDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysconfigModifiedVersionDo) Limit(limit int) ISysconfigModifiedVersionDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysconfigModifiedVersionDo) Offset(offset int) ISysconfigModifiedVersionDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysconfigModifiedVersionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysconfigModifiedVersionDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysconfigModifiedVersionDo) Unscoped() ISysconfigModifiedVersionDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysconfigModifiedVersionDo) Create(values ...*model.SysconfigModifiedVersion) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysconfigModifiedVersionDo) CreateInBatches(values []*model.SysconfigModifiedVersion, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysconfigModifiedVersionDo) Save(values ...*model.SysconfigModifiedVersion) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysconfigModifiedVersionDo) First() (*model.SysconfigModifiedVersion, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysconfigModifiedVersion), nil
	}
}

func (s sysconfigModifiedVersionDo) Take() (*model.SysconfigModifiedVersion, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysconfigModifiedVersion), nil
	}
}

func (s sysconfigModifiedVersionDo) Last() (*model.SysconfigModifiedVersion, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysconfigModifiedVersion), nil
	}
}

func (s sysconfigModifiedVersionDo) Find() ([]*model.SysconfigModifiedVersion, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysconfigModifiedVersion), err
}

func (s sysconfigModifiedVersionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysconfigModifiedVersion, err error) {
	buf := make([]*model.SysconfigModifiedVersion, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysconfigModifiedVersionDo) FindInBatches(result *[]*model.SysconfigModifiedVersion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysconfigModifiedVersionDo) Attrs(attrs ...field.AssignExpr) ISysconfigModifiedVersionDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysconfigModifiedVersionDo) Assign(attrs ...field.AssignExpr) ISysconfigModifiedVersionDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysconfigModifiedVersionDo) Joins(fields ...field.RelationField) ISysconfigModifiedVersionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysconfigModifiedVersionDo) Preload(fields ...field.RelationField) ISysconfigModifiedVersionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysconfigModifiedVersionDo) FirstOrInit() (*model.SysconfigModifiedVersion, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysconfigModifiedVersion), nil
	}
}

func (s sysconfigModifiedVersionDo) FirstOrCreate() (*model.SysconfigModifiedVersion, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysconfigModifiedVersion), nil
	}
}

func (s sysconfigModifiedVersionDo) FindByPage(offset int, limit int) (result []*model.SysconfigModifiedVersion, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysconfigModifiedVersionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysconfigModifiedVersionDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysconfigModifiedVersionDo) Delete(models ...*model.SysconfigModifiedVersion) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysconfigModifiedVersionDo) withDO(do gen.Dao) *sysconfigModifiedVersionDo {
	s.DO = *do.(*gen.DO)
	return s
}
