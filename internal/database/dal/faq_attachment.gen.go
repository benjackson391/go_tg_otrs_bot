// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newFaqAttachment(db *gorm.DB, opts ...gen.DOOption) faqAttachment {
	_faqAttachment := faqAttachment{}

	_faqAttachment.faqAttachmentDo.UseDB(db, opts...)
	_faqAttachment.faqAttachmentDo.UseModel(&model.FaqAttachment{})

	tableName := _faqAttachment.faqAttachmentDo.TableName()
	_faqAttachment.ALL = field.NewAsterisk(tableName)
	_faqAttachment.ID = field.NewInt64(tableName, "id")
	_faqAttachment.FaqID = field.NewInt64(tableName, "faq_id")
	_faqAttachment.Filename = field.NewString(tableName, "filename")
	_faqAttachment.ContentSize = field.NewString(tableName, "content_size")
	_faqAttachment.ContentType = field.NewString(tableName, "content_type")
	_faqAttachment.Content = field.NewBytes(tableName, "content")
	_faqAttachment.Inlineattachment = field.NewInt32(tableName, "inlineattachment")
	_faqAttachment.Created = field.NewTime(tableName, "created")
	_faqAttachment.CreatedBy = field.NewInt32(tableName, "created_by")
	_faqAttachment.Changed = field.NewTime(tableName, "changed")
	_faqAttachment.ChangedBy = field.NewInt32(tableName, "changed_by")

	_faqAttachment.fillFieldMap()

	return _faqAttachment
}

type faqAttachment struct {
	faqAttachmentDo

	ALL              field.Asterisk
	ID               field.Int64
	FaqID            field.Int64
	Filename         field.String
	ContentSize      field.String
	ContentType      field.String
	Content          field.Bytes
	Inlineattachment field.Int32
	Created          field.Time
	CreatedBy        field.Int32
	Changed          field.Time
	ChangedBy        field.Int32

	fieldMap map[string]field.Expr
}

func (f faqAttachment) Table(newTableName string) *faqAttachment {
	f.faqAttachmentDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f faqAttachment) As(alias string) *faqAttachment {
	f.faqAttachmentDo.DO = *(f.faqAttachmentDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *faqAttachment) updateTableName(table string) *faqAttachment {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.FaqID = field.NewInt64(table, "faq_id")
	f.Filename = field.NewString(table, "filename")
	f.ContentSize = field.NewString(table, "content_size")
	f.ContentType = field.NewString(table, "content_type")
	f.Content = field.NewBytes(table, "content")
	f.Inlineattachment = field.NewInt32(table, "inlineattachment")
	f.Created = field.NewTime(table, "created")
	f.CreatedBy = field.NewInt32(table, "created_by")
	f.Changed = field.NewTime(table, "changed")
	f.ChangedBy = field.NewInt32(table, "changed_by")

	f.fillFieldMap()

	return f
}

func (f *faqAttachment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *faqAttachment) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 11)
	f.fieldMap["id"] = f.ID
	f.fieldMap["faq_id"] = f.FaqID
	f.fieldMap["filename"] = f.Filename
	f.fieldMap["content_size"] = f.ContentSize
	f.fieldMap["content_type"] = f.ContentType
	f.fieldMap["content"] = f.Content
	f.fieldMap["inlineattachment"] = f.Inlineattachment
	f.fieldMap["created"] = f.Created
	f.fieldMap["created_by"] = f.CreatedBy
	f.fieldMap["changed"] = f.Changed
	f.fieldMap["changed_by"] = f.ChangedBy
}

func (f faqAttachment) clone(db *gorm.DB) faqAttachment {
	f.faqAttachmentDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f faqAttachment) replaceDB(db *gorm.DB) faqAttachment {
	f.faqAttachmentDo.ReplaceDB(db)
	return f
}

type faqAttachmentDo struct{ gen.DO }

type IFaqAttachmentDo interface {
	gen.SubQuery
	Debug() IFaqAttachmentDo
	WithContext(ctx context.Context) IFaqAttachmentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFaqAttachmentDo
	WriteDB() IFaqAttachmentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFaqAttachmentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFaqAttachmentDo
	Not(conds ...gen.Condition) IFaqAttachmentDo
	Or(conds ...gen.Condition) IFaqAttachmentDo
	Select(conds ...field.Expr) IFaqAttachmentDo
	Where(conds ...gen.Condition) IFaqAttachmentDo
	Order(conds ...field.Expr) IFaqAttachmentDo
	Distinct(cols ...field.Expr) IFaqAttachmentDo
	Omit(cols ...field.Expr) IFaqAttachmentDo
	Join(table schema.Tabler, on ...field.Expr) IFaqAttachmentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFaqAttachmentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFaqAttachmentDo
	Group(cols ...field.Expr) IFaqAttachmentDo
	Having(conds ...gen.Condition) IFaqAttachmentDo
	Limit(limit int) IFaqAttachmentDo
	Offset(offset int) IFaqAttachmentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFaqAttachmentDo
	Unscoped() IFaqAttachmentDo
	Create(values ...*model.FaqAttachment) error
	CreateInBatches(values []*model.FaqAttachment, batchSize int) error
	Save(values ...*model.FaqAttachment) error
	First() (*model.FaqAttachment, error)
	Take() (*model.FaqAttachment, error)
	Last() (*model.FaqAttachment, error)
	Find() ([]*model.FaqAttachment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FaqAttachment, err error)
	FindInBatches(result *[]*model.FaqAttachment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FaqAttachment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFaqAttachmentDo
	Assign(attrs ...field.AssignExpr) IFaqAttachmentDo
	Joins(fields ...field.RelationField) IFaqAttachmentDo
	Preload(fields ...field.RelationField) IFaqAttachmentDo
	FirstOrInit() (*model.FaqAttachment, error)
	FirstOrCreate() (*model.FaqAttachment, error)
	FindByPage(offset int, limit int) (result []*model.FaqAttachment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFaqAttachmentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f faqAttachmentDo) Debug() IFaqAttachmentDo {
	return f.withDO(f.DO.Debug())
}

func (f faqAttachmentDo) WithContext(ctx context.Context) IFaqAttachmentDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f faqAttachmentDo) ReadDB() IFaqAttachmentDo {
	return f.Clauses(dbresolver.Read)
}

func (f faqAttachmentDo) WriteDB() IFaqAttachmentDo {
	return f.Clauses(dbresolver.Write)
}

func (f faqAttachmentDo) Session(config *gorm.Session) IFaqAttachmentDo {
	return f.withDO(f.DO.Session(config))
}

func (f faqAttachmentDo) Clauses(conds ...clause.Expression) IFaqAttachmentDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f faqAttachmentDo) Returning(value interface{}, columns ...string) IFaqAttachmentDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f faqAttachmentDo) Not(conds ...gen.Condition) IFaqAttachmentDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f faqAttachmentDo) Or(conds ...gen.Condition) IFaqAttachmentDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f faqAttachmentDo) Select(conds ...field.Expr) IFaqAttachmentDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f faqAttachmentDo) Where(conds ...gen.Condition) IFaqAttachmentDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f faqAttachmentDo) Order(conds ...field.Expr) IFaqAttachmentDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f faqAttachmentDo) Distinct(cols ...field.Expr) IFaqAttachmentDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f faqAttachmentDo) Omit(cols ...field.Expr) IFaqAttachmentDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f faqAttachmentDo) Join(table schema.Tabler, on ...field.Expr) IFaqAttachmentDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f faqAttachmentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFaqAttachmentDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f faqAttachmentDo) RightJoin(table schema.Tabler, on ...field.Expr) IFaqAttachmentDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f faqAttachmentDo) Group(cols ...field.Expr) IFaqAttachmentDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f faqAttachmentDo) Having(conds ...gen.Condition) IFaqAttachmentDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f faqAttachmentDo) Limit(limit int) IFaqAttachmentDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f faqAttachmentDo) Offset(offset int) IFaqAttachmentDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f faqAttachmentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFaqAttachmentDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f faqAttachmentDo) Unscoped() IFaqAttachmentDo {
	return f.withDO(f.DO.Unscoped())
}

func (f faqAttachmentDo) Create(values ...*model.FaqAttachment) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f faqAttachmentDo) CreateInBatches(values []*model.FaqAttachment, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f faqAttachmentDo) Save(values ...*model.FaqAttachment) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f faqAttachmentDo) First() (*model.FaqAttachment, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqAttachment), nil
	}
}

func (f faqAttachmentDo) Take() (*model.FaqAttachment, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqAttachment), nil
	}
}

func (f faqAttachmentDo) Last() (*model.FaqAttachment, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqAttachment), nil
	}
}

func (f faqAttachmentDo) Find() ([]*model.FaqAttachment, error) {
	result, err := f.DO.Find()
	return result.([]*model.FaqAttachment), err
}

func (f faqAttachmentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FaqAttachment, err error) {
	buf := make([]*model.FaqAttachment, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f faqAttachmentDo) FindInBatches(result *[]*model.FaqAttachment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f faqAttachmentDo) Attrs(attrs ...field.AssignExpr) IFaqAttachmentDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f faqAttachmentDo) Assign(attrs ...field.AssignExpr) IFaqAttachmentDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f faqAttachmentDo) Joins(fields ...field.RelationField) IFaqAttachmentDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f faqAttachmentDo) Preload(fields ...field.RelationField) IFaqAttachmentDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f faqAttachmentDo) FirstOrInit() (*model.FaqAttachment, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqAttachment), nil
	}
}

func (f faqAttachmentDo) FirstOrCreate() (*model.FaqAttachment, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqAttachment), nil
	}
}

func (f faqAttachmentDo) FindByPage(offset int, limit int) (result []*model.FaqAttachment, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f faqAttachmentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f faqAttachmentDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f faqAttachmentDo) Delete(models ...*model.FaqAttachment) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *faqAttachmentDo) withDO(do gen.Dao) *faqAttachmentDo {
	f.DO = *do.(*gen.DO)
	return f
}
