// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newTicketWatcher(db *gorm.DB, opts ...gen.DOOption) ticketWatcher {
	_ticketWatcher := ticketWatcher{}

	_ticketWatcher.ticketWatcherDo.UseDB(db, opts...)
	_ticketWatcher.ticketWatcherDo.UseModel(&model.TicketWatcher{})

	tableName := _ticketWatcher.ticketWatcherDo.TableName()
	_ticketWatcher.ALL = field.NewAsterisk(tableName)
	_ticketWatcher.TicketID = field.NewInt64(tableName, "ticket_id")
	_ticketWatcher.UserID = field.NewInt32(tableName, "user_id")
	_ticketWatcher.CreateTime = field.NewTime(tableName, "create_time")
	_ticketWatcher.CreateBy = field.NewInt32(tableName, "create_by")
	_ticketWatcher.ChangeTime = field.NewTime(tableName, "change_time")
	_ticketWatcher.ChangeBy = field.NewInt32(tableName, "change_by")

	_ticketWatcher.fillFieldMap()

	return _ticketWatcher
}

type ticketWatcher struct {
	ticketWatcherDo

	ALL        field.Asterisk
	TicketID   field.Int64
	UserID     field.Int32
	CreateTime field.Time
	CreateBy   field.Int32
	ChangeTime field.Time
	ChangeBy   field.Int32

	fieldMap map[string]field.Expr
}

func (t ticketWatcher) Table(newTableName string) *ticketWatcher {
	t.ticketWatcherDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t ticketWatcher) As(alias string) *ticketWatcher {
	t.ticketWatcherDo.DO = *(t.ticketWatcherDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *ticketWatcher) updateTableName(table string) *ticketWatcher {
	t.ALL = field.NewAsterisk(table)
	t.TicketID = field.NewInt64(table, "ticket_id")
	t.UserID = field.NewInt32(table, "user_id")
	t.CreateTime = field.NewTime(table, "create_time")
	t.CreateBy = field.NewInt32(table, "create_by")
	t.ChangeTime = field.NewTime(table, "change_time")
	t.ChangeBy = field.NewInt32(table, "change_by")

	t.fillFieldMap()

	return t
}

func (t *ticketWatcher) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *ticketWatcher) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["ticket_id"] = t.TicketID
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["create_by"] = t.CreateBy
	t.fieldMap["change_time"] = t.ChangeTime
	t.fieldMap["change_by"] = t.ChangeBy
}

func (t ticketWatcher) clone(db *gorm.DB) ticketWatcher {
	t.ticketWatcherDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t ticketWatcher) replaceDB(db *gorm.DB) ticketWatcher {
	t.ticketWatcherDo.ReplaceDB(db)
	return t
}

type ticketWatcherDo struct{ gen.DO }

type ITicketWatcherDo interface {
	gen.SubQuery
	Debug() ITicketWatcherDo
	WithContext(ctx context.Context) ITicketWatcherDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITicketWatcherDo
	WriteDB() ITicketWatcherDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITicketWatcherDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITicketWatcherDo
	Not(conds ...gen.Condition) ITicketWatcherDo
	Or(conds ...gen.Condition) ITicketWatcherDo
	Select(conds ...field.Expr) ITicketWatcherDo
	Where(conds ...gen.Condition) ITicketWatcherDo
	Order(conds ...field.Expr) ITicketWatcherDo
	Distinct(cols ...field.Expr) ITicketWatcherDo
	Omit(cols ...field.Expr) ITicketWatcherDo
	Join(table schema.Tabler, on ...field.Expr) ITicketWatcherDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITicketWatcherDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITicketWatcherDo
	Group(cols ...field.Expr) ITicketWatcherDo
	Having(conds ...gen.Condition) ITicketWatcherDo
	Limit(limit int) ITicketWatcherDo
	Offset(offset int) ITicketWatcherDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITicketWatcherDo
	Unscoped() ITicketWatcherDo
	Create(values ...*model.TicketWatcher) error
	CreateInBatches(values []*model.TicketWatcher, batchSize int) error
	Save(values ...*model.TicketWatcher) error
	First() (*model.TicketWatcher, error)
	Take() (*model.TicketWatcher, error)
	Last() (*model.TicketWatcher, error)
	Find() ([]*model.TicketWatcher, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TicketWatcher, err error)
	FindInBatches(result *[]*model.TicketWatcher, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TicketWatcher) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITicketWatcherDo
	Assign(attrs ...field.AssignExpr) ITicketWatcherDo
	Joins(fields ...field.RelationField) ITicketWatcherDo
	Preload(fields ...field.RelationField) ITicketWatcherDo
	FirstOrInit() (*model.TicketWatcher, error)
	FirstOrCreate() (*model.TicketWatcher, error)
	FindByPage(offset int, limit int) (result []*model.TicketWatcher, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITicketWatcherDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t ticketWatcherDo) Debug() ITicketWatcherDo {
	return t.withDO(t.DO.Debug())
}

func (t ticketWatcherDo) WithContext(ctx context.Context) ITicketWatcherDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t ticketWatcherDo) ReadDB() ITicketWatcherDo {
	return t.Clauses(dbresolver.Read)
}

func (t ticketWatcherDo) WriteDB() ITicketWatcherDo {
	return t.Clauses(dbresolver.Write)
}

func (t ticketWatcherDo) Session(config *gorm.Session) ITicketWatcherDo {
	return t.withDO(t.DO.Session(config))
}

func (t ticketWatcherDo) Clauses(conds ...clause.Expression) ITicketWatcherDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t ticketWatcherDo) Returning(value interface{}, columns ...string) ITicketWatcherDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t ticketWatcherDo) Not(conds ...gen.Condition) ITicketWatcherDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t ticketWatcherDo) Or(conds ...gen.Condition) ITicketWatcherDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t ticketWatcherDo) Select(conds ...field.Expr) ITicketWatcherDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t ticketWatcherDo) Where(conds ...gen.Condition) ITicketWatcherDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t ticketWatcherDo) Order(conds ...field.Expr) ITicketWatcherDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t ticketWatcherDo) Distinct(cols ...field.Expr) ITicketWatcherDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t ticketWatcherDo) Omit(cols ...field.Expr) ITicketWatcherDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t ticketWatcherDo) Join(table schema.Tabler, on ...field.Expr) ITicketWatcherDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t ticketWatcherDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITicketWatcherDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t ticketWatcherDo) RightJoin(table schema.Tabler, on ...field.Expr) ITicketWatcherDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t ticketWatcherDo) Group(cols ...field.Expr) ITicketWatcherDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t ticketWatcherDo) Having(conds ...gen.Condition) ITicketWatcherDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t ticketWatcherDo) Limit(limit int) ITicketWatcherDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t ticketWatcherDo) Offset(offset int) ITicketWatcherDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t ticketWatcherDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITicketWatcherDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t ticketWatcherDo) Unscoped() ITicketWatcherDo {
	return t.withDO(t.DO.Unscoped())
}

func (t ticketWatcherDo) Create(values ...*model.TicketWatcher) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t ticketWatcherDo) CreateInBatches(values []*model.TicketWatcher, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t ticketWatcherDo) Save(values ...*model.TicketWatcher) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t ticketWatcherDo) First() (*model.TicketWatcher, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketWatcher), nil
	}
}

func (t ticketWatcherDo) Take() (*model.TicketWatcher, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketWatcher), nil
	}
}

func (t ticketWatcherDo) Last() (*model.TicketWatcher, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketWatcher), nil
	}
}

func (t ticketWatcherDo) Find() ([]*model.TicketWatcher, error) {
	result, err := t.DO.Find()
	return result.([]*model.TicketWatcher), err
}

func (t ticketWatcherDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TicketWatcher, err error) {
	buf := make([]*model.TicketWatcher, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t ticketWatcherDo) FindInBatches(result *[]*model.TicketWatcher, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t ticketWatcherDo) Attrs(attrs ...field.AssignExpr) ITicketWatcherDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t ticketWatcherDo) Assign(attrs ...field.AssignExpr) ITicketWatcherDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t ticketWatcherDo) Joins(fields ...field.RelationField) ITicketWatcherDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t ticketWatcherDo) Preload(fields ...field.RelationField) ITicketWatcherDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t ticketWatcherDo) FirstOrInit() (*model.TicketWatcher, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketWatcher), nil
	}
}

func (t ticketWatcherDo) FirstOrCreate() (*model.TicketWatcher, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketWatcher), nil
	}
}

func (t ticketWatcherDo) FindByPage(offset int, limit int) (result []*model.TicketWatcher, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t ticketWatcherDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t ticketWatcherDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t ticketWatcherDo) Delete(models ...*model.TicketWatcher) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *ticketWatcherDo) withDO(do gen.Dao) *ticketWatcherDo {
	t.DO = *do.(*gen.DO)
	return t
}
