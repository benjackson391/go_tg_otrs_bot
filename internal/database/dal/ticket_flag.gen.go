// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newTicketFlag(db *gorm.DB, opts ...gen.DOOption) ticketFlag {
	_ticketFlag := ticketFlag{}

	_ticketFlag.ticketFlagDo.UseDB(db, opts...)
	_ticketFlag.ticketFlagDo.UseModel(&model.TicketFlag{})

	tableName := _ticketFlag.ticketFlagDo.TableName()
	_ticketFlag.ALL = field.NewAsterisk(tableName)
	_ticketFlag.TicketID = field.NewInt64(tableName, "ticket_id")
	_ticketFlag.TicketKey = field.NewString(tableName, "ticket_key")
	_ticketFlag.TicketValue = field.NewString(tableName, "ticket_value")
	_ticketFlag.CreateTime = field.NewTime(tableName, "create_time")
	_ticketFlag.CreateBy = field.NewInt32(tableName, "create_by")

	_ticketFlag.fillFieldMap()

	return _ticketFlag
}

type ticketFlag struct {
	ticketFlagDo

	ALL         field.Asterisk
	TicketID    field.Int64
	TicketKey   field.String
	TicketValue field.String
	CreateTime  field.Time
	CreateBy    field.Int32

	fieldMap map[string]field.Expr
}

func (t ticketFlag) Table(newTableName string) *ticketFlag {
	t.ticketFlagDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t ticketFlag) As(alias string) *ticketFlag {
	t.ticketFlagDo.DO = *(t.ticketFlagDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *ticketFlag) updateTableName(table string) *ticketFlag {
	t.ALL = field.NewAsterisk(table)
	t.TicketID = field.NewInt64(table, "ticket_id")
	t.TicketKey = field.NewString(table, "ticket_key")
	t.TicketValue = field.NewString(table, "ticket_value")
	t.CreateTime = field.NewTime(table, "create_time")
	t.CreateBy = field.NewInt32(table, "create_by")

	t.fillFieldMap()

	return t
}

func (t *ticketFlag) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *ticketFlag) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["ticket_id"] = t.TicketID
	t.fieldMap["ticket_key"] = t.TicketKey
	t.fieldMap["ticket_value"] = t.TicketValue
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["create_by"] = t.CreateBy
}

func (t ticketFlag) clone(db *gorm.DB) ticketFlag {
	t.ticketFlagDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t ticketFlag) replaceDB(db *gorm.DB) ticketFlag {
	t.ticketFlagDo.ReplaceDB(db)
	return t
}

type ticketFlagDo struct{ gen.DO }

type ITicketFlagDo interface {
	gen.SubQuery
	Debug() ITicketFlagDo
	WithContext(ctx context.Context) ITicketFlagDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITicketFlagDo
	WriteDB() ITicketFlagDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITicketFlagDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITicketFlagDo
	Not(conds ...gen.Condition) ITicketFlagDo
	Or(conds ...gen.Condition) ITicketFlagDo
	Select(conds ...field.Expr) ITicketFlagDo
	Where(conds ...gen.Condition) ITicketFlagDo
	Order(conds ...field.Expr) ITicketFlagDo
	Distinct(cols ...field.Expr) ITicketFlagDo
	Omit(cols ...field.Expr) ITicketFlagDo
	Join(table schema.Tabler, on ...field.Expr) ITicketFlagDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITicketFlagDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITicketFlagDo
	Group(cols ...field.Expr) ITicketFlagDo
	Having(conds ...gen.Condition) ITicketFlagDo
	Limit(limit int) ITicketFlagDo
	Offset(offset int) ITicketFlagDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITicketFlagDo
	Unscoped() ITicketFlagDo
	Create(values ...*model.TicketFlag) error
	CreateInBatches(values []*model.TicketFlag, batchSize int) error
	Save(values ...*model.TicketFlag) error
	First() (*model.TicketFlag, error)
	Take() (*model.TicketFlag, error)
	Last() (*model.TicketFlag, error)
	Find() ([]*model.TicketFlag, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TicketFlag, err error)
	FindInBatches(result *[]*model.TicketFlag, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TicketFlag) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITicketFlagDo
	Assign(attrs ...field.AssignExpr) ITicketFlagDo
	Joins(fields ...field.RelationField) ITicketFlagDo
	Preload(fields ...field.RelationField) ITicketFlagDo
	FirstOrInit() (*model.TicketFlag, error)
	FirstOrCreate() (*model.TicketFlag, error)
	FindByPage(offset int, limit int) (result []*model.TicketFlag, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITicketFlagDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t ticketFlagDo) Debug() ITicketFlagDo {
	return t.withDO(t.DO.Debug())
}

func (t ticketFlagDo) WithContext(ctx context.Context) ITicketFlagDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t ticketFlagDo) ReadDB() ITicketFlagDo {
	return t.Clauses(dbresolver.Read)
}

func (t ticketFlagDo) WriteDB() ITicketFlagDo {
	return t.Clauses(dbresolver.Write)
}

func (t ticketFlagDo) Session(config *gorm.Session) ITicketFlagDo {
	return t.withDO(t.DO.Session(config))
}

func (t ticketFlagDo) Clauses(conds ...clause.Expression) ITicketFlagDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t ticketFlagDo) Returning(value interface{}, columns ...string) ITicketFlagDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t ticketFlagDo) Not(conds ...gen.Condition) ITicketFlagDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t ticketFlagDo) Or(conds ...gen.Condition) ITicketFlagDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t ticketFlagDo) Select(conds ...field.Expr) ITicketFlagDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t ticketFlagDo) Where(conds ...gen.Condition) ITicketFlagDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t ticketFlagDo) Order(conds ...field.Expr) ITicketFlagDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t ticketFlagDo) Distinct(cols ...field.Expr) ITicketFlagDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t ticketFlagDo) Omit(cols ...field.Expr) ITicketFlagDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t ticketFlagDo) Join(table schema.Tabler, on ...field.Expr) ITicketFlagDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t ticketFlagDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITicketFlagDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t ticketFlagDo) RightJoin(table schema.Tabler, on ...field.Expr) ITicketFlagDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t ticketFlagDo) Group(cols ...field.Expr) ITicketFlagDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t ticketFlagDo) Having(conds ...gen.Condition) ITicketFlagDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t ticketFlagDo) Limit(limit int) ITicketFlagDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t ticketFlagDo) Offset(offset int) ITicketFlagDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t ticketFlagDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITicketFlagDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t ticketFlagDo) Unscoped() ITicketFlagDo {
	return t.withDO(t.DO.Unscoped())
}

func (t ticketFlagDo) Create(values ...*model.TicketFlag) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t ticketFlagDo) CreateInBatches(values []*model.TicketFlag, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t ticketFlagDo) Save(values ...*model.TicketFlag) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t ticketFlagDo) First() (*model.TicketFlag, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketFlag), nil
	}
}

func (t ticketFlagDo) Take() (*model.TicketFlag, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketFlag), nil
	}
}

func (t ticketFlagDo) Last() (*model.TicketFlag, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketFlag), nil
	}
}

func (t ticketFlagDo) Find() ([]*model.TicketFlag, error) {
	result, err := t.DO.Find()
	return result.([]*model.TicketFlag), err
}

func (t ticketFlagDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TicketFlag, err error) {
	buf := make([]*model.TicketFlag, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t ticketFlagDo) FindInBatches(result *[]*model.TicketFlag, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t ticketFlagDo) Attrs(attrs ...field.AssignExpr) ITicketFlagDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t ticketFlagDo) Assign(attrs ...field.AssignExpr) ITicketFlagDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t ticketFlagDo) Joins(fields ...field.RelationField) ITicketFlagDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t ticketFlagDo) Preload(fields ...field.RelationField) ITicketFlagDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t ticketFlagDo) FirstOrInit() (*model.TicketFlag, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketFlag), nil
	}
}

func (t ticketFlagDo) FirstOrCreate() (*model.TicketFlag, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketFlag), nil
	}
}

func (t ticketFlagDo) FindByPage(offset int, limit int) (result []*model.TicketFlag, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t ticketFlagDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t ticketFlagDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t ticketFlagDo) Delete(models ...*model.TicketFlag) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *ticketFlagDo) withDO(do gen.Dao) *ticketFlagDo {
	t.DO = *do.(*gen.DO)
	return t
}
