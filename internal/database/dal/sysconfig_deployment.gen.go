// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newSysconfigDeployment(db *gorm.DB, opts ...gen.DOOption) sysconfigDeployment {
	_sysconfigDeployment := sysconfigDeployment{}

	_sysconfigDeployment.sysconfigDeploymentDo.UseDB(db, opts...)
	_sysconfigDeployment.sysconfigDeploymentDo.UseModel(&model.SysconfigDeployment{})

	tableName := _sysconfigDeployment.sysconfigDeploymentDo.TableName()
	_sysconfigDeployment.ALL = field.NewAsterisk(tableName)
	_sysconfigDeployment.ID = field.NewInt32(tableName, "id")
	_sysconfigDeployment.Comments = field.NewString(tableName, "comments")
	_sysconfigDeployment.UserID = field.NewInt32(tableName, "user_id")
	_sysconfigDeployment.EffectiveValue = field.NewBytes(tableName, "effective_value")
	_sysconfigDeployment.CreateTime = field.NewTime(tableName, "create_time")
	_sysconfigDeployment.CreateBy = field.NewInt32(tableName, "create_by")

	_sysconfigDeployment.fillFieldMap()

	return _sysconfigDeployment
}

type sysconfigDeployment struct {
	sysconfigDeploymentDo

	ALL            field.Asterisk
	ID             field.Int32
	Comments       field.String
	UserID         field.Int32
	EffectiveValue field.Bytes
	CreateTime     field.Time
	CreateBy       field.Int32

	fieldMap map[string]field.Expr
}

func (s sysconfigDeployment) Table(newTableName string) *sysconfigDeployment {
	s.sysconfigDeploymentDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysconfigDeployment) As(alias string) *sysconfigDeployment {
	s.sysconfigDeploymentDo.DO = *(s.sysconfigDeploymentDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysconfigDeployment) updateTableName(table string) *sysconfigDeployment {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.Comments = field.NewString(table, "comments")
	s.UserID = field.NewInt32(table, "user_id")
	s.EffectiveValue = field.NewBytes(table, "effective_value")
	s.CreateTime = field.NewTime(table, "create_time")
	s.CreateBy = field.NewInt32(table, "create_by")

	s.fillFieldMap()

	return s
}

func (s *sysconfigDeployment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysconfigDeployment) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["comments"] = s.Comments
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["effective_value"] = s.EffectiveValue
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["create_by"] = s.CreateBy
}

func (s sysconfigDeployment) clone(db *gorm.DB) sysconfigDeployment {
	s.sysconfigDeploymentDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysconfigDeployment) replaceDB(db *gorm.DB) sysconfigDeployment {
	s.sysconfigDeploymentDo.ReplaceDB(db)
	return s
}

type sysconfigDeploymentDo struct{ gen.DO }

type ISysconfigDeploymentDo interface {
	gen.SubQuery
	Debug() ISysconfigDeploymentDo
	WithContext(ctx context.Context) ISysconfigDeploymentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysconfigDeploymentDo
	WriteDB() ISysconfigDeploymentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysconfigDeploymentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysconfigDeploymentDo
	Not(conds ...gen.Condition) ISysconfigDeploymentDo
	Or(conds ...gen.Condition) ISysconfigDeploymentDo
	Select(conds ...field.Expr) ISysconfigDeploymentDo
	Where(conds ...gen.Condition) ISysconfigDeploymentDo
	Order(conds ...field.Expr) ISysconfigDeploymentDo
	Distinct(cols ...field.Expr) ISysconfigDeploymentDo
	Omit(cols ...field.Expr) ISysconfigDeploymentDo
	Join(table schema.Tabler, on ...field.Expr) ISysconfigDeploymentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysconfigDeploymentDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysconfigDeploymentDo
	Group(cols ...field.Expr) ISysconfigDeploymentDo
	Having(conds ...gen.Condition) ISysconfigDeploymentDo
	Limit(limit int) ISysconfigDeploymentDo
	Offset(offset int) ISysconfigDeploymentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysconfigDeploymentDo
	Unscoped() ISysconfigDeploymentDo
	Create(values ...*model.SysconfigDeployment) error
	CreateInBatches(values []*model.SysconfigDeployment, batchSize int) error
	Save(values ...*model.SysconfigDeployment) error
	First() (*model.SysconfigDeployment, error)
	Take() (*model.SysconfigDeployment, error)
	Last() (*model.SysconfigDeployment, error)
	Find() ([]*model.SysconfigDeployment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysconfigDeployment, err error)
	FindInBatches(result *[]*model.SysconfigDeployment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysconfigDeployment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysconfigDeploymentDo
	Assign(attrs ...field.AssignExpr) ISysconfigDeploymentDo
	Joins(fields ...field.RelationField) ISysconfigDeploymentDo
	Preload(fields ...field.RelationField) ISysconfigDeploymentDo
	FirstOrInit() (*model.SysconfigDeployment, error)
	FirstOrCreate() (*model.SysconfigDeployment, error)
	FindByPage(offset int, limit int) (result []*model.SysconfigDeployment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysconfigDeploymentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysconfigDeploymentDo) Debug() ISysconfigDeploymentDo {
	return s.withDO(s.DO.Debug())
}

func (s sysconfigDeploymentDo) WithContext(ctx context.Context) ISysconfigDeploymentDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysconfigDeploymentDo) ReadDB() ISysconfigDeploymentDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysconfigDeploymentDo) WriteDB() ISysconfigDeploymentDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysconfigDeploymentDo) Session(config *gorm.Session) ISysconfigDeploymentDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysconfigDeploymentDo) Clauses(conds ...clause.Expression) ISysconfigDeploymentDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysconfigDeploymentDo) Returning(value interface{}, columns ...string) ISysconfigDeploymentDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysconfigDeploymentDo) Not(conds ...gen.Condition) ISysconfigDeploymentDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysconfigDeploymentDo) Or(conds ...gen.Condition) ISysconfigDeploymentDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysconfigDeploymentDo) Select(conds ...field.Expr) ISysconfigDeploymentDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysconfigDeploymentDo) Where(conds ...gen.Condition) ISysconfigDeploymentDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysconfigDeploymentDo) Order(conds ...field.Expr) ISysconfigDeploymentDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysconfigDeploymentDo) Distinct(cols ...field.Expr) ISysconfigDeploymentDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysconfigDeploymentDo) Omit(cols ...field.Expr) ISysconfigDeploymentDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysconfigDeploymentDo) Join(table schema.Tabler, on ...field.Expr) ISysconfigDeploymentDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysconfigDeploymentDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysconfigDeploymentDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysconfigDeploymentDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysconfigDeploymentDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysconfigDeploymentDo) Group(cols ...field.Expr) ISysconfigDeploymentDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysconfigDeploymentDo) Having(conds ...gen.Condition) ISysconfigDeploymentDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysconfigDeploymentDo) Limit(limit int) ISysconfigDeploymentDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysconfigDeploymentDo) Offset(offset int) ISysconfigDeploymentDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysconfigDeploymentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysconfigDeploymentDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysconfigDeploymentDo) Unscoped() ISysconfigDeploymentDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysconfigDeploymentDo) Create(values ...*model.SysconfigDeployment) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysconfigDeploymentDo) CreateInBatches(values []*model.SysconfigDeployment, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysconfigDeploymentDo) Save(values ...*model.SysconfigDeployment) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysconfigDeploymentDo) First() (*model.SysconfigDeployment, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysconfigDeployment), nil
	}
}

func (s sysconfigDeploymentDo) Take() (*model.SysconfigDeployment, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysconfigDeployment), nil
	}
}

func (s sysconfigDeploymentDo) Last() (*model.SysconfigDeployment, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysconfigDeployment), nil
	}
}

func (s sysconfigDeploymentDo) Find() ([]*model.SysconfigDeployment, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysconfigDeployment), err
}

func (s sysconfigDeploymentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysconfigDeployment, err error) {
	buf := make([]*model.SysconfigDeployment, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysconfigDeploymentDo) FindInBatches(result *[]*model.SysconfigDeployment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysconfigDeploymentDo) Attrs(attrs ...field.AssignExpr) ISysconfigDeploymentDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysconfigDeploymentDo) Assign(attrs ...field.AssignExpr) ISysconfigDeploymentDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysconfigDeploymentDo) Joins(fields ...field.RelationField) ISysconfigDeploymentDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysconfigDeploymentDo) Preload(fields ...field.RelationField) ISysconfigDeploymentDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysconfigDeploymentDo) FirstOrInit() (*model.SysconfigDeployment, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysconfigDeployment), nil
	}
}

func (s sysconfigDeploymentDo) FirstOrCreate() (*model.SysconfigDeployment, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysconfigDeployment), nil
	}
}

func (s sysconfigDeploymentDo) FindByPage(offset int, limit int) (result []*model.SysconfigDeployment, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysconfigDeploymentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysconfigDeploymentDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysconfigDeploymentDo) Delete(models ...*model.SysconfigDeployment) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysconfigDeploymentDo) withDO(do gen.Dao) *sysconfigDeploymentDo {
	s.DO = *do.(*gen.DO)
	return s
}
