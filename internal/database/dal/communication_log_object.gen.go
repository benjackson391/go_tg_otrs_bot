// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newCommunicationLogObject(db *gorm.DB, opts ...gen.DOOption) communicationLogObject {
	_communicationLogObject := communicationLogObject{}

	_communicationLogObject.communicationLogObjectDo.UseDB(db, opts...)
	_communicationLogObject.communicationLogObjectDo.UseModel(&model.CommunicationLogObject{})

	tableName := _communicationLogObject.communicationLogObjectDo.TableName()
	_communicationLogObject.ALL = field.NewAsterisk(tableName)
	_communicationLogObject.ID = field.NewInt64(tableName, "id")
	_communicationLogObject.InsertFingerprint = field.NewString(tableName, "insert_fingerprint")
	_communicationLogObject.CommunicationID = field.NewInt64(tableName, "communication_id")
	_communicationLogObject.ObjectType = field.NewString(tableName, "object_type")
	_communicationLogObject.Status = field.NewString(tableName, "status")
	_communicationLogObject.StartTime = field.NewTime(tableName, "start_time")
	_communicationLogObject.EndTime = field.NewTime(tableName, "end_time")

	_communicationLogObject.fillFieldMap()

	return _communicationLogObject
}

type communicationLogObject struct {
	communicationLogObjectDo

	ALL               field.Asterisk
	ID                field.Int64
	InsertFingerprint field.String
	CommunicationID   field.Int64
	ObjectType        field.String
	Status            field.String
	StartTime         field.Time
	EndTime           field.Time

	fieldMap map[string]field.Expr
}

func (c communicationLogObject) Table(newTableName string) *communicationLogObject {
	c.communicationLogObjectDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c communicationLogObject) As(alias string) *communicationLogObject {
	c.communicationLogObjectDo.DO = *(c.communicationLogObjectDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *communicationLogObject) updateTableName(table string) *communicationLogObject {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.InsertFingerprint = field.NewString(table, "insert_fingerprint")
	c.CommunicationID = field.NewInt64(table, "communication_id")
	c.ObjectType = field.NewString(table, "object_type")
	c.Status = field.NewString(table, "status")
	c.StartTime = field.NewTime(table, "start_time")
	c.EndTime = field.NewTime(table, "end_time")

	c.fillFieldMap()

	return c
}

func (c *communicationLogObject) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *communicationLogObject) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 7)
	c.fieldMap["id"] = c.ID
	c.fieldMap["insert_fingerprint"] = c.InsertFingerprint
	c.fieldMap["communication_id"] = c.CommunicationID
	c.fieldMap["object_type"] = c.ObjectType
	c.fieldMap["status"] = c.Status
	c.fieldMap["start_time"] = c.StartTime
	c.fieldMap["end_time"] = c.EndTime
}

func (c communicationLogObject) clone(db *gorm.DB) communicationLogObject {
	c.communicationLogObjectDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c communicationLogObject) replaceDB(db *gorm.DB) communicationLogObject {
	c.communicationLogObjectDo.ReplaceDB(db)
	return c
}

type communicationLogObjectDo struct{ gen.DO }

type ICommunicationLogObjectDo interface {
	gen.SubQuery
	Debug() ICommunicationLogObjectDo
	WithContext(ctx context.Context) ICommunicationLogObjectDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICommunicationLogObjectDo
	WriteDB() ICommunicationLogObjectDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICommunicationLogObjectDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICommunicationLogObjectDo
	Not(conds ...gen.Condition) ICommunicationLogObjectDo
	Or(conds ...gen.Condition) ICommunicationLogObjectDo
	Select(conds ...field.Expr) ICommunicationLogObjectDo
	Where(conds ...gen.Condition) ICommunicationLogObjectDo
	Order(conds ...field.Expr) ICommunicationLogObjectDo
	Distinct(cols ...field.Expr) ICommunicationLogObjectDo
	Omit(cols ...field.Expr) ICommunicationLogObjectDo
	Join(table schema.Tabler, on ...field.Expr) ICommunicationLogObjectDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICommunicationLogObjectDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICommunicationLogObjectDo
	Group(cols ...field.Expr) ICommunicationLogObjectDo
	Having(conds ...gen.Condition) ICommunicationLogObjectDo
	Limit(limit int) ICommunicationLogObjectDo
	Offset(offset int) ICommunicationLogObjectDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICommunicationLogObjectDo
	Unscoped() ICommunicationLogObjectDo
	Create(values ...*model.CommunicationLogObject) error
	CreateInBatches(values []*model.CommunicationLogObject, batchSize int) error
	Save(values ...*model.CommunicationLogObject) error
	First() (*model.CommunicationLogObject, error)
	Take() (*model.CommunicationLogObject, error)
	Last() (*model.CommunicationLogObject, error)
	Find() ([]*model.CommunicationLogObject, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CommunicationLogObject, err error)
	FindInBatches(result *[]*model.CommunicationLogObject, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CommunicationLogObject) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICommunicationLogObjectDo
	Assign(attrs ...field.AssignExpr) ICommunicationLogObjectDo
	Joins(fields ...field.RelationField) ICommunicationLogObjectDo
	Preload(fields ...field.RelationField) ICommunicationLogObjectDo
	FirstOrInit() (*model.CommunicationLogObject, error)
	FirstOrCreate() (*model.CommunicationLogObject, error)
	FindByPage(offset int, limit int) (result []*model.CommunicationLogObject, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICommunicationLogObjectDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c communicationLogObjectDo) Debug() ICommunicationLogObjectDo {
	return c.withDO(c.DO.Debug())
}

func (c communicationLogObjectDo) WithContext(ctx context.Context) ICommunicationLogObjectDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c communicationLogObjectDo) ReadDB() ICommunicationLogObjectDo {
	return c.Clauses(dbresolver.Read)
}

func (c communicationLogObjectDo) WriteDB() ICommunicationLogObjectDo {
	return c.Clauses(dbresolver.Write)
}

func (c communicationLogObjectDo) Session(config *gorm.Session) ICommunicationLogObjectDo {
	return c.withDO(c.DO.Session(config))
}

func (c communicationLogObjectDo) Clauses(conds ...clause.Expression) ICommunicationLogObjectDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c communicationLogObjectDo) Returning(value interface{}, columns ...string) ICommunicationLogObjectDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c communicationLogObjectDo) Not(conds ...gen.Condition) ICommunicationLogObjectDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c communicationLogObjectDo) Or(conds ...gen.Condition) ICommunicationLogObjectDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c communicationLogObjectDo) Select(conds ...field.Expr) ICommunicationLogObjectDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c communicationLogObjectDo) Where(conds ...gen.Condition) ICommunicationLogObjectDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c communicationLogObjectDo) Order(conds ...field.Expr) ICommunicationLogObjectDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c communicationLogObjectDo) Distinct(cols ...field.Expr) ICommunicationLogObjectDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c communicationLogObjectDo) Omit(cols ...field.Expr) ICommunicationLogObjectDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c communicationLogObjectDo) Join(table schema.Tabler, on ...field.Expr) ICommunicationLogObjectDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c communicationLogObjectDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICommunicationLogObjectDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c communicationLogObjectDo) RightJoin(table schema.Tabler, on ...field.Expr) ICommunicationLogObjectDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c communicationLogObjectDo) Group(cols ...field.Expr) ICommunicationLogObjectDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c communicationLogObjectDo) Having(conds ...gen.Condition) ICommunicationLogObjectDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c communicationLogObjectDo) Limit(limit int) ICommunicationLogObjectDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c communicationLogObjectDo) Offset(offset int) ICommunicationLogObjectDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c communicationLogObjectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICommunicationLogObjectDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c communicationLogObjectDo) Unscoped() ICommunicationLogObjectDo {
	return c.withDO(c.DO.Unscoped())
}

func (c communicationLogObjectDo) Create(values ...*model.CommunicationLogObject) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c communicationLogObjectDo) CreateInBatches(values []*model.CommunicationLogObject, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c communicationLogObjectDo) Save(values ...*model.CommunicationLogObject) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c communicationLogObjectDo) First() (*model.CommunicationLogObject, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunicationLogObject), nil
	}
}

func (c communicationLogObjectDo) Take() (*model.CommunicationLogObject, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunicationLogObject), nil
	}
}

func (c communicationLogObjectDo) Last() (*model.CommunicationLogObject, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunicationLogObject), nil
	}
}

func (c communicationLogObjectDo) Find() ([]*model.CommunicationLogObject, error) {
	result, err := c.DO.Find()
	return result.([]*model.CommunicationLogObject), err
}

func (c communicationLogObjectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CommunicationLogObject, err error) {
	buf := make([]*model.CommunicationLogObject, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c communicationLogObjectDo) FindInBatches(result *[]*model.CommunicationLogObject, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c communicationLogObjectDo) Attrs(attrs ...field.AssignExpr) ICommunicationLogObjectDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c communicationLogObjectDo) Assign(attrs ...field.AssignExpr) ICommunicationLogObjectDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c communicationLogObjectDo) Joins(fields ...field.RelationField) ICommunicationLogObjectDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c communicationLogObjectDo) Preload(fields ...field.RelationField) ICommunicationLogObjectDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c communicationLogObjectDo) FirstOrInit() (*model.CommunicationLogObject, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunicationLogObject), nil
	}
}

func (c communicationLogObjectDo) FirstOrCreate() (*model.CommunicationLogObject, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunicationLogObject), nil
	}
}

func (c communicationLogObjectDo) FindByPage(offset int, limit int) (result []*model.CommunicationLogObject, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c communicationLogObjectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c communicationLogObjectDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c communicationLogObjectDo) Delete(models ...*model.CommunicationLogObject) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *communicationLogObjectDo) withDO(do gen.Dao) *communicationLogObjectDo {
	c.DO = *do.(*gen.DO)
	return c
}
