// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newTicketIndex(db *gorm.DB, opts ...gen.DOOption) ticketIndex {
	_ticketIndex := ticketIndex{}

	_ticketIndex.ticketIndexDo.UseDB(db, opts...)
	_ticketIndex.ticketIndexDo.UseModel(&model.TicketIndex{})

	tableName := _ticketIndex.ticketIndexDo.TableName()
	_ticketIndex.ALL = field.NewAsterisk(tableName)
	_ticketIndex.TicketID = field.NewInt64(tableName, "ticket_id")
	_ticketIndex.QueueID = field.NewInt32(tableName, "queue_id")
	_ticketIndex.Queue = field.NewString(tableName, "queue")
	_ticketIndex.GroupID = field.NewInt32(tableName, "group_id")
	_ticketIndex.SLock = field.NewString(tableName, "s_lock")
	_ticketIndex.SState = field.NewString(tableName, "s_state")
	_ticketIndex.CreateTime = field.NewTime(tableName, "create_time")

	_ticketIndex.fillFieldMap()

	return _ticketIndex
}

type ticketIndex struct {
	ticketIndexDo

	ALL        field.Asterisk
	TicketID   field.Int64
	QueueID    field.Int32
	Queue      field.String
	GroupID    field.Int32
	SLock      field.String
	SState     field.String
	CreateTime field.Time

	fieldMap map[string]field.Expr
}

func (t ticketIndex) Table(newTableName string) *ticketIndex {
	t.ticketIndexDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t ticketIndex) As(alias string) *ticketIndex {
	t.ticketIndexDo.DO = *(t.ticketIndexDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *ticketIndex) updateTableName(table string) *ticketIndex {
	t.ALL = field.NewAsterisk(table)
	t.TicketID = field.NewInt64(table, "ticket_id")
	t.QueueID = field.NewInt32(table, "queue_id")
	t.Queue = field.NewString(table, "queue")
	t.GroupID = field.NewInt32(table, "group_id")
	t.SLock = field.NewString(table, "s_lock")
	t.SState = field.NewString(table, "s_state")
	t.CreateTime = field.NewTime(table, "create_time")

	t.fillFieldMap()

	return t
}

func (t *ticketIndex) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *ticketIndex) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["ticket_id"] = t.TicketID
	t.fieldMap["queue_id"] = t.QueueID
	t.fieldMap["queue"] = t.Queue
	t.fieldMap["group_id"] = t.GroupID
	t.fieldMap["s_lock"] = t.SLock
	t.fieldMap["s_state"] = t.SState
	t.fieldMap["create_time"] = t.CreateTime
}

func (t ticketIndex) clone(db *gorm.DB) ticketIndex {
	t.ticketIndexDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t ticketIndex) replaceDB(db *gorm.DB) ticketIndex {
	t.ticketIndexDo.ReplaceDB(db)
	return t
}

type ticketIndexDo struct{ gen.DO }

type ITicketIndexDo interface {
	gen.SubQuery
	Debug() ITicketIndexDo
	WithContext(ctx context.Context) ITicketIndexDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITicketIndexDo
	WriteDB() ITicketIndexDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITicketIndexDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITicketIndexDo
	Not(conds ...gen.Condition) ITicketIndexDo
	Or(conds ...gen.Condition) ITicketIndexDo
	Select(conds ...field.Expr) ITicketIndexDo
	Where(conds ...gen.Condition) ITicketIndexDo
	Order(conds ...field.Expr) ITicketIndexDo
	Distinct(cols ...field.Expr) ITicketIndexDo
	Omit(cols ...field.Expr) ITicketIndexDo
	Join(table schema.Tabler, on ...field.Expr) ITicketIndexDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITicketIndexDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITicketIndexDo
	Group(cols ...field.Expr) ITicketIndexDo
	Having(conds ...gen.Condition) ITicketIndexDo
	Limit(limit int) ITicketIndexDo
	Offset(offset int) ITicketIndexDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITicketIndexDo
	Unscoped() ITicketIndexDo
	Create(values ...*model.TicketIndex) error
	CreateInBatches(values []*model.TicketIndex, batchSize int) error
	Save(values ...*model.TicketIndex) error
	First() (*model.TicketIndex, error)
	Take() (*model.TicketIndex, error)
	Last() (*model.TicketIndex, error)
	Find() ([]*model.TicketIndex, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TicketIndex, err error)
	FindInBatches(result *[]*model.TicketIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TicketIndex) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITicketIndexDo
	Assign(attrs ...field.AssignExpr) ITicketIndexDo
	Joins(fields ...field.RelationField) ITicketIndexDo
	Preload(fields ...field.RelationField) ITicketIndexDo
	FirstOrInit() (*model.TicketIndex, error)
	FirstOrCreate() (*model.TicketIndex, error)
	FindByPage(offset int, limit int) (result []*model.TicketIndex, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITicketIndexDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t ticketIndexDo) Debug() ITicketIndexDo {
	return t.withDO(t.DO.Debug())
}

func (t ticketIndexDo) WithContext(ctx context.Context) ITicketIndexDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t ticketIndexDo) ReadDB() ITicketIndexDo {
	return t.Clauses(dbresolver.Read)
}

func (t ticketIndexDo) WriteDB() ITicketIndexDo {
	return t.Clauses(dbresolver.Write)
}

func (t ticketIndexDo) Session(config *gorm.Session) ITicketIndexDo {
	return t.withDO(t.DO.Session(config))
}

func (t ticketIndexDo) Clauses(conds ...clause.Expression) ITicketIndexDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t ticketIndexDo) Returning(value interface{}, columns ...string) ITicketIndexDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t ticketIndexDo) Not(conds ...gen.Condition) ITicketIndexDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t ticketIndexDo) Or(conds ...gen.Condition) ITicketIndexDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t ticketIndexDo) Select(conds ...field.Expr) ITicketIndexDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t ticketIndexDo) Where(conds ...gen.Condition) ITicketIndexDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t ticketIndexDo) Order(conds ...field.Expr) ITicketIndexDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t ticketIndexDo) Distinct(cols ...field.Expr) ITicketIndexDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t ticketIndexDo) Omit(cols ...field.Expr) ITicketIndexDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t ticketIndexDo) Join(table schema.Tabler, on ...field.Expr) ITicketIndexDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t ticketIndexDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITicketIndexDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t ticketIndexDo) RightJoin(table schema.Tabler, on ...field.Expr) ITicketIndexDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t ticketIndexDo) Group(cols ...field.Expr) ITicketIndexDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t ticketIndexDo) Having(conds ...gen.Condition) ITicketIndexDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t ticketIndexDo) Limit(limit int) ITicketIndexDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t ticketIndexDo) Offset(offset int) ITicketIndexDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t ticketIndexDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITicketIndexDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t ticketIndexDo) Unscoped() ITicketIndexDo {
	return t.withDO(t.DO.Unscoped())
}

func (t ticketIndexDo) Create(values ...*model.TicketIndex) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t ticketIndexDo) CreateInBatches(values []*model.TicketIndex, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t ticketIndexDo) Save(values ...*model.TicketIndex) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t ticketIndexDo) First() (*model.TicketIndex, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketIndex), nil
	}
}

func (t ticketIndexDo) Take() (*model.TicketIndex, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketIndex), nil
	}
}

func (t ticketIndexDo) Last() (*model.TicketIndex, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketIndex), nil
	}
}

func (t ticketIndexDo) Find() ([]*model.TicketIndex, error) {
	result, err := t.DO.Find()
	return result.([]*model.TicketIndex), err
}

func (t ticketIndexDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TicketIndex, err error) {
	buf := make([]*model.TicketIndex, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t ticketIndexDo) FindInBatches(result *[]*model.TicketIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t ticketIndexDo) Attrs(attrs ...field.AssignExpr) ITicketIndexDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t ticketIndexDo) Assign(attrs ...field.AssignExpr) ITicketIndexDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t ticketIndexDo) Joins(fields ...field.RelationField) ITicketIndexDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t ticketIndexDo) Preload(fields ...field.RelationField) ITicketIndexDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t ticketIndexDo) FirstOrInit() (*model.TicketIndex, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketIndex), nil
	}
}

func (t ticketIndexDo) FirstOrCreate() (*model.TicketIndex, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketIndex), nil
	}
}

func (t ticketIndexDo) FindByPage(offset int, limit int) (result []*model.TicketIndex, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t ticketIndexDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t ticketIndexDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t ticketIndexDo) Delete(models ...*model.TicketIndex) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *ticketIndexDo) withDO(do gen.Dao) *ticketIndexDo {
	t.DO = *do.(*gen.DO)
	return t
}
