// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newSmimeSignerCertRelation(db *gorm.DB, opts ...gen.DOOption) smimeSignerCertRelation {
	_smimeSignerCertRelation := smimeSignerCertRelation{}

	_smimeSignerCertRelation.smimeSignerCertRelationDo.UseDB(db, opts...)
	_smimeSignerCertRelation.smimeSignerCertRelationDo.UseModel(&model.SmimeSignerCertRelation{})

	tableName := _smimeSignerCertRelation.smimeSignerCertRelationDo.TableName()
	_smimeSignerCertRelation.ALL = field.NewAsterisk(tableName)
	_smimeSignerCertRelation.ID = field.NewInt32(tableName, "id")
	_smimeSignerCertRelation.CertHash = field.NewString(tableName, "cert_hash")
	_smimeSignerCertRelation.CertFingerprint = field.NewString(tableName, "cert_fingerprint")
	_smimeSignerCertRelation.CaHash = field.NewString(tableName, "ca_hash")
	_smimeSignerCertRelation.CaFingerprint = field.NewString(tableName, "ca_fingerprint")
	_smimeSignerCertRelation.CreateTime = field.NewTime(tableName, "create_time")
	_smimeSignerCertRelation.CreateBy = field.NewInt32(tableName, "create_by")
	_smimeSignerCertRelation.ChangeTime = field.NewTime(tableName, "change_time")
	_smimeSignerCertRelation.ChangeBy = field.NewInt32(tableName, "change_by")

	_smimeSignerCertRelation.fillFieldMap()

	return _smimeSignerCertRelation
}

type smimeSignerCertRelation struct {
	smimeSignerCertRelationDo

	ALL             field.Asterisk
	ID              field.Int32
	CertHash        field.String
	CertFingerprint field.String
	CaHash          field.String
	CaFingerprint   field.String
	CreateTime      field.Time
	CreateBy        field.Int32
	ChangeTime      field.Time
	ChangeBy        field.Int32

	fieldMap map[string]field.Expr
}

func (s smimeSignerCertRelation) Table(newTableName string) *smimeSignerCertRelation {
	s.smimeSignerCertRelationDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smimeSignerCertRelation) As(alias string) *smimeSignerCertRelation {
	s.smimeSignerCertRelationDo.DO = *(s.smimeSignerCertRelationDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smimeSignerCertRelation) updateTableName(table string) *smimeSignerCertRelation {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.CertHash = field.NewString(table, "cert_hash")
	s.CertFingerprint = field.NewString(table, "cert_fingerprint")
	s.CaHash = field.NewString(table, "ca_hash")
	s.CaFingerprint = field.NewString(table, "ca_fingerprint")
	s.CreateTime = field.NewTime(table, "create_time")
	s.CreateBy = field.NewInt32(table, "create_by")
	s.ChangeTime = field.NewTime(table, "change_time")
	s.ChangeBy = field.NewInt32(table, "change_by")

	s.fillFieldMap()

	return s
}

func (s *smimeSignerCertRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smimeSignerCertRelation) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["id"] = s.ID
	s.fieldMap["cert_hash"] = s.CertHash
	s.fieldMap["cert_fingerprint"] = s.CertFingerprint
	s.fieldMap["ca_hash"] = s.CaHash
	s.fieldMap["ca_fingerprint"] = s.CaFingerprint
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["change_time"] = s.ChangeTime
	s.fieldMap["change_by"] = s.ChangeBy
}

func (s smimeSignerCertRelation) clone(db *gorm.DB) smimeSignerCertRelation {
	s.smimeSignerCertRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smimeSignerCertRelation) replaceDB(db *gorm.DB) smimeSignerCertRelation {
	s.smimeSignerCertRelationDo.ReplaceDB(db)
	return s
}

type smimeSignerCertRelationDo struct{ gen.DO }

type ISmimeSignerCertRelationDo interface {
	gen.SubQuery
	Debug() ISmimeSignerCertRelationDo
	WithContext(ctx context.Context) ISmimeSignerCertRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmimeSignerCertRelationDo
	WriteDB() ISmimeSignerCertRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmimeSignerCertRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmimeSignerCertRelationDo
	Not(conds ...gen.Condition) ISmimeSignerCertRelationDo
	Or(conds ...gen.Condition) ISmimeSignerCertRelationDo
	Select(conds ...field.Expr) ISmimeSignerCertRelationDo
	Where(conds ...gen.Condition) ISmimeSignerCertRelationDo
	Order(conds ...field.Expr) ISmimeSignerCertRelationDo
	Distinct(cols ...field.Expr) ISmimeSignerCertRelationDo
	Omit(cols ...field.Expr) ISmimeSignerCertRelationDo
	Join(table schema.Tabler, on ...field.Expr) ISmimeSignerCertRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmimeSignerCertRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmimeSignerCertRelationDo
	Group(cols ...field.Expr) ISmimeSignerCertRelationDo
	Having(conds ...gen.Condition) ISmimeSignerCertRelationDo
	Limit(limit int) ISmimeSignerCertRelationDo
	Offset(offset int) ISmimeSignerCertRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmimeSignerCertRelationDo
	Unscoped() ISmimeSignerCertRelationDo
	Create(values ...*model.SmimeSignerCertRelation) error
	CreateInBatches(values []*model.SmimeSignerCertRelation, batchSize int) error
	Save(values ...*model.SmimeSignerCertRelation) error
	First() (*model.SmimeSignerCertRelation, error)
	Take() (*model.SmimeSignerCertRelation, error)
	Last() (*model.SmimeSignerCertRelation, error)
	Find() ([]*model.SmimeSignerCertRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmimeSignerCertRelation, err error)
	FindInBatches(result *[]*model.SmimeSignerCertRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmimeSignerCertRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmimeSignerCertRelationDo
	Assign(attrs ...field.AssignExpr) ISmimeSignerCertRelationDo
	Joins(fields ...field.RelationField) ISmimeSignerCertRelationDo
	Preload(fields ...field.RelationField) ISmimeSignerCertRelationDo
	FirstOrInit() (*model.SmimeSignerCertRelation, error)
	FirstOrCreate() (*model.SmimeSignerCertRelation, error)
	FindByPage(offset int, limit int) (result []*model.SmimeSignerCertRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmimeSignerCertRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smimeSignerCertRelationDo) Debug() ISmimeSignerCertRelationDo {
	return s.withDO(s.DO.Debug())
}

func (s smimeSignerCertRelationDo) WithContext(ctx context.Context) ISmimeSignerCertRelationDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smimeSignerCertRelationDo) ReadDB() ISmimeSignerCertRelationDo {
	return s.Clauses(dbresolver.Read)
}

func (s smimeSignerCertRelationDo) WriteDB() ISmimeSignerCertRelationDo {
	return s.Clauses(dbresolver.Write)
}

func (s smimeSignerCertRelationDo) Session(config *gorm.Session) ISmimeSignerCertRelationDo {
	return s.withDO(s.DO.Session(config))
}

func (s smimeSignerCertRelationDo) Clauses(conds ...clause.Expression) ISmimeSignerCertRelationDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smimeSignerCertRelationDo) Returning(value interface{}, columns ...string) ISmimeSignerCertRelationDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smimeSignerCertRelationDo) Not(conds ...gen.Condition) ISmimeSignerCertRelationDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smimeSignerCertRelationDo) Or(conds ...gen.Condition) ISmimeSignerCertRelationDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smimeSignerCertRelationDo) Select(conds ...field.Expr) ISmimeSignerCertRelationDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smimeSignerCertRelationDo) Where(conds ...gen.Condition) ISmimeSignerCertRelationDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smimeSignerCertRelationDo) Order(conds ...field.Expr) ISmimeSignerCertRelationDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smimeSignerCertRelationDo) Distinct(cols ...field.Expr) ISmimeSignerCertRelationDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smimeSignerCertRelationDo) Omit(cols ...field.Expr) ISmimeSignerCertRelationDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smimeSignerCertRelationDo) Join(table schema.Tabler, on ...field.Expr) ISmimeSignerCertRelationDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smimeSignerCertRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmimeSignerCertRelationDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smimeSignerCertRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmimeSignerCertRelationDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smimeSignerCertRelationDo) Group(cols ...field.Expr) ISmimeSignerCertRelationDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smimeSignerCertRelationDo) Having(conds ...gen.Condition) ISmimeSignerCertRelationDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smimeSignerCertRelationDo) Limit(limit int) ISmimeSignerCertRelationDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smimeSignerCertRelationDo) Offset(offset int) ISmimeSignerCertRelationDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smimeSignerCertRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmimeSignerCertRelationDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smimeSignerCertRelationDo) Unscoped() ISmimeSignerCertRelationDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smimeSignerCertRelationDo) Create(values ...*model.SmimeSignerCertRelation) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smimeSignerCertRelationDo) CreateInBatches(values []*model.SmimeSignerCertRelation, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smimeSignerCertRelationDo) Save(values ...*model.SmimeSignerCertRelation) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smimeSignerCertRelationDo) First() (*model.SmimeSignerCertRelation, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmimeSignerCertRelation), nil
	}
}

func (s smimeSignerCertRelationDo) Take() (*model.SmimeSignerCertRelation, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmimeSignerCertRelation), nil
	}
}

func (s smimeSignerCertRelationDo) Last() (*model.SmimeSignerCertRelation, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmimeSignerCertRelation), nil
	}
}

func (s smimeSignerCertRelationDo) Find() ([]*model.SmimeSignerCertRelation, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmimeSignerCertRelation), err
}

func (s smimeSignerCertRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmimeSignerCertRelation, err error) {
	buf := make([]*model.SmimeSignerCertRelation, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smimeSignerCertRelationDo) FindInBatches(result *[]*model.SmimeSignerCertRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smimeSignerCertRelationDo) Attrs(attrs ...field.AssignExpr) ISmimeSignerCertRelationDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smimeSignerCertRelationDo) Assign(attrs ...field.AssignExpr) ISmimeSignerCertRelationDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smimeSignerCertRelationDo) Joins(fields ...field.RelationField) ISmimeSignerCertRelationDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smimeSignerCertRelationDo) Preload(fields ...field.RelationField) ISmimeSignerCertRelationDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smimeSignerCertRelationDo) FirstOrInit() (*model.SmimeSignerCertRelation, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmimeSignerCertRelation), nil
	}
}

func (s smimeSignerCertRelationDo) FirstOrCreate() (*model.SmimeSignerCertRelation, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmimeSignerCertRelation), nil
	}
}

func (s smimeSignerCertRelationDo) FindByPage(offset int, limit int) (result []*model.SmimeSignerCertRelation, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smimeSignerCertRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smimeSignerCertRelationDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smimeSignerCertRelationDo) Delete(models ...*model.SmimeSignerCertRelation) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smimeSignerCertRelationDo) withDO(do gen.Dao) *smimeSignerCertRelationDo {
	s.DO = *do.(*gen.DO)
	return s
}
