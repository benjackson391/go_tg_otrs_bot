// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newCustomerCompany(db *gorm.DB, opts ...gen.DOOption) customerCompany {
	_customerCompany := customerCompany{}

	_customerCompany.customerCompanyDo.UseDB(db, opts...)
	_customerCompany.customerCompanyDo.UseModel(&model.CustomerCompany{})

	tableName := _customerCompany.customerCompanyDo.TableName()
	_customerCompany.ALL = field.NewAsterisk(tableName)
	_customerCompany.CustomerID = field.NewInt32(tableName, "customer_id")
	_customerCompany.Name = field.NewString(tableName, "name")
	_customerCompany.Street = field.NewString(tableName, "street")
	_customerCompany.Zip = field.NewString(tableName, "zip")
	_customerCompany.City = field.NewString(tableName, "city")
	_customerCompany.Country = field.NewString(tableName, "country")
	_customerCompany.URL = field.NewString(tableName, "url")
	_customerCompany.Comments = field.NewString(tableName, "comments")
	_customerCompany.ValidID = field.NewInt32(tableName, "valid_id")
	_customerCompany.CreateTime = field.NewTime(tableName, "create_time")
	_customerCompany.CreateBy = field.NewInt32(tableName, "create_by")
	_customerCompany.ChangeTime = field.NewTime(tableName, "change_time")
	_customerCompany.ChangeBy = field.NewInt32(tableName, "change_by")

	_customerCompany.fillFieldMap()

	return _customerCompany
}

type customerCompany struct {
	customerCompanyDo

	ALL        field.Asterisk
	CustomerID field.Int32
	Name       field.String
	Street     field.String
	Zip        field.String
	City       field.String
	Country    field.String
	URL        field.String
	Comments   field.String
	ValidID    field.Int32
	CreateTime field.Time
	CreateBy   field.Int32
	ChangeTime field.Time
	ChangeBy   field.Int32

	fieldMap map[string]field.Expr
}

func (c customerCompany) Table(newTableName string) *customerCompany {
	c.customerCompanyDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c customerCompany) As(alias string) *customerCompany {
	c.customerCompanyDo.DO = *(c.customerCompanyDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *customerCompany) updateTableName(table string) *customerCompany {
	c.ALL = field.NewAsterisk(table)
	c.CustomerID = field.NewInt32(table, "customer_id")
	c.Name = field.NewString(table, "name")
	c.Street = field.NewString(table, "street")
	c.Zip = field.NewString(table, "zip")
	c.City = field.NewString(table, "city")
	c.Country = field.NewString(table, "country")
	c.URL = field.NewString(table, "url")
	c.Comments = field.NewString(table, "comments")
	c.ValidID = field.NewInt32(table, "valid_id")
	c.CreateTime = field.NewTime(table, "create_time")
	c.CreateBy = field.NewInt32(table, "create_by")
	c.ChangeTime = field.NewTime(table, "change_time")
	c.ChangeBy = field.NewInt32(table, "change_by")

	c.fillFieldMap()

	return c
}

func (c *customerCompany) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *customerCompany) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 13)
	c.fieldMap["customer_id"] = c.CustomerID
	c.fieldMap["name"] = c.Name
	c.fieldMap["street"] = c.Street
	c.fieldMap["zip"] = c.Zip
	c.fieldMap["city"] = c.City
	c.fieldMap["country"] = c.Country
	c.fieldMap["url"] = c.URL
	c.fieldMap["comments"] = c.Comments
	c.fieldMap["valid_id"] = c.ValidID
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["create_by"] = c.CreateBy
	c.fieldMap["change_time"] = c.ChangeTime
	c.fieldMap["change_by"] = c.ChangeBy
}

func (c customerCompany) clone(db *gorm.DB) customerCompany {
	c.customerCompanyDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c customerCompany) replaceDB(db *gorm.DB) customerCompany {
	c.customerCompanyDo.ReplaceDB(db)
	return c
}

type customerCompanyDo struct{ gen.DO }

type ICustomerCompanyDo interface {
	gen.SubQuery
	Debug() ICustomerCompanyDo
	WithContext(ctx context.Context) ICustomerCompanyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICustomerCompanyDo
	WriteDB() ICustomerCompanyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICustomerCompanyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICustomerCompanyDo
	Not(conds ...gen.Condition) ICustomerCompanyDo
	Or(conds ...gen.Condition) ICustomerCompanyDo
	Select(conds ...field.Expr) ICustomerCompanyDo
	Where(conds ...gen.Condition) ICustomerCompanyDo
	Order(conds ...field.Expr) ICustomerCompanyDo
	Distinct(cols ...field.Expr) ICustomerCompanyDo
	Omit(cols ...field.Expr) ICustomerCompanyDo
	Join(table schema.Tabler, on ...field.Expr) ICustomerCompanyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICustomerCompanyDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICustomerCompanyDo
	Group(cols ...field.Expr) ICustomerCompanyDo
	Having(conds ...gen.Condition) ICustomerCompanyDo
	Limit(limit int) ICustomerCompanyDo
	Offset(offset int) ICustomerCompanyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICustomerCompanyDo
	Unscoped() ICustomerCompanyDo
	Create(values ...*model.CustomerCompany) error
	CreateInBatches(values []*model.CustomerCompany, batchSize int) error
	Save(values ...*model.CustomerCompany) error
	First() (*model.CustomerCompany, error)
	Take() (*model.CustomerCompany, error)
	Last() (*model.CustomerCompany, error)
	Find() ([]*model.CustomerCompany, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CustomerCompany, err error)
	FindInBatches(result *[]*model.CustomerCompany, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CustomerCompany) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICustomerCompanyDo
	Assign(attrs ...field.AssignExpr) ICustomerCompanyDo
	Joins(fields ...field.RelationField) ICustomerCompanyDo
	Preload(fields ...field.RelationField) ICustomerCompanyDo
	FirstOrInit() (*model.CustomerCompany, error)
	FirstOrCreate() (*model.CustomerCompany, error)
	FindByPage(offset int, limit int) (result []*model.CustomerCompany, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICustomerCompanyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c customerCompanyDo) Debug() ICustomerCompanyDo {
	return c.withDO(c.DO.Debug())
}

func (c customerCompanyDo) WithContext(ctx context.Context) ICustomerCompanyDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c customerCompanyDo) ReadDB() ICustomerCompanyDo {
	return c.Clauses(dbresolver.Read)
}

func (c customerCompanyDo) WriteDB() ICustomerCompanyDo {
	return c.Clauses(dbresolver.Write)
}

func (c customerCompanyDo) Session(config *gorm.Session) ICustomerCompanyDo {
	return c.withDO(c.DO.Session(config))
}

func (c customerCompanyDo) Clauses(conds ...clause.Expression) ICustomerCompanyDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c customerCompanyDo) Returning(value interface{}, columns ...string) ICustomerCompanyDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c customerCompanyDo) Not(conds ...gen.Condition) ICustomerCompanyDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c customerCompanyDo) Or(conds ...gen.Condition) ICustomerCompanyDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c customerCompanyDo) Select(conds ...field.Expr) ICustomerCompanyDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c customerCompanyDo) Where(conds ...gen.Condition) ICustomerCompanyDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c customerCompanyDo) Order(conds ...field.Expr) ICustomerCompanyDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c customerCompanyDo) Distinct(cols ...field.Expr) ICustomerCompanyDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c customerCompanyDo) Omit(cols ...field.Expr) ICustomerCompanyDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c customerCompanyDo) Join(table schema.Tabler, on ...field.Expr) ICustomerCompanyDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c customerCompanyDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICustomerCompanyDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c customerCompanyDo) RightJoin(table schema.Tabler, on ...field.Expr) ICustomerCompanyDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c customerCompanyDo) Group(cols ...field.Expr) ICustomerCompanyDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c customerCompanyDo) Having(conds ...gen.Condition) ICustomerCompanyDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c customerCompanyDo) Limit(limit int) ICustomerCompanyDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c customerCompanyDo) Offset(offset int) ICustomerCompanyDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c customerCompanyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICustomerCompanyDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c customerCompanyDo) Unscoped() ICustomerCompanyDo {
	return c.withDO(c.DO.Unscoped())
}

func (c customerCompanyDo) Create(values ...*model.CustomerCompany) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c customerCompanyDo) CreateInBatches(values []*model.CustomerCompany, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c customerCompanyDo) Save(values ...*model.CustomerCompany) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c customerCompanyDo) First() (*model.CustomerCompany, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerCompany), nil
	}
}

func (c customerCompanyDo) Take() (*model.CustomerCompany, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerCompany), nil
	}
}

func (c customerCompanyDo) Last() (*model.CustomerCompany, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerCompany), nil
	}
}

func (c customerCompanyDo) Find() ([]*model.CustomerCompany, error) {
	result, err := c.DO.Find()
	return result.([]*model.CustomerCompany), err
}

func (c customerCompanyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CustomerCompany, err error) {
	buf := make([]*model.CustomerCompany, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c customerCompanyDo) FindInBatches(result *[]*model.CustomerCompany, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c customerCompanyDo) Attrs(attrs ...field.AssignExpr) ICustomerCompanyDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c customerCompanyDo) Assign(attrs ...field.AssignExpr) ICustomerCompanyDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c customerCompanyDo) Joins(fields ...field.RelationField) ICustomerCompanyDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c customerCompanyDo) Preload(fields ...field.RelationField) ICustomerCompanyDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c customerCompanyDo) FirstOrInit() (*model.CustomerCompany, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerCompany), nil
	}
}

func (c customerCompanyDo) FirstOrCreate() (*model.CustomerCompany, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerCompany), nil
	}
}

func (c customerCompanyDo) FindByPage(offset int, limit int) (result []*model.CustomerCompany, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c customerCompanyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c customerCompanyDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c customerCompanyDo) Delete(models ...*model.CustomerCompany) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *customerCompanyDo) withDO(do gen.Dao) *customerCompanyDo {
	c.DO = *do.(*gen.DO)
	return c
}
