// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newFaqLanguage(db *gorm.DB, opts ...gen.DOOption) faqLanguage {
	_faqLanguage := faqLanguage{}

	_faqLanguage.faqLanguageDo.UseDB(db, opts...)
	_faqLanguage.faqLanguageDo.UseModel(&model.FaqLanguage{})

	tableName := _faqLanguage.faqLanguageDo.TableName()
	_faqLanguage.ALL = field.NewAsterisk(tableName)
	_faqLanguage.ID = field.NewInt32(tableName, "id")
	_faqLanguage.Name = field.NewString(tableName, "name")

	_faqLanguage.fillFieldMap()

	return _faqLanguage
}

type faqLanguage struct {
	faqLanguageDo

	ALL  field.Asterisk
	ID   field.Int32
	Name field.String

	fieldMap map[string]field.Expr
}

func (f faqLanguage) Table(newTableName string) *faqLanguage {
	f.faqLanguageDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f faqLanguage) As(alias string) *faqLanguage {
	f.faqLanguageDo.DO = *(f.faqLanguageDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *faqLanguage) updateTableName(table string) *faqLanguage {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt32(table, "id")
	f.Name = field.NewString(table, "name")

	f.fillFieldMap()

	return f
}

func (f *faqLanguage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *faqLanguage) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 2)
	f.fieldMap["id"] = f.ID
	f.fieldMap["name"] = f.Name
}

func (f faqLanguage) clone(db *gorm.DB) faqLanguage {
	f.faqLanguageDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f faqLanguage) replaceDB(db *gorm.DB) faqLanguage {
	f.faqLanguageDo.ReplaceDB(db)
	return f
}

type faqLanguageDo struct{ gen.DO }

type IFaqLanguageDo interface {
	gen.SubQuery
	Debug() IFaqLanguageDo
	WithContext(ctx context.Context) IFaqLanguageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFaqLanguageDo
	WriteDB() IFaqLanguageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFaqLanguageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFaqLanguageDo
	Not(conds ...gen.Condition) IFaqLanguageDo
	Or(conds ...gen.Condition) IFaqLanguageDo
	Select(conds ...field.Expr) IFaqLanguageDo
	Where(conds ...gen.Condition) IFaqLanguageDo
	Order(conds ...field.Expr) IFaqLanguageDo
	Distinct(cols ...field.Expr) IFaqLanguageDo
	Omit(cols ...field.Expr) IFaqLanguageDo
	Join(table schema.Tabler, on ...field.Expr) IFaqLanguageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFaqLanguageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFaqLanguageDo
	Group(cols ...field.Expr) IFaqLanguageDo
	Having(conds ...gen.Condition) IFaqLanguageDo
	Limit(limit int) IFaqLanguageDo
	Offset(offset int) IFaqLanguageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFaqLanguageDo
	Unscoped() IFaqLanguageDo
	Create(values ...*model.FaqLanguage) error
	CreateInBatches(values []*model.FaqLanguage, batchSize int) error
	Save(values ...*model.FaqLanguage) error
	First() (*model.FaqLanguage, error)
	Take() (*model.FaqLanguage, error)
	Last() (*model.FaqLanguage, error)
	Find() ([]*model.FaqLanguage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FaqLanguage, err error)
	FindInBatches(result *[]*model.FaqLanguage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FaqLanguage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFaqLanguageDo
	Assign(attrs ...field.AssignExpr) IFaqLanguageDo
	Joins(fields ...field.RelationField) IFaqLanguageDo
	Preload(fields ...field.RelationField) IFaqLanguageDo
	FirstOrInit() (*model.FaqLanguage, error)
	FirstOrCreate() (*model.FaqLanguage, error)
	FindByPage(offset int, limit int) (result []*model.FaqLanguage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFaqLanguageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f faqLanguageDo) Debug() IFaqLanguageDo {
	return f.withDO(f.DO.Debug())
}

func (f faqLanguageDo) WithContext(ctx context.Context) IFaqLanguageDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f faqLanguageDo) ReadDB() IFaqLanguageDo {
	return f.Clauses(dbresolver.Read)
}

func (f faqLanguageDo) WriteDB() IFaqLanguageDo {
	return f.Clauses(dbresolver.Write)
}

func (f faqLanguageDo) Session(config *gorm.Session) IFaqLanguageDo {
	return f.withDO(f.DO.Session(config))
}

func (f faqLanguageDo) Clauses(conds ...clause.Expression) IFaqLanguageDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f faqLanguageDo) Returning(value interface{}, columns ...string) IFaqLanguageDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f faqLanguageDo) Not(conds ...gen.Condition) IFaqLanguageDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f faqLanguageDo) Or(conds ...gen.Condition) IFaqLanguageDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f faqLanguageDo) Select(conds ...field.Expr) IFaqLanguageDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f faqLanguageDo) Where(conds ...gen.Condition) IFaqLanguageDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f faqLanguageDo) Order(conds ...field.Expr) IFaqLanguageDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f faqLanguageDo) Distinct(cols ...field.Expr) IFaqLanguageDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f faqLanguageDo) Omit(cols ...field.Expr) IFaqLanguageDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f faqLanguageDo) Join(table schema.Tabler, on ...field.Expr) IFaqLanguageDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f faqLanguageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFaqLanguageDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f faqLanguageDo) RightJoin(table schema.Tabler, on ...field.Expr) IFaqLanguageDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f faqLanguageDo) Group(cols ...field.Expr) IFaqLanguageDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f faqLanguageDo) Having(conds ...gen.Condition) IFaqLanguageDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f faqLanguageDo) Limit(limit int) IFaqLanguageDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f faqLanguageDo) Offset(offset int) IFaqLanguageDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f faqLanguageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFaqLanguageDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f faqLanguageDo) Unscoped() IFaqLanguageDo {
	return f.withDO(f.DO.Unscoped())
}

func (f faqLanguageDo) Create(values ...*model.FaqLanguage) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f faqLanguageDo) CreateInBatches(values []*model.FaqLanguage, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f faqLanguageDo) Save(values ...*model.FaqLanguage) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f faqLanguageDo) First() (*model.FaqLanguage, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqLanguage), nil
	}
}

func (f faqLanguageDo) Take() (*model.FaqLanguage, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqLanguage), nil
	}
}

func (f faqLanguageDo) Last() (*model.FaqLanguage, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqLanguage), nil
	}
}

func (f faqLanguageDo) Find() ([]*model.FaqLanguage, error) {
	result, err := f.DO.Find()
	return result.([]*model.FaqLanguage), err
}

func (f faqLanguageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FaqLanguage, err error) {
	buf := make([]*model.FaqLanguage, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f faqLanguageDo) FindInBatches(result *[]*model.FaqLanguage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f faqLanguageDo) Attrs(attrs ...field.AssignExpr) IFaqLanguageDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f faqLanguageDo) Assign(attrs ...field.AssignExpr) IFaqLanguageDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f faqLanguageDo) Joins(fields ...field.RelationField) IFaqLanguageDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f faqLanguageDo) Preload(fields ...field.RelationField) IFaqLanguageDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f faqLanguageDo) FirstOrInit() (*model.FaqLanguage, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqLanguage), nil
	}
}

func (f faqLanguageDo) FirstOrCreate() (*model.FaqLanguage, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqLanguage), nil
	}
}

func (f faqLanguageDo) FindByPage(offset int, limit int) (result []*model.FaqLanguage, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f faqLanguageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f faqLanguageDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f faqLanguageDo) Delete(models ...*model.FaqLanguage) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *faqLanguageDo) withDO(do gen.Dao) *faqLanguageDo {
	f.DO = *do.(*gen.DO)
	return f
}
