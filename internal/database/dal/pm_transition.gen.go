// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newPmTransition(db *gorm.DB, opts ...gen.DOOption) pmTransition {
	_pmTransition := pmTransition{}

	_pmTransition.pmTransitionDo.UseDB(db, opts...)
	_pmTransition.pmTransitionDo.UseModel(&model.PmTransition{})

	tableName := _pmTransition.pmTransitionDo.TableName()
	_pmTransition.ALL = field.NewAsterisk(tableName)
	_pmTransition.ID = field.NewInt32(tableName, "id")
	_pmTransition.EntityID = field.NewString(tableName, "entity_id")
	_pmTransition.Name = field.NewString(tableName, "name")
	_pmTransition.Config = field.NewBytes(tableName, "config")
	_pmTransition.CreateTime = field.NewTime(tableName, "create_time")
	_pmTransition.CreateBy = field.NewInt32(tableName, "create_by")
	_pmTransition.ChangeTime = field.NewTime(tableName, "change_time")
	_pmTransition.ChangeBy = field.NewInt32(tableName, "change_by")

	_pmTransition.fillFieldMap()

	return _pmTransition
}

type pmTransition struct {
	pmTransitionDo

	ALL        field.Asterisk
	ID         field.Int32
	EntityID   field.String
	Name       field.String
	Config     field.Bytes
	CreateTime field.Time
	CreateBy   field.Int32
	ChangeTime field.Time
	ChangeBy   field.Int32

	fieldMap map[string]field.Expr
}

func (p pmTransition) Table(newTableName string) *pmTransition {
	p.pmTransitionDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmTransition) As(alias string) *pmTransition {
	p.pmTransitionDo.DO = *(p.pmTransitionDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmTransition) updateTableName(table string) *pmTransition {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.EntityID = field.NewString(table, "entity_id")
	p.Name = field.NewString(table, "name")
	p.Config = field.NewBytes(table, "config")
	p.CreateTime = field.NewTime(table, "create_time")
	p.CreateBy = field.NewInt32(table, "create_by")
	p.ChangeTime = field.NewTime(table, "change_time")
	p.ChangeBy = field.NewInt32(table, "change_by")

	p.fillFieldMap()

	return p
}

func (p *pmTransition) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmTransition) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.ID
	p.fieldMap["entity_id"] = p.EntityID
	p.fieldMap["name"] = p.Name
	p.fieldMap["config"] = p.Config
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["create_by"] = p.CreateBy
	p.fieldMap["change_time"] = p.ChangeTime
	p.fieldMap["change_by"] = p.ChangeBy
}

func (p pmTransition) clone(db *gorm.DB) pmTransition {
	p.pmTransitionDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmTransition) replaceDB(db *gorm.DB) pmTransition {
	p.pmTransitionDo.ReplaceDB(db)
	return p
}

type pmTransitionDo struct{ gen.DO }

type IPmTransitionDo interface {
	gen.SubQuery
	Debug() IPmTransitionDo
	WithContext(ctx context.Context) IPmTransitionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPmTransitionDo
	WriteDB() IPmTransitionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPmTransitionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPmTransitionDo
	Not(conds ...gen.Condition) IPmTransitionDo
	Or(conds ...gen.Condition) IPmTransitionDo
	Select(conds ...field.Expr) IPmTransitionDo
	Where(conds ...gen.Condition) IPmTransitionDo
	Order(conds ...field.Expr) IPmTransitionDo
	Distinct(cols ...field.Expr) IPmTransitionDo
	Omit(cols ...field.Expr) IPmTransitionDo
	Join(table schema.Tabler, on ...field.Expr) IPmTransitionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPmTransitionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPmTransitionDo
	Group(cols ...field.Expr) IPmTransitionDo
	Having(conds ...gen.Condition) IPmTransitionDo
	Limit(limit int) IPmTransitionDo
	Offset(offset int) IPmTransitionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPmTransitionDo
	Unscoped() IPmTransitionDo
	Create(values ...*model.PmTransition) error
	CreateInBatches(values []*model.PmTransition, batchSize int) error
	Save(values ...*model.PmTransition) error
	First() (*model.PmTransition, error)
	Take() (*model.PmTransition, error)
	Last() (*model.PmTransition, error)
	Find() ([]*model.PmTransition, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmTransition, err error)
	FindInBatches(result *[]*model.PmTransition, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PmTransition) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPmTransitionDo
	Assign(attrs ...field.AssignExpr) IPmTransitionDo
	Joins(fields ...field.RelationField) IPmTransitionDo
	Preload(fields ...field.RelationField) IPmTransitionDo
	FirstOrInit() (*model.PmTransition, error)
	FirstOrCreate() (*model.PmTransition, error)
	FindByPage(offset int, limit int) (result []*model.PmTransition, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPmTransitionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pmTransitionDo) Debug() IPmTransitionDo {
	return p.withDO(p.DO.Debug())
}

func (p pmTransitionDo) WithContext(ctx context.Context) IPmTransitionDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmTransitionDo) ReadDB() IPmTransitionDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmTransitionDo) WriteDB() IPmTransitionDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmTransitionDo) Session(config *gorm.Session) IPmTransitionDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmTransitionDo) Clauses(conds ...clause.Expression) IPmTransitionDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmTransitionDo) Returning(value interface{}, columns ...string) IPmTransitionDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmTransitionDo) Not(conds ...gen.Condition) IPmTransitionDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmTransitionDo) Or(conds ...gen.Condition) IPmTransitionDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmTransitionDo) Select(conds ...field.Expr) IPmTransitionDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmTransitionDo) Where(conds ...gen.Condition) IPmTransitionDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmTransitionDo) Order(conds ...field.Expr) IPmTransitionDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmTransitionDo) Distinct(cols ...field.Expr) IPmTransitionDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmTransitionDo) Omit(cols ...field.Expr) IPmTransitionDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmTransitionDo) Join(table schema.Tabler, on ...field.Expr) IPmTransitionDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmTransitionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPmTransitionDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmTransitionDo) RightJoin(table schema.Tabler, on ...field.Expr) IPmTransitionDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmTransitionDo) Group(cols ...field.Expr) IPmTransitionDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmTransitionDo) Having(conds ...gen.Condition) IPmTransitionDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmTransitionDo) Limit(limit int) IPmTransitionDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmTransitionDo) Offset(offset int) IPmTransitionDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmTransitionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPmTransitionDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmTransitionDo) Unscoped() IPmTransitionDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmTransitionDo) Create(values ...*model.PmTransition) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmTransitionDo) CreateInBatches(values []*model.PmTransition, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmTransitionDo) Save(values ...*model.PmTransition) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmTransitionDo) First() (*model.PmTransition, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmTransition), nil
	}
}

func (p pmTransitionDo) Take() (*model.PmTransition, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmTransition), nil
	}
}

func (p pmTransitionDo) Last() (*model.PmTransition, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmTransition), nil
	}
}

func (p pmTransitionDo) Find() ([]*model.PmTransition, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmTransition), err
}

func (p pmTransitionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmTransition, err error) {
	buf := make([]*model.PmTransition, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmTransitionDo) FindInBatches(result *[]*model.PmTransition, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmTransitionDo) Attrs(attrs ...field.AssignExpr) IPmTransitionDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmTransitionDo) Assign(attrs ...field.AssignExpr) IPmTransitionDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmTransitionDo) Joins(fields ...field.RelationField) IPmTransitionDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmTransitionDo) Preload(fields ...field.RelationField) IPmTransitionDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmTransitionDo) FirstOrInit() (*model.PmTransition, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmTransition), nil
	}
}

func (p pmTransitionDo) FirstOrCreate() (*model.PmTransition, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmTransition), nil
	}
}

func (p pmTransitionDo) FindByPage(offset int, limit int) (result []*model.PmTransition, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmTransitionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmTransitionDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmTransitionDo) Delete(models ...*model.PmTransition) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmTransitionDo) withDO(do gen.Dao) *pmTransitionDo {
	p.DO = *do.(*gen.DO)
	return p
}
