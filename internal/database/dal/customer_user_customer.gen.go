// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newCustomerUserCustomer(db *gorm.DB, opts ...gen.DOOption) customerUserCustomer {
	_customerUserCustomer := customerUserCustomer{}

	_customerUserCustomer.customerUserCustomerDo.UseDB(db, opts...)
	_customerUserCustomer.customerUserCustomerDo.UseModel(&model.CustomerUserCustomer{})

	tableName := _customerUserCustomer.customerUserCustomerDo.TableName()
	_customerUserCustomer.ALL = field.NewAsterisk(tableName)
	_customerUserCustomer.UserID = field.NewString(tableName, "user_id")
	_customerUserCustomer.CustomerID = field.NewString(tableName, "customer_id")
	_customerUserCustomer.CreateTime = field.NewTime(tableName, "create_time")
	_customerUserCustomer.CreateBy = field.NewInt32(tableName, "create_by")
	_customerUserCustomer.ChangeTime = field.NewTime(tableName, "change_time")
	_customerUserCustomer.ChangeBy = field.NewInt32(tableName, "change_by")

	_customerUserCustomer.fillFieldMap()

	return _customerUserCustomer
}

type customerUserCustomer struct {
	customerUserCustomerDo

	ALL        field.Asterisk
	UserID     field.String
	CustomerID field.String
	CreateTime field.Time
	CreateBy   field.Int32
	ChangeTime field.Time
	ChangeBy   field.Int32

	fieldMap map[string]field.Expr
}

func (c customerUserCustomer) Table(newTableName string) *customerUserCustomer {
	c.customerUserCustomerDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c customerUserCustomer) As(alias string) *customerUserCustomer {
	c.customerUserCustomerDo.DO = *(c.customerUserCustomerDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *customerUserCustomer) updateTableName(table string) *customerUserCustomer {
	c.ALL = field.NewAsterisk(table)
	c.UserID = field.NewString(table, "user_id")
	c.CustomerID = field.NewString(table, "customer_id")
	c.CreateTime = field.NewTime(table, "create_time")
	c.CreateBy = field.NewInt32(table, "create_by")
	c.ChangeTime = field.NewTime(table, "change_time")
	c.ChangeBy = field.NewInt32(table, "change_by")

	c.fillFieldMap()

	return c
}

func (c *customerUserCustomer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *customerUserCustomer) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["user_id"] = c.UserID
	c.fieldMap["customer_id"] = c.CustomerID
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["create_by"] = c.CreateBy
	c.fieldMap["change_time"] = c.ChangeTime
	c.fieldMap["change_by"] = c.ChangeBy
}

func (c customerUserCustomer) clone(db *gorm.DB) customerUserCustomer {
	c.customerUserCustomerDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c customerUserCustomer) replaceDB(db *gorm.DB) customerUserCustomer {
	c.customerUserCustomerDo.ReplaceDB(db)
	return c
}

type customerUserCustomerDo struct{ gen.DO }

type ICustomerUserCustomerDo interface {
	gen.SubQuery
	Debug() ICustomerUserCustomerDo
	WithContext(ctx context.Context) ICustomerUserCustomerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICustomerUserCustomerDo
	WriteDB() ICustomerUserCustomerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICustomerUserCustomerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICustomerUserCustomerDo
	Not(conds ...gen.Condition) ICustomerUserCustomerDo
	Or(conds ...gen.Condition) ICustomerUserCustomerDo
	Select(conds ...field.Expr) ICustomerUserCustomerDo
	Where(conds ...gen.Condition) ICustomerUserCustomerDo
	Order(conds ...field.Expr) ICustomerUserCustomerDo
	Distinct(cols ...field.Expr) ICustomerUserCustomerDo
	Omit(cols ...field.Expr) ICustomerUserCustomerDo
	Join(table schema.Tabler, on ...field.Expr) ICustomerUserCustomerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICustomerUserCustomerDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICustomerUserCustomerDo
	Group(cols ...field.Expr) ICustomerUserCustomerDo
	Having(conds ...gen.Condition) ICustomerUserCustomerDo
	Limit(limit int) ICustomerUserCustomerDo
	Offset(offset int) ICustomerUserCustomerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICustomerUserCustomerDo
	Unscoped() ICustomerUserCustomerDo
	Create(values ...*model.CustomerUserCustomer) error
	CreateInBatches(values []*model.CustomerUserCustomer, batchSize int) error
	Save(values ...*model.CustomerUserCustomer) error
	First() (*model.CustomerUserCustomer, error)
	Take() (*model.CustomerUserCustomer, error)
	Last() (*model.CustomerUserCustomer, error)
	Find() ([]*model.CustomerUserCustomer, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CustomerUserCustomer, err error)
	FindInBatches(result *[]*model.CustomerUserCustomer, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CustomerUserCustomer) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICustomerUserCustomerDo
	Assign(attrs ...field.AssignExpr) ICustomerUserCustomerDo
	Joins(fields ...field.RelationField) ICustomerUserCustomerDo
	Preload(fields ...field.RelationField) ICustomerUserCustomerDo
	FirstOrInit() (*model.CustomerUserCustomer, error)
	FirstOrCreate() (*model.CustomerUserCustomer, error)
	FindByPage(offset int, limit int) (result []*model.CustomerUserCustomer, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICustomerUserCustomerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c customerUserCustomerDo) Debug() ICustomerUserCustomerDo {
	return c.withDO(c.DO.Debug())
}

func (c customerUserCustomerDo) WithContext(ctx context.Context) ICustomerUserCustomerDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c customerUserCustomerDo) ReadDB() ICustomerUserCustomerDo {
	return c.Clauses(dbresolver.Read)
}

func (c customerUserCustomerDo) WriteDB() ICustomerUserCustomerDo {
	return c.Clauses(dbresolver.Write)
}

func (c customerUserCustomerDo) Session(config *gorm.Session) ICustomerUserCustomerDo {
	return c.withDO(c.DO.Session(config))
}

func (c customerUserCustomerDo) Clauses(conds ...clause.Expression) ICustomerUserCustomerDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c customerUserCustomerDo) Returning(value interface{}, columns ...string) ICustomerUserCustomerDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c customerUserCustomerDo) Not(conds ...gen.Condition) ICustomerUserCustomerDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c customerUserCustomerDo) Or(conds ...gen.Condition) ICustomerUserCustomerDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c customerUserCustomerDo) Select(conds ...field.Expr) ICustomerUserCustomerDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c customerUserCustomerDo) Where(conds ...gen.Condition) ICustomerUserCustomerDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c customerUserCustomerDo) Order(conds ...field.Expr) ICustomerUserCustomerDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c customerUserCustomerDo) Distinct(cols ...field.Expr) ICustomerUserCustomerDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c customerUserCustomerDo) Omit(cols ...field.Expr) ICustomerUserCustomerDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c customerUserCustomerDo) Join(table schema.Tabler, on ...field.Expr) ICustomerUserCustomerDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c customerUserCustomerDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICustomerUserCustomerDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c customerUserCustomerDo) RightJoin(table schema.Tabler, on ...field.Expr) ICustomerUserCustomerDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c customerUserCustomerDo) Group(cols ...field.Expr) ICustomerUserCustomerDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c customerUserCustomerDo) Having(conds ...gen.Condition) ICustomerUserCustomerDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c customerUserCustomerDo) Limit(limit int) ICustomerUserCustomerDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c customerUserCustomerDo) Offset(offset int) ICustomerUserCustomerDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c customerUserCustomerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICustomerUserCustomerDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c customerUserCustomerDo) Unscoped() ICustomerUserCustomerDo {
	return c.withDO(c.DO.Unscoped())
}

func (c customerUserCustomerDo) Create(values ...*model.CustomerUserCustomer) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c customerUserCustomerDo) CreateInBatches(values []*model.CustomerUserCustomer, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c customerUserCustomerDo) Save(values ...*model.CustomerUserCustomer) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c customerUserCustomerDo) First() (*model.CustomerUserCustomer, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerUserCustomer), nil
	}
}

func (c customerUserCustomerDo) Take() (*model.CustomerUserCustomer, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerUserCustomer), nil
	}
}

func (c customerUserCustomerDo) Last() (*model.CustomerUserCustomer, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerUserCustomer), nil
	}
}

func (c customerUserCustomerDo) Find() ([]*model.CustomerUserCustomer, error) {
	result, err := c.DO.Find()
	return result.([]*model.CustomerUserCustomer), err
}

func (c customerUserCustomerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CustomerUserCustomer, err error) {
	buf := make([]*model.CustomerUserCustomer, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c customerUserCustomerDo) FindInBatches(result *[]*model.CustomerUserCustomer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c customerUserCustomerDo) Attrs(attrs ...field.AssignExpr) ICustomerUserCustomerDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c customerUserCustomerDo) Assign(attrs ...field.AssignExpr) ICustomerUserCustomerDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c customerUserCustomerDo) Joins(fields ...field.RelationField) ICustomerUserCustomerDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c customerUserCustomerDo) Preload(fields ...field.RelationField) ICustomerUserCustomerDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c customerUserCustomerDo) FirstOrInit() (*model.CustomerUserCustomer, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerUserCustomer), nil
	}
}

func (c customerUserCustomerDo) FirstOrCreate() (*model.CustomerUserCustomer, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerUserCustomer), nil
	}
}

func (c customerUserCustomerDo) FindByPage(offset int, limit int) (result []*model.CustomerUserCustomer, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c customerUserCustomerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c customerUserCustomerDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c customerUserCustomerDo) Delete(models ...*model.CustomerUserCustomer) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *customerUserCustomerDo) withDO(do gen.Dao) *customerUserCustomerDo {
	c.DO = *do.(*gen.DO)
	return c
}
