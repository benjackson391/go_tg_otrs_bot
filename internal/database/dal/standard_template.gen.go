// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newStandardTemplate(db *gorm.DB, opts ...gen.DOOption) standardTemplate {
	_standardTemplate := standardTemplate{}

	_standardTemplate.standardTemplateDo.UseDB(db, opts...)
	_standardTemplate.standardTemplateDo.UseModel(&model.StandardTemplate{})

	tableName := _standardTemplate.standardTemplateDo.TableName()
	_standardTemplate.ALL = field.NewAsterisk(tableName)
	_standardTemplate.ID = field.NewInt32(tableName, "id")
	_standardTemplate.Name = field.NewString(tableName, "name")
	_standardTemplate.Text = field.NewString(tableName, "text")
	_standardTemplate.ContentType = field.NewString(tableName, "content_type")
	_standardTemplate.TemplateType = field.NewString(tableName, "template_type")
	_standardTemplate.Comments = field.NewString(tableName, "comments")
	_standardTemplate.ValidID = field.NewInt32(tableName, "valid_id")
	_standardTemplate.CreateTime = field.NewTime(tableName, "create_time")
	_standardTemplate.CreateBy = field.NewInt32(tableName, "create_by")
	_standardTemplate.ChangeTime = field.NewTime(tableName, "change_time")
	_standardTemplate.ChangeBy = field.NewInt32(tableName, "change_by")

	_standardTemplate.fillFieldMap()

	return _standardTemplate
}

type standardTemplate struct {
	standardTemplateDo

	ALL          field.Asterisk
	ID           field.Int32
	Name         field.String
	Text         field.String
	ContentType  field.String
	TemplateType field.String
	Comments     field.String
	ValidID      field.Int32
	CreateTime   field.Time
	CreateBy     field.Int32
	ChangeTime   field.Time
	ChangeBy     field.Int32

	fieldMap map[string]field.Expr
}

func (s standardTemplate) Table(newTableName string) *standardTemplate {
	s.standardTemplateDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s standardTemplate) As(alias string) *standardTemplate {
	s.standardTemplateDo.DO = *(s.standardTemplateDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *standardTemplate) updateTableName(table string) *standardTemplate {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.Name = field.NewString(table, "name")
	s.Text = field.NewString(table, "text")
	s.ContentType = field.NewString(table, "content_type")
	s.TemplateType = field.NewString(table, "template_type")
	s.Comments = field.NewString(table, "comments")
	s.ValidID = field.NewInt32(table, "valid_id")
	s.CreateTime = field.NewTime(table, "create_time")
	s.CreateBy = field.NewInt32(table, "create_by")
	s.ChangeTime = field.NewTime(table, "change_time")
	s.ChangeBy = field.NewInt32(table, "change_by")

	s.fillFieldMap()

	return s
}

func (s *standardTemplate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *standardTemplate) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["text"] = s.Text
	s.fieldMap["content_type"] = s.ContentType
	s.fieldMap["template_type"] = s.TemplateType
	s.fieldMap["comments"] = s.Comments
	s.fieldMap["valid_id"] = s.ValidID
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["change_time"] = s.ChangeTime
	s.fieldMap["change_by"] = s.ChangeBy
}

func (s standardTemplate) clone(db *gorm.DB) standardTemplate {
	s.standardTemplateDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s standardTemplate) replaceDB(db *gorm.DB) standardTemplate {
	s.standardTemplateDo.ReplaceDB(db)
	return s
}

type standardTemplateDo struct{ gen.DO }

type IStandardTemplateDo interface {
	gen.SubQuery
	Debug() IStandardTemplateDo
	WithContext(ctx context.Context) IStandardTemplateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStandardTemplateDo
	WriteDB() IStandardTemplateDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStandardTemplateDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStandardTemplateDo
	Not(conds ...gen.Condition) IStandardTemplateDo
	Or(conds ...gen.Condition) IStandardTemplateDo
	Select(conds ...field.Expr) IStandardTemplateDo
	Where(conds ...gen.Condition) IStandardTemplateDo
	Order(conds ...field.Expr) IStandardTemplateDo
	Distinct(cols ...field.Expr) IStandardTemplateDo
	Omit(cols ...field.Expr) IStandardTemplateDo
	Join(table schema.Tabler, on ...field.Expr) IStandardTemplateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStandardTemplateDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStandardTemplateDo
	Group(cols ...field.Expr) IStandardTemplateDo
	Having(conds ...gen.Condition) IStandardTemplateDo
	Limit(limit int) IStandardTemplateDo
	Offset(offset int) IStandardTemplateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStandardTemplateDo
	Unscoped() IStandardTemplateDo
	Create(values ...*model.StandardTemplate) error
	CreateInBatches(values []*model.StandardTemplate, batchSize int) error
	Save(values ...*model.StandardTemplate) error
	First() (*model.StandardTemplate, error)
	Take() (*model.StandardTemplate, error)
	Last() (*model.StandardTemplate, error)
	Find() ([]*model.StandardTemplate, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StandardTemplate, err error)
	FindInBatches(result *[]*model.StandardTemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.StandardTemplate) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStandardTemplateDo
	Assign(attrs ...field.AssignExpr) IStandardTemplateDo
	Joins(fields ...field.RelationField) IStandardTemplateDo
	Preload(fields ...field.RelationField) IStandardTemplateDo
	FirstOrInit() (*model.StandardTemplate, error)
	FirstOrCreate() (*model.StandardTemplate, error)
	FindByPage(offset int, limit int) (result []*model.StandardTemplate, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStandardTemplateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s standardTemplateDo) Debug() IStandardTemplateDo {
	return s.withDO(s.DO.Debug())
}

func (s standardTemplateDo) WithContext(ctx context.Context) IStandardTemplateDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s standardTemplateDo) ReadDB() IStandardTemplateDo {
	return s.Clauses(dbresolver.Read)
}

func (s standardTemplateDo) WriteDB() IStandardTemplateDo {
	return s.Clauses(dbresolver.Write)
}

func (s standardTemplateDo) Session(config *gorm.Session) IStandardTemplateDo {
	return s.withDO(s.DO.Session(config))
}

func (s standardTemplateDo) Clauses(conds ...clause.Expression) IStandardTemplateDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s standardTemplateDo) Returning(value interface{}, columns ...string) IStandardTemplateDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s standardTemplateDo) Not(conds ...gen.Condition) IStandardTemplateDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s standardTemplateDo) Or(conds ...gen.Condition) IStandardTemplateDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s standardTemplateDo) Select(conds ...field.Expr) IStandardTemplateDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s standardTemplateDo) Where(conds ...gen.Condition) IStandardTemplateDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s standardTemplateDo) Order(conds ...field.Expr) IStandardTemplateDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s standardTemplateDo) Distinct(cols ...field.Expr) IStandardTemplateDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s standardTemplateDo) Omit(cols ...field.Expr) IStandardTemplateDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s standardTemplateDo) Join(table schema.Tabler, on ...field.Expr) IStandardTemplateDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s standardTemplateDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStandardTemplateDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s standardTemplateDo) RightJoin(table schema.Tabler, on ...field.Expr) IStandardTemplateDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s standardTemplateDo) Group(cols ...field.Expr) IStandardTemplateDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s standardTemplateDo) Having(conds ...gen.Condition) IStandardTemplateDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s standardTemplateDo) Limit(limit int) IStandardTemplateDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s standardTemplateDo) Offset(offset int) IStandardTemplateDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s standardTemplateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStandardTemplateDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s standardTemplateDo) Unscoped() IStandardTemplateDo {
	return s.withDO(s.DO.Unscoped())
}

func (s standardTemplateDo) Create(values ...*model.StandardTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s standardTemplateDo) CreateInBatches(values []*model.StandardTemplate, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s standardTemplateDo) Save(values ...*model.StandardTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s standardTemplateDo) First() (*model.StandardTemplate, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StandardTemplate), nil
	}
}

func (s standardTemplateDo) Take() (*model.StandardTemplate, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StandardTemplate), nil
	}
}

func (s standardTemplateDo) Last() (*model.StandardTemplate, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StandardTemplate), nil
	}
}

func (s standardTemplateDo) Find() ([]*model.StandardTemplate, error) {
	result, err := s.DO.Find()
	return result.([]*model.StandardTemplate), err
}

func (s standardTemplateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StandardTemplate, err error) {
	buf := make([]*model.StandardTemplate, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s standardTemplateDo) FindInBatches(result *[]*model.StandardTemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s standardTemplateDo) Attrs(attrs ...field.AssignExpr) IStandardTemplateDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s standardTemplateDo) Assign(attrs ...field.AssignExpr) IStandardTemplateDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s standardTemplateDo) Joins(fields ...field.RelationField) IStandardTemplateDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s standardTemplateDo) Preload(fields ...field.RelationField) IStandardTemplateDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s standardTemplateDo) FirstOrInit() (*model.StandardTemplate, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StandardTemplate), nil
	}
}

func (s standardTemplateDo) FirstOrCreate() (*model.StandardTemplate, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StandardTemplate), nil
	}
}

func (s standardTemplateDo) FindByPage(offset int, limit int) (result []*model.StandardTemplate, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s standardTemplateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s standardTemplateDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s standardTemplateDo) Delete(models ...*model.StandardTemplate) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *standardTemplateDo) withDO(do gen.Dao) *standardTemplateDo {
	s.DO = *do.(*gen.DO)
	return s
}
