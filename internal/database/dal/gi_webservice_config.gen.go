// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newGiWebserviceConfig(db *gorm.DB, opts ...gen.DOOption) giWebserviceConfig {
	_giWebserviceConfig := giWebserviceConfig{}

	_giWebserviceConfig.giWebserviceConfigDo.UseDB(db, opts...)
	_giWebserviceConfig.giWebserviceConfigDo.UseModel(&model.GiWebserviceConfig{})

	tableName := _giWebserviceConfig.giWebserviceConfigDo.TableName()
	_giWebserviceConfig.ALL = field.NewAsterisk(tableName)
	_giWebserviceConfig.ID = field.NewInt32(tableName, "id")
	_giWebserviceConfig.Name = field.NewString(tableName, "name")
	_giWebserviceConfig.Config = field.NewBytes(tableName, "config")
	_giWebserviceConfig.ValidID = field.NewInt32(tableName, "valid_id")
	_giWebserviceConfig.CreateTime = field.NewTime(tableName, "create_time")
	_giWebserviceConfig.CreateBy = field.NewInt32(tableName, "create_by")
	_giWebserviceConfig.ChangeTime = field.NewTime(tableName, "change_time")
	_giWebserviceConfig.ChangeBy = field.NewInt32(tableName, "change_by")

	_giWebserviceConfig.fillFieldMap()

	return _giWebserviceConfig
}

type giWebserviceConfig struct {
	giWebserviceConfigDo

	ALL        field.Asterisk
	ID         field.Int32
	Name       field.String
	Config     field.Bytes
	ValidID    field.Int32
	CreateTime field.Time
	CreateBy   field.Int32
	ChangeTime field.Time
	ChangeBy   field.Int32

	fieldMap map[string]field.Expr
}

func (g giWebserviceConfig) Table(newTableName string) *giWebserviceConfig {
	g.giWebserviceConfigDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g giWebserviceConfig) As(alias string) *giWebserviceConfig {
	g.giWebserviceConfigDo.DO = *(g.giWebserviceConfigDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *giWebserviceConfig) updateTableName(table string) *giWebserviceConfig {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt32(table, "id")
	g.Name = field.NewString(table, "name")
	g.Config = field.NewBytes(table, "config")
	g.ValidID = field.NewInt32(table, "valid_id")
	g.CreateTime = field.NewTime(table, "create_time")
	g.CreateBy = field.NewInt32(table, "create_by")
	g.ChangeTime = field.NewTime(table, "change_time")
	g.ChangeBy = field.NewInt32(table, "change_by")

	g.fillFieldMap()

	return g
}

func (g *giWebserviceConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *giWebserviceConfig) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 8)
	g.fieldMap["id"] = g.ID
	g.fieldMap["name"] = g.Name
	g.fieldMap["config"] = g.Config
	g.fieldMap["valid_id"] = g.ValidID
	g.fieldMap["create_time"] = g.CreateTime
	g.fieldMap["create_by"] = g.CreateBy
	g.fieldMap["change_time"] = g.ChangeTime
	g.fieldMap["change_by"] = g.ChangeBy
}

func (g giWebserviceConfig) clone(db *gorm.DB) giWebserviceConfig {
	g.giWebserviceConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g giWebserviceConfig) replaceDB(db *gorm.DB) giWebserviceConfig {
	g.giWebserviceConfigDo.ReplaceDB(db)
	return g
}

type giWebserviceConfigDo struct{ gen.DO }

type IGiWebserviceConfigDo interface {
	gen.SubQuery
	Debug() IGiWebserviceConfigDo
	WithContext(ctx context.Context) IGiWebserviceConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGiWebserviceConfigDo
	WriteDB() IGiWebserviceConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGiWebserviceConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGiWebserviceConfigDo
	Not(conds ...gen.Condition) IGiWebserviceConfigDo
	Or(conds ...gen.Condition) IGiWebserviceConfigDo
	Select(conds ...field.Expr) IGiWebserviceConfigDo
	Where(conds ...gen.Condition) IGiWebserviceConfigDo
	Order(conds ...field.Expr) IGiWebserviceConfigDo
	Distinct(cols ...field.Expr) IGiWebserviceConfigDo
	Omit(cols ...field.Expr) IGiWebserviceConfigDo
	Join(table schema.Tabler, on ...field.Expr) IGiWebserviceConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGiWebserviceConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGiWebserviceConfigDo
	Group(cols ...field.Expr) IGiWebserviceConfigDo
	Having(conds ...gen.Condition) IGiWebserviceConfigDo
	Limit(limit int) IGiWebserviceConfigDo
	Offset(offset int) IGiWebserviceConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGiWebserviceConfigDo
	Unscoped() IGiWebserviceConfigDo
	Create(values ...*model.GiWebserviceConfig) error
	CreateInBatches(values []*model.GiWebserviceConfig, batchSize int) error
	Save(values ...*model.GiWebserviceConfig) error
	First() (*model.GiWebserviceConfig, error)
	Take() (*model.GiWebserviceConfig, error)
	Last() (*model.GiWebserviceConfig, error)
	Find() ([]*model.GiWebserviceConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GiWebserviceConfig, err error)
	FindInBatches(result *[]*model.GiWebserviceConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GiWebserviceConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGiWebserviceConfigDo
	Assign(attrs ...field.AssignExpr) IGiWebserviceConfigDo
	Joins(fields ...field.RelationField) IGiWebserviceConfigDo
	Preload(fields ...field.RelationField) IGiWebserviceConfigDo
	FirstOrInit() (*model.GiWebserviceConfig, error)
	FirstOrCreate() (*model.GiWebserviceConfig, error)
	FindByPage(offset int, limit int) (result []*model.GiWebserviceConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGiWebserviceConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g giWebserviceConfigDo) Debug() IGiWebserviceConfigDo {
	return g.withDO(g.DO.Debug())
}

func (g giWebserviceConfigDo) WithContext(ctx context.Context) IGiWebserviceConfigDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g giWebserviceConfigDo) ReadDB() IGiWebserviceConfigDo {
	return g.Clauses(dbresolver.Read)
}

func (g giWebserviceConfigDo) WriteDB() IGiWebserviceConfigDo {
	return g.Clauses(dbresolver.Write)
}

func (g giWebserviceConfigDo) Session(config *gorm.Session) IGiWebserviceConfigDo {
	return g.withDO(g.DO.Session(config))
}

func (g giWebserviceConfigDo) Clauses(conds ...clause.Expression) IGiWebserviceConfigDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g giWebserviceConfigDo) Returning(value interface{}, columns ...string) IGiWebserviceConfigDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g giWebserviceConfigDo) Not(conds ...gen.Condition) IGiWebserviceConfigDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g giWebserviceConfigDo) Or(conds ...gen.Condition) IGiWebserviceConfigDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g giWebserviceConfigDo) Select(conds ...field.Expr) IGiWebserviceConfigDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g giWebserviceConfigDo) Where(conds ...gen.Condition) IGiWebserviceConfigDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g giWebserviceConfigDo) Order(conds ...field.Expr) IGiWebserviceConfigDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g giWebserviceConfigDo) Distinct(cols ...field.Expr) IGiWebserviceConfigDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g giWebserviceConfigDo) Omit(cols ...field.Expr) IGiWebserviceConfigDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g giWebserviceConfigDo) Join(table schema.Tabler, on ...field.Expr) IGiWebserviceConfigDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g giWebserviceConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGiWebserviceConfigDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g giWebserviceConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IGiWebserviceConfigDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g giWebserviceConfigDo) Group(cols ...field.Expr) IGiWebserviceConfigDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g giWebserviceConfigDo) Having(conds ...gen.Condition) IGiWebserviceConfigDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g giWebserviceConfigDo) Limit(limit int) IGiWebserviceConfigDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g giWebserviceConfigDo) Offset(offset int) IGiWebserviceConfigDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g giWebserviceConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGiWebserviceConfigDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g giWebserviceConfigDo) Unscoped() IGiWebserviceConfigDo {
	return g.withDO(g.DO.Unscoped())
}

func (g giWebserviceConfigDo) Create(values ...*model.GiWebserviceConfig) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g giWebserviceConfigDo) CreateInBatches(values []*model.GiWebserviceConfig, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g giWebserviceConfigDo) Save(values ...*model.GiWebserviceConfig) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g giWebserviceConfigDo) First() (*model.GiWebserviceConfig, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GiWebserviceConfig), nil
	}
}

func (g giWebserviceConfigDo) Take() (*model.GiWebserviceConfig, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GiWebserviceConfig), nil
	}
}

func (g giWebserviceConfigDo) Last() (*model.GiWebserviceConfig, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GiWebserviceConfig), nil
	}
}

func (g giWebserviceConfigDo) Find() ([]*model.GiWebserviceConfig, error) {
	result, err := g.DO.Find()
	return result.([]*model.GiWebserviceConfig), err
}

func (g giWebserviceConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GiWebserviceConfig, err error) {
	buf := make([]*model.GiWebserviceConfig, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g giWebserviceConfigDo) FindInBatches(result *[]*model.GiWebserviceConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g giWebserviceConfigDo) Attrs(attrs ...field.AssignExpr) IGiWebserviceConfigDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g giWebserviceConfigDo) Assign(attrs ...field.AssignExpr) IGiWebserviceConfigDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g giWebserviceConfigDo) Joins(fields ...field.RelationField) IGiWebserviceConfigDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g giWebserviceConfigDo) Preload(fields ...field.RelationField) IGiWebserviceConfigDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g giWebserviceConfigDo) FirstOrInit() (*model.GiWebserviceConfig, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GiWebserviceConfig), nil
	}
}

func (g giWebserviceConfigDo) FirstOrCreate() (*model.GiWebserviceConfig, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GiWebserviceConfig), nil
	}
}

func (g giWebserviceConfigDo) FindByPage(offset int, limit int) (result []*model.GiWebserviceConfig, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g giWebserviceConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g giWebserviceConfigDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g giWebserviceConfigDo) Delete(models ...*model.GiWebserviceConfig) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *giWebserviceConfigDo) withDO(do gen.Dao) *giWebserviceConfigDo {
	g.DO = *do.(*gen.DO)
	return g
}
