// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newSchedulerTask(db *gorm.DB, opts ...gen.DOOption) schedulerTask {
	_schedulerTask := schedulerTask{}

	_schedulerTask.schedulerTaskDo.UseDB(db, opts...)
	_schedulerTask.schedulerTaskDo.UseModel(&model.SchedulerTask{})

	tableName := _schedulerTask.schedulerTaskDo.TableName()
	_schedulerTask.ALL = field.NewAsterisk(tableName)
	_schedulerTask.ID = field.NewInt64(tableName, "id")
	_schedulerTask.Ident = field.NewInt64(tableName, "ident")
	_schedulerTask.Name = field.NewString(tableName, "name")
	_schedulerTask.TaskType = field.NewString(tableName, "task_type")
	_schedulerTask.TaskData = field.NewBytes(tableName, "task_data")
	_schedulerTask.Attempts = field.NewInt32(tableName, "attempts")
	_schedulerTask.LockKey = field.NewInt64(tableName, "lock_key")
	_schedulerTask.LockTime = field.NewTime(tableName, "lock_time")
	_schedulerTask.LockUpdateTime = field.NewTime(tableName, "lock_update_time")
	_schedulerTask.CreateTime = field.NewTime(tableName, "create_time")

	_schedulerTask.fillFieldMap()

	return _schedulerTask
}

type schedulerTask struct {
	schedulerTaskDo

	ALL            field.Asterisk
	ID             field.Int64
	Ident          field.Int64
	Name           field.String
	TaskType       field.String
	TaskData       field.Bytes
	Attempts       field.Int32
	LockKey        field.Int64
	LockTime       field.Time
	LockUpdateTime field.Time
	CreateTime     field.Time

	fieldMap map[string]field.Expr
}

func (s schedulerTask) Table(newTableName string) *schedulerTask {
	s.schedulerTaskDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s schedulerTask) As(alias string) *schedulerTask {
	s.schedulerTaskDo.DO = *(s.schedulerTaskDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *schedulerTask) updateTableName(table string) *schedulerTask {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Ident = field.NewInt64(table, "ident")
	s.Name = field.NewString(table, "name")
	s.TaskType = field.NewString(table, "task_type")
	s.TaskData = field.NewBytes(table, "task_data")
	s.Attempts = field.NewInt32(table, "attempts")
	s.LockKey = field.NewInt64(table, "lock_key")
	s.LockTime = field.NewTime(table, "lock_time")
	s.LockUpdateTime = field.NewTime(table, "lock_update_time")
	s.CreateTime = field.NewTime(table, "create_time")

	s.fillFieldMap()

	return s
}

func (s *schedulerTask) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *schedulerTask) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["ident"] = s.Ident
	s.fieldMap["name"] = s.Name
	s.fieldMap["task_type"] = s.TaskType
	s.fieldMap["task_data"] = s.TaskData
	s.fieldMap["attempts"] = s.Attempts
	s.fieldMap["lock_key"] = s.LockKey
	s.fieldMap["lock_time"] = s.LockTime
	s.fieldMap["lock_update_time"] = s.LockUpdateTime
	s.fieldMap["create_time"] = s.CreateTime
}

func (s schedulerTask) clone(db *gorm.DB) schedulerTask {
	s.schedulerTaskDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s schedulerTask) replaceDB(db *gorm.DB) schedulerTask {
	s.schedulerTaskDo.ReplaceDB(db)
	return s
}

type schedulerTaskDo struct{ gen.DO }

type ISchedulerTaskDo interface {
	gen.SubQuery
	Debug() ISchedulerTaskDo
	WithContext(ctx context.Context) ISchedulerTaskDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISchedulerTaskDo
	WriteDB() ISchedulerTaskDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISchedulerTaskDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISchedulerTaskDo
	Not(conds ...gen.Condition) ISchedulerTaskDo
	Or(conds ...gen.Condition) ISchedulerTaskDo
	Select(conds ...field.Expr) ISchedulerTaskDo
	Where(conds ...gen.Condition) ISchedulerTaskDo
	Order(conds ...field.Expr) ISchedulerTaskDo
	Distinct(cols ...field.Expr) ISchedulerTaskDo
	Omit(cols ...field.Expr) ISchedulerTaskDo
	Join(table schema.Tabler, on ...field.Expr) ISchedulerTaskDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISchedulerTaskDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISchedulerTaskDo
	Group(cols ...field.Expr) ISchedulerTaskDo
	Having(conds ...gen.Condition) ISchedulerTaskDo
	Limit(limit int) ISchedulerTaskDo
	Offset(offset int) ISchedulerTaskDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISchedulerTaskDo
	Unscoped() ISchedulerTaskDo
	Create(values ...*model.SchedulerTask) error
	CreateInBatches(values []*model.SchedulerTask, batchSize int) error
	Save(values ...*model.SchedulerTask) error
	First() (*model.SchedulerTask, error)
	Take() (*model.SchedulerTask, error)
	Last() (*model.SchedulerTask, error)
	Find() ([]*model.SchedulerTask, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SchedulerTask, err error)
	FindInBatches(result *[]*model.SchedulerTask, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SchedulerTask) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISchedulerTaskDo
	Assign(attrs ...field.AssignExpr) ISchedulerTaskDo
	Joins(fields ...field.RelationField) ISchedulerTaskDo
	Preload(fields ...field.RelationField) ISchedulerTaskDo
	FirstOrInit() (*model.SchedulerTask, error)
	FirstOrCreate() (*model.SchedulerTask, error)
	FindByPage(offset int, limit int) (result []*model.SchedulerTask, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISchedulerTaskDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s schedulerTaskDo) Debug() ISchedulerTaskDo {
	return s.withDO(s.DO.Debug())
}

func (s schedulerTaskDo) WithContext(ctx context.Context) ISchedulerTaskDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s schedulerTaskDo) ReadDB() ISchedulerTaskDo {
	return s.Clauses(dbresolver.Read)
}

func (s schedulerTaskDo) WriteDB() ISchedulerTaskDo {
	return s.Clauses(dbresolver.Write)
}

func (s schedulerTaskDo) Session(config *gorm.Session) ISchedulerTaskDo {
	return s.withDO(s.DO.Session(config))
}

func (s schedulerTaskDo) Clauses(conds ...clause.Expression) ISchedulerTaskDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s schedulerTaskDo) Returning(value interface{}, columns ...string) ISchedulerTaskDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s schedulerTaskDo) Not(conds ...gen.Condition) ISchedulerTaskDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s schedulerTaskDo) Or(conds ...gen.Condition) ISchedulerTaskDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s schedulerTaskDo) Select(conds ...field.Expr) ISchedulerTaskDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s schedulerTaskDo) Where(conds ...gen.Condition) ISchedulerTaskDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s schedulerTaskDo) Order(conds ...field.Expr) ISchedulerTaskDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s schedulerTaskDo) Distinct(cols ...field.Expr) ISchedulerTaskDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s schedulerTaskDo) Omit(cols ...field.Expr) ISchedulerTaskDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s schedulerTaskDo) Join(table schema.Tabler, on ...field.Expr) ISchedulerTaskDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s schedulerTaskDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISchedulerTaskDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s schedulerTaskDo) RightJoin(table schema.Tabler, on ...field.Expr) ISchedulerTaskDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s schedulerTaskDo) Group(cols ...field.Expr) ISchedulerTaskDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s schedulerTaskDo) Having(conds ...gen.Condition) ISchedulerTaskDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s schedulerTaskDo) Limit(limit int) ISchedulerTaskDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s schedulerTaskDo) Offset(offset int) ISchedulerTaskDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s schedulerTaskDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISchedulerTaskDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s schedulerTaskDo) Unscoped() ISchedulerTaskDo {
	return s.withDO(s.DO.Unscoped())
}

func (s schedulerTaskDo) Create(values ...*model.SchedulerTask) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s schedulerTaskDo) CreateInBatches(values []*model.SchedulerTask, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s schedulerTaskDo) Save(values ...*model.SchedulerTask) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s schedulerTaskDo) First() (*model.SchedulerTask, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SchedulerTask), nil
	}
}

func (s schedulerTaskDo) Take() (*model.SchedulerTask, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SchedulerTask), nil
	}
}

func (s schedulerTaskDo) Last() (*model.SchedulerTask, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SchedulerTask), nil
	}
}

func (s schedulerTaskDo) Find() ([]*model.SchedulerTask, error) {
	result, err := s.DO.Find()
	return result.([]*model.SchedulerTask), err
}

func (s schedulerTaskDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SchedulerTask, err error) {
	buf := make([]*model.SchedulerTask, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s schedulerTaskDo) FindInBatches(result *[]*model.SchedulerTask, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s schedulerTaskDo) Attrs(attrs ...field.AssignExpr) ISchedulerTaskDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s schedulerTaskDo) Assign(attrs ...field.AssignExpr) ISchedulerTaskDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s schedulerTaskDo) Joins(fields ...field.RelationField) ISchedulerTaskDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s schedulerTaskDo) Preload(fields ...field.RelationField) ISchedulerTaskDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s schedulerTaskDo) FirstOrInit() (*model.SchedulerTask, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SchedulerTask), nil
	}
}

func (s schedulerTaskDo) FirstOrCreate() (*model.SchedulerTask, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SchedulerTask), nil
	}
}

func (s schedulerTaskDo) FindByPage(offset int, limit int) (result []*model.SchedulerTask, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s schedulerTaskDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s schedulerTaskDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s schedulerTaskDo) Delete(models ...*model.SchedulerTask) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *schedulerTaskDo) withDO(do gen.Dao) *schedulerTaskDo {
	s.DO = *do.(*gen.DO)
	return s
}
