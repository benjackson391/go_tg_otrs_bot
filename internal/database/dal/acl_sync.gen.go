// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newAclSync(db *gorm.DB, opts ...gen.DOOption) aclSync {
	_aclSync := aclSync{}

	_aclSync.aclSyncDo.UseDB(db, opts...)
	_aclSync.aclSyncDo.UseModel(&model.AclSync{})

	tableName := _aclSync.aclSyncDo.TableName()
	_aclSync.ALL = field.NewAsterisk(tableName)
	_aclSync.AclID = field.NewString(tableName, "acl_id")
	_aclSync.SyncState = field.NewString(tableName, "sync_state")
	_aclSync.CreateTime = field.NewTime(tableName, "create_time")
	_aclSync.ChangeTime = field.NewTime(tableName, "change_time")

	_aclSync.fillFieldMap()

	return _aclSync
}

type aclSync struct {
	aclSyncDo

	ALL        field.Asterisk
	AclID      field.String
	SyncState  field.String
	CreateTime field.Time
	ChangeTime field.Time

	fieldMap map[string]field.Expr
}

func (a aclSync) Table(newTableName string) *aclSync {
	a.aclSyncDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aclSync) As(alias string) *aclSync {
	a.aclSyncDo.DO = *(a.aclSyncDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aclSync) updateTableName(table string) *aclSync {
	a.ALL = field.NewAsterisk(table)
	a.AclID = field.NewString(table, "acl_id")
	a.SyncState = field.NewString(table, "sync_state")
	a.CreateTime = field.NewTime(table, "create_time")
	a.ChangeTime = field.NewTime(table, "change_time")

	a.fillFieldMap()

	return a
}

func (a *aclSync) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aclSync) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["acl_id"] = a.AclID
	a.fieldMap["sync_state"] = a.SyncState
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["change_time"] = a.ChangeTime
}

func (a aclSync) clone(db *gorm.DB) aclSync {
	a.aclSyncDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aclSync) replaceDB(db *gorm.DB) aclSync {
	a.aclSyncDo.ReplaceDB(db)
	return a
}

type aclSyncDo struct{ gen.DO }

type IAclSyncDo interface {
	gen.SubQuery
	Debug() IAclSyncDo
	WithContext(ctx context.Context) IAclSyncDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAclSyncDo
	WriteDB() IAclSyncDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAclSyncDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAclSyncDo
	Not(conds ...gen.Condition) IAclSyncDo
	Or(conds ...gen.Condition) IAclSyncDo
	Select(conds ...field.Expr) IAclSyncDo
	Where(conds ...gen.Condition) IAclSyncDo
	Order(conds ...field.Expr) IAclSyncDo
	Distinct(cols ...field.Expr) IAclSyncDo
	Omit(cols ...field.Expr) IAclSyncDo
	Join(table schema.Tabler, on ...field.Expr) IAclSyncDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAclSyncDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAclSyncDo
	Group(cols ...field.Expr) IAclSyncDo
	Having(conds ...gen.Condition) IAclSyncDo
	Limit(limit int) IAclSyncDo
	Offset(offset int) IAclSyncDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAclSyncDo
	Unscoped() IAclSyncDo
	Create(values ...*model.AclSync) error
	CreateInBatches(values []*model.AclSync, batchSize int) error
	Save(values ...*model.AclSync) error
	First() (*model.AclSync, error)
	Take() (*model.AclSync, error)
	Last() (*model.AclSync, error)
	Find() ([]*model.AclSync, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AclSync, err error)
	FindInBatches(result *[]*model.AclSync, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AclSync) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAclSyncDo
	Assign(attrs ...field.AssignExpr) IAclSyncDo
	Joins(fields ...field.RelationField) IAclSyncDo
	Preload(fields ...field.RelationField) IAclSyncDo
	FirstOrInit() (*model.AclSync, error)
	FirstOrCreate() (*model.AclSync, error)
	FindByPage(offset int, limit int) (result []*model.AclSync, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAclSyncDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aclSyncDo) Debug() IAclSyncDo {
	return a.withDO(a.DO.Debug())
}

func (a aclSyncDo) WithContext(ctx context.Context) IAclSyncDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aclSyncDo) ReadDB() IAclSyncDo {
	return a.Clauses(dbresolver.Read)
}

func (a aclSyncDo) WriteDB() IAclSyncDo {
	return a.Clauses(dbresolver.Write)
}

func (a aclSyncDo) Session(config *gorm.Session) IAclSyncDo {
	return a.withDO(a.DO.Session(config))
}

func (a aclSyncDo) Clauses(conds ...clause.Expression) IAclSyncDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aclSyncDo) Returning(value interface{}, columns ...string) IAclSyncDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aclSyncDo) Not(conds ...gen.Condition) IAclSyncDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aclSyncDo) Or(conds ...gen.Condition) IAclSyncDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aclSyncDo) Select(conds ...field.Expr) IAclSyncDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aclSyncDo) Where(conds ...gen.Condition) IAclSyncDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aclSyncDo) Order(conds ...field.Expr) IAclSyncDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aclSyncDo) Distinct(cols ...field.Expr) IAclSyncDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aclSyncDo) Omit(cols ...field.Expr) IAclSyncDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aclSyncDo) Join(table schema.Tabler, on ...field.Expr) IAclSyncDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aclSyncDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAclSyncDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aclSyncDo) RightJoin(table schema.Tabler, on ...field.Expr) IAclSyncDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aclSyncDo) Group(cols ...field.Expr) IAclSyncDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aclSyncDo) Having(conds ...gen.Condition) IAclSyncDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aclSyncDo) Limit(limit int) IAclSyncDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aclSyncDo) Offset(offset int) IAclSyncDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aclSyncDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAclSyncDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aclSyncDo) Unscoped() IAclSyncDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aclSyncDo) Create(values ...*model.AclSync) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aclSyncDo) CreateInBatches(values []*model.AclSync, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aclSyncDo) Save(values ...*model.AclSync) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aclSyncDo) First() (*model.AclSync, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AclSync), nil
	}
}

func (a aclSyncDo) Take() (*model.AclSync, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AclSync), nil
	}
}

func (a aclSyncDo) Last() (*model.AclSync, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AclSync), nil
	}
}

func (a aclSyncDo) Find() ([]*model.AclSync, error) {
	result, err := a.DO.Find()
	return result.([]*model.AclSync), err
}

func (a aclSyncDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AclSync, err error) {
	buf := make([]*model.AclSync, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aclSyncDo) FindInBatches(result *[]*model.AclSync, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aclSyncDo) Attrs(attrs ...field.AssignExpr) IAclSyncDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aclSyncDo) Assign(attrs ...field.AssignExpr) IAclSyncDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aclSyncDo) Joins(fields ...field.RelationField) IAclSyncDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aclSyncDo) Preload(fields ...field.RelationField) IAclSyncDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aclSyncDo) FirstOrInit() (*model.AclSync, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AclSync), nil
	}
}

func (a aclSyncDo) FirstOrCreate() (*model.AclSync, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AclSync), nil
	}
}

func (a aclSyncDo) FindByPage(offset int, limit int) (result []*model.AclSync, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aclSyncDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aclSyncDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aclSyncDo) Delete(models ...*model.AclSync) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aclSyncDo) withDO(do gen.Dao) *aclSyncDo {
	a.DO = *do.(*gen.DO)
	return a
}
