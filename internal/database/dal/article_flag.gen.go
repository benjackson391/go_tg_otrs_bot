// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newArticleFlag(db *gorm.DB, opts ...gen.DOOption) articleFlag {
	_articleFlag := articleFlag{}

	_articleFlag.articleFlagDo.UseDB(db, opts...)
	_articleFlag.articleFlagDo.UseModel(&model.ArticleFlag{})

	tableName := _articleFlag.articleFlagDo.TableName()
	_articleFlag.ALL = field.NewAsterisk(tableName)
	_articleFlag.ArticleID = field.NewInt64(tableName, "article_id")
	_articleFlag.ArticleKey = field.NewString(tableName, "article_key")
	_articleFlag.ArticleValue = field.NewString(tableName, "article_value")
	_articleFlag.CreateTime = field.NewTime(tableName, "create_time")
	_articleFlag.CreateBy = field.NewInt32(tableName, "create_by")

	_articleFlag.fillFieldMap()

	return _articleFlag
}

type articleFlag struct {
	articleFlagDo

	ALL          field.Asterisk
	ArticleID    field.Int64
	ArticleKey   field.String
	ArticleValue field.String
	CreateTime   field.Time
	CreateBy     field.Int32

	fieldMap map[string]field.Expr
}

func (a articleFlag) Table(newTableName string) *articleFlag {
	a.articleFlagDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a articleFlag) As(alias string) *articleFlag {
	a.articleFlagDo.DO = *(a.articleFlagDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *articleFlag) updateTableName(table string) *articleFlag {
	a.ALL = field.NewAsterisk(table)
	a.ArticleID = field.NewInt64(table, "article_id")
	a.ArticleKey = field.NewString(table, "article_key")
	a.ArticleValue = field.NewString(table, "article_value")
	a.CreateTime = field.NewTime(table, "create_time")
	a.CreateBy = field.NewInt32(table, "create_by")

	a.fillFieldMap()

	return a
}

func (a *articleFlag) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *articleFlag) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 5)
	a.fieldMap["article_id"] = a.ArticleID
	a.fieldMap["article_key"] = a.ArticleKey
	a.fieldMap["article_value"] = a.ArticleValue
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["create_by"] = a.CreateBy
}

func (a articleFlag) clone(db *gorm.DB) articleFlag {
	a.articleFlagDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a articleFlag) replaceDB(db *gorm.DB) articleFlag {
	a.articleFlagDo.ReplaceDB(db)
	return a
}

type articleFlagDo struct{ gen.DO }

type IArticleFlagDo interface {
	gen.SubQuery
	Debug() IArticleFlagDo
	WithContext(ctx context.Context) IArticleFlagDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IArticleFlagDo
	WriteDB() IArticleFlagDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IArticleFlagDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IArticleFlagDo
	Not(conds ...gen.Condition) IArticleFlagDo
	Or(conds ...gen.Condition) IArticleFlagDo
	Select(conds ...field.Expr) IArticleFlagDo
	Where(conds ...gen.Condition) IArticleFlagDo
	Order(conds ...field.Expr) IArticleFlagDo
	Distinct(cols ...field.Expr) IArticleFlagDo
	Omit(cols ...field.Expr) IArticleFlagDo
	Join(table schema.Tabler, on ...field.Expr) IArticleFlagDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IArticleFlagDo
	RightJoin(table schema.Tabler, on ...field.Expr) IArticleFlagDo
	Group(cols ...field.Expr) IArticleFlagDo
	Having(conds ...gen.Condition) IArticleFlagDo
	Limit(limit int) IArticleFlagDo
	Offset(offset int) IArticleFlagDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IArticleFlagDo
	Unscoped() IArticleFlagDo
	Create(values ...*model.ArticleFlag) error
	CreateInBatches(values []*model.ArticleFlag, batchSize int) error
	Save(values ...*model.ArticleFlag) error
	First() (*model.ArticleFlag, error)
	Take() (*model.ArticleFlag, error)
	Last() (*model.ArticleFlag, error)
	Find() ([]*model.ArticleFlag, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ArticleFlag, err error)
	FindInBatches(result *[]*model.ArticleFlag, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ArticleFlag) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IArticleFlagDo
	Assign(attrs ...field.AssignExpr) IArticleFlagDo
	Joins(fields ...field.RelationField) IArticleFlagDo
	Preload(fields ...field.RelationField) IArticleFlagDo
	FirstOrInit() (*model.ArticleFlag, error)
	FirstOrCreate() (*model.ArticleFlag, error)
	FindByPage(offset int, limit int) (result []*model.ArticleFlag, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IArticleFlagDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a articleFlagDo) Debug() IArticleFlagDo {
	return a.withDO(a.DO.Debug())
}

func (a articleFlagDo) WithContext(ctx context.Context) IArticleFlagDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a articleFlagDo) ReadDB() IArticleFlagDo {
	return a.Clauses(dbresolver.Read)
}

func (a articleFlagDo) WriteDB() IArticleFlagDo {
	return a.Clauses(dbresolver.Write)
}

func (a articleFlagDo) Session(config *gorm.Session) IArticleFlagDo {
	return a.withDO(a.DO.Session(config))
}

func (a articleFlagDo) Clauses(conds ...clause.Expression) IArticleFlagDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a articleFlagDo) Returning(value interface{}, columns ...string) IArticleFlagDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a articleFlagDo) Not(conds ...gen.Condition) IArticleFlagDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a articleFlagDo) Or(conds ...gen.Condition) IArticleFlagDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a articleFlagDo) Select(conds ...field.Expr) IArticleFlagDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a articleFlagDo) Where(conds ...gen.Condition) IArticleFlagDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a articleFlagDo) Order(conds ...field.Expr) IArticleFlagDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a articleFlagDo) Distinct(cols ...field.Expr) IArticleFlagDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a articleFlagDo) Omit(cols ...field.Expr) IArticleFlagDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a articleFlagDo) Join(table schema.Tabler, on ...field.Expr) IArticleFlagDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a articleFlagDo) LeftJoin(table schema.Tabler, on ...field.Expr) IArticleFlagDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a articleFlagDo) RightJoin(table schema.Tabler, on ...field.Expr) IArticleFlagDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a articleFlagDo) Group(cols ...field.Expr) IArticleFlagDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a articleFlagDo) Having(conds ...gen.Condition) IArticleFlagDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a articleFlagDo) Limit(limit int) IArticleFlagDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a articleFlagDo) Offset(offset int) IArticleFlagDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a articleFlagDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IArticleFlagDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a articleFlagDo) Unscoped() IArticleFlagDo {
	return a.withDO(a.DO.Unscoped())
}

func (a articleFlagDo) Create(values ...*model.ArticleFlag) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a articleFlagDo) CreateInBatches(values []*model.ArticleFlag, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a articleFlagDo) Save(values ...*model.ArticleFlag) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a articleFlagDo) First() (*model.ArticleFlag, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleFlag), nil
	}
}

func (a articleFlagDo) Take() (*model.ArticleFlag, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleFlag), nil
	}
}

func (a articleFlagDo) Last() (*model.ArticleFlag, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleFlag), nil
	}
}

func (a articleFlagDo) Find() ([]*model.ArticleFlag, error) {
	result, err := a.DO.Find()
	return result.([]*model.ArticleFlag), err
}

func (a articleFlagDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ArticleFlag, err error) {
	buf := make([]*model.ArticleFlag, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a articleFlagDo) FindInBatches(result *[]*model.ArticleFlag, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a articleFlagDo) Attrs(attrs ...field.AssignExpr) IArticleFlagDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a articleFlagDo) Assign(attrs ...field.AssignExpr) IArticleFlagDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a articleFlagDo) Joins(fields ...field.RelationField) IArticleFlagDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a articleFlagDo) Preload(fields ...field.RelationField) IArticleFlagDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a articleFlagDo) FirstOrInit() (*model.ArticleFlag, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleFlag), nil
	}
}

func (a articleFlagDo) FirstOrCreate() (*model.ArticleFlag, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleFlag), nil
	}
}

func (a articleFlagDo) FindByPage(offset int, limit int) (result []*model.ArticleFlag, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a articleFlagDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a articleFlagDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a articleFlagDo) Delete(models ...*model.ArticleFlag) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *articleFlagDo) withDO(do gen.Dao) *articleFlagDo {
	a.DO = *do.(*gen.DO)
	return a
}
