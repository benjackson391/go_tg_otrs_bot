// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newGenericAgentJob(db *gorm.DB, opts ...gen.DOOption) genericAgentJob {
	_genericAgentJob := genericAgentJob{}

	_genericAgentJob.genericAgentJobDo.UseDB(db, opts...)
	_genericAgentJob.genericAgentJobDo.UseModel(&model.GenericAgentJob{})

	tableName := _genericAgentJob.genericAgentJobDo.TableName()
	_genericAgentJob.ALL = field.NewAsterisk(tableName)
	_genericAgentJob.JobName = field.NewString(tableName, "job_name")
	_genericAgentJob.JobKey = field.NewString(tableName, "job_key")
	_genericAgentJob.JobValue = field.NewString(tableName, "job_value")

	_genericAgentJob.fillFieldMap()

	return _genericAgentJob
}

type genericAgentJob struct {
	genericAgentJobDo

	ALL      field.Asterisk
	JobName  field.String
	JobKey   field.String
	JobValue field.String

	fieldMap map[string]field.Expr
}

func (g genericAgentJob) Table(newTableName string) *genericAgentJob {
	g.genericAgentJobDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g genericAgentJob) As(alias string) *genericAgentJob {
	g.genericAgentJobDo.DO = *(g.genericAgentJobDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *genericAgentJob) updateTableName(table string) *genericAgentJob {
	g.ALL = field.NewAsterisk(table)
	g.JobName = field.NewString(table, "job_name")
	g.JobKey = field.NewString(table, "job_key")
	g.JobValue = field.NewString(table, "job_value")

	g.fillFieldMap()

	return g
}

func (g *genericAgentJob) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *genericAgentJob) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 3)
	g.fieldMap["job_name"] = g.JobName
	g.fieldMap["job_key"] = g.JobKey
	g.fieldMap["job_value"] = g.JobValue
}

func (g genericAgentJob) clone(db *gorm.DB) genericAgentJob {
	g.genericAgentJobDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g genericAgentJob) replaceDB(db *gorm.DB) genericAgentJob {
	g.genericAgentJobDo.ReplaceDB(db)
	return g
}

type genericAgentJobDo struct{ gen.DO }

type IGenericAgentJobDo interface {
	gen.SubQuery
	Debug() IGenericAgentJobDo
	WithContext(ctx context.Context) IGenericAgentJobDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGenericAgentJobDo
	WriteDB() IGenericAgentJobDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGenericAgentJobDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGenericAgentJobDo
	Not(conds ...gen.Condition) IGenericAgentJobDo
	Or(conds ...gen.Condition) IGenericAgentJobDo
	Select(conds ...field.Expr) IGenericAgentJobDo
	Where(conds ...gen.Condition) IGenericAgentJobDo
	Order(conds ...field.Expr) IGenericAgentJobDo
	Distinct(cols ...field.Expr) IGenericAgentJobDo
	Omit(cols ...field.Expr) IGenericAgentJobDo
	Join(table schema.Tabler, on ...field.Expr) IGenericAgentJobDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGenericAgentJobDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGenericAgentJobDo
	Group(cols ...field.Expr) IGenericAgentJobDo
	Having(conds ...gen.Condition) IGenericAgentJobDo
	Limit(limit int) IGenericAgentJobDo
	Offset(offset int) IGenericAgentJobDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGenericAgentJobDo
	Unscoped() IGenericAgentJobDo
	Create(values ...*model.GenericAgentJob) error
	CreateInBatches(values []*model.GenericAgentJob, batchSize int) error
	Save(values ...*model.GenericAgentJob) error
	First() (*model.GenericAgentJob, error)
	Take() (*model.GenericAgentJob, error)
	Last() (*model.GenericAgentJob, error)
	Find() ([]*model.GenericAgentJob, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GenericAgentJob, err error)
	FindInBatches(result *[]*model.GenericAgentJob, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GenericAgentJob) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGenericAgentJobDo
	Assign(attrs ...field.AssignExpr) IGenericAgentJobDo
	Joins(fields ...field.RelationField) IGenericAgentJobDo
	Preload(fields ...field.RelationField) IGenericAgentJobDo
	FirstOrInit() (*model.GenericAgentJob, error)
	FirstOrCreate() (*model.GenericAgentJob, error)
	FindByPage(offset int, limit int) (result []*model.GenericAgentJob, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGenericAgentJobDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g genericAgentJobDo) Debug() IGenericAgentJobDo {
	return g.withDO(g.DO.Debug())
}

func (g genericAgentJobDo) WithContext(ctx context.Context) IGenericAgentJobDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g genericAgentJobDo) ReadDB() IGenericAgentJobDo {
	return g.Clauses(dbresolver.Read)
}

func (g genericAgentJobDo) WriteDB() IGenericAgentJobDo {
	return g.Clauses(dbresolver.Write)
}

func (g genericAgentJobDo) Session(config *gorm.Session) IGenericAgentJobDo {
	return g.withDO(g.DO.Session(config))
}

func (g genericAgentJobDo) Clauses(conds ...clause.Expression) IGenericAgentJobDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g genericAgentJobDo) Returning(value interface{}, columns ...string) IGenericAgentJobDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g genericAgentJobDo) Not(conds ...gen.Condition) IGenericAgentJobDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g genericAgentJobDo) Or(conds ...gen.Condition) IGenericAgentJobDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g genericAgentJobDo) Select(conds ...field.Expr) IGenericAgentJobDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g genericAgentJobDo) Where(conds ...gen.Condition) IGenericAgentJobDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g genericAgentJobDo) Order(conds ...field.Expr) IGenericAgentJobDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g genericAgentJobDo) Distinct(cols ...field.Expr) IGenericAgentJobDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g genericAgentJobDo) Omit(cols ...field.Expr) IGenericAgentJobDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g genericAgentJobDo) Join(table schema.Tabler, on ...field.Expr) IGenericAgentJobDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g genericAgentJobDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGenericAgentJobDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g genericAgentJobDo) RightJoin(table schema.Tabler, on ...field.Expr) IGenericAgentJobDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g genericAgentJobDo) Group(cols ...field.Expr) IGenericAgentJobDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g genericAgentJobDo) Having(conds ...gen.Condition) IGenericAgentJobDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g genericAgentJobDo) Limit(limit int) IGenericAgentJobDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g genericAgentJobDo) Offset(offset int) IGenericAgentJobDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g genericAgentJobDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGenericAgentJobDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g genericAgentJobDo) Unscoped() IGenericAgentJobDo {
	return g.withDO(g.DO.Unscoped())
}

func (g genericAgentJobDo) Create(values ...*model.GenericAgentJob) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g genericAgentJobDo) CreateInBatches(values []*model.GenericAgentJob, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g genericAgentJobDo) Save(values ...*model.GenericAgentJob) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g genericAgentJobDo) First() (*model.GenericAgentJob, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GenericAgentJob), nil
	}
}

func (g genericAgentJobDo) Take() (*model.GenericAgentJob, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GenericAgentJob), nil
	}
}

func (g genericAgentJobDo) Last() (*model.GenericAgentJob, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GenericAgentJob), nil
	}
}

func (g genericAgentJobDo) Find() ([]*model.GenericAgentJob, error) {
	result, err := g.DO.Find()
	return result.([]*model.GenericAgentJob), err
}

func (g genericAgentJobDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GenericAgentJob, err error) {
	buf := make([]*model.GenericAgentJob, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g genericAgentJobDo) FindInBatches(result *[]*model.GenericAgentJob, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g genericAgentJobDo) Attrs(attrs ...field.AssignExpr) IGenericAgentJobDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g genericAgentJobDo) Assign(attrs ...field.AssignExpr) IGenericAgentJobDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g genericAgentJobDo) Joins(fields ...field.RelationField) IGenericAgentJobDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g genericAgentJobDo) Preload(fields ...field.RelationField) IGenericAgentJobDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g genericAgentJobDo) FirstOrInit() (*model.GenericAgentJob, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GenericAgentJob), nil
	}
}

func (g genericAgentJobDo) FirstOrCreate() (*model.GenericAgentJob, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GenericAgentJob), nil
	}
}

func (g genericAgentJobDo) FindByPage(offset int, limit int) (result []*model.GenericAgentJob, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g genericAgentJobDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g genericAgentJobDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g genericAgentJobDo) Delete(models ...*model.GenericAgentJob) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *genericAgentJobDo) withDO(do gen.Dao) *genericAgentJobDo {
	g.DO = *do.(*gen.DO)
	return g
}
