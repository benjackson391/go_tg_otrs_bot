// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newSurveyVote(db *gorm.DB, opts ...gen.DOOption) surveyVote {
	_surveyVote := surveyVote{}

	_surveyVote.surveyVoteDo.UseDB(db, opts...)
	_surveyVote.surveyVoteDo.UseModel(&model.SurveyVote{})

	tableName := _surveyVote.surveyVoteDo.TableName()
	_surveyVote.ALL = field.NewAsterisk(tableName)
	_surveyVote.ID = field.NewInt64(tableName, "id")
	_surveyVote.RequestID = field.NewInt64(tableName, "request_id")
	_surveyVote.QuestionID = field.NewInt64(tableName, "question_id")
	_surveyVote.VoteValue = field.NewString(tableName, "vote_value")
	_surveyVote.CreateTime = field.NewTime(tableName, "create_time")

	_surveyVote.fillFieldMap()

	return _surveyVote
}

type surveyVote struct {
	surveyVoteDo

	ALL        field.Asterisk
	ID         field.Int64
	RequestID  field.Int64
	QuestionID field.Int64
	VoteValue  field.String
	CreateTime field.Time

	fieldMap map[string]field.Expr
}

func (s surveyVote) Table(newTableName string) *surveyVote {
	s.surveyVoteDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s surveyVote) As(alias string) *surveyVote {
	s.surveyVoteDo.DO = *(s.surveyVoteDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *surveyVote) updateTableName(table string) *surveyVote {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.RequestID = field.NewInt64(table, "request_id")
	s.QuestionID = field.NewInt64(table, "question_id")
	s.VoteValue = field.NewString(table, "vote_value")
	s.CreateTime = field.NewTime(table, "create_time")

	s.fillFieldMap()

	return s
}

func (s *surveyVote) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *surveyVote) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["request_id"] = s.RequestID
	s.fieldMap["question_id"] = s.QuestionID
	s.fieldMap["vote_value"] = s.VoteValue
	s.fieldMap["create_time"] = s.CreateTime
}

func (s surveyVote) clone(db *gorm.DB) surveyVote {
	s.surveyVoteDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s surveyVote) replaceDB(db *gorm.DB) surveyVote {
	s.surveyVoteDo.ReplaceDB(db)
	return s
}

type surveyVoteDo struct{ gen.DO }

type ISurveyVoteDo interface {
	gen.SubQuery
	Debug() ISurveyVoteDo
	WithContext(ctx context.Context) ISurveyVoteDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISurveyVoteDo
	WriteDB() ISurveyVoteDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISurveyVoteDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISurveyVoteDo
	Not(conds ...gen.Condition) ISurveyVoteDo
	Or(conds ...gen.Condition) ISurveyVoteDo
	Select(conds ...field.Expr) ISurveyVoteDo
	Where(conds ...gen.Condition) ISurveyVoteDo
	Order(conds ...field.Expr) ISurveyVoteDo
	Distinct(cols ...field.Expr) ISurveyVoteDo
	Omit(cols ...field.Expr) ISurveyVoteDo
	Join(table schema.Tabler, on ...field.Expr) ISurveyVoteDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISurveyVoteDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISurveyVoteDo
	Group(cols ...field.Expr) ISurveyVoteDo
	Having(conds ...gen.Condition) ISurveyVoteDo
	Limit(limit int) ISurveyVoteDo
	Offset(offset int) ISurveyVoteDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISurveyVoteDo
	Unscoped() ISurveyVoteDo
	Create(values ...*model.SurveyVote) error
	CreateInBatches(values []*model.SurveyVote, batchSize int) error
	Save(values ...*model.SurveyVote) error
	First() (*model.SurveyVote, error)
	Take() (*model.SurveyVote, error)
	Last() (*model.SurveyVote, error)
	Find() ([]*model.SurveyVote, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SurveyVote, err error)
	FindInBatches(result *[]*model.SurveyVote, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SurveyVote) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISurveyVoteDo
	Assign(attrs ...field.AssignExpr) ISurveyVoteDo
	Joins(fields ...field.RelationField) ISurveyVoteDo
	Preload(fields ...field.RelationField) ISurveyVoteDo
	FirstOrInit() (*model.SurveyVote, error)
	FirstOrCreate() (*model.SurveyVote, error)
	FindByPage(offset int, limit int) (result []*model.SurveyVote, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISurveyVoteDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s surveyVoteDo) Debug() ISurveyVoteDo {
	return s.withDO(s.DO.Debug())
}

func (s surveyVoteDo) WithContext(ctx context.Context) ISurveyVoteDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s surveyVoteDo) ReadDB() ISurveyVoteDo {
	return s.Clauses(dbresolver.Read)
}

func (s surveyVoteDo) WriteDB() ISurveyVoteDo {
	return s.Clauses(dbresolver.Write)
}

func (s surveyVoteDo) Session(config *gorm.Session) ISurveyVoteDo {
	return s.withDO(s.DO.Session(config))
}

func (s surveyVoteDo) Clauses(conds ...clause.Expression) ISurveyVoteDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s surveyVoteDo) Returning(value interface{}, columns ...string) ISurveyVoteDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s surveyVoteDo) Not(conds ...gen.Condition) ISurveyVoteDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s surveyVoteDo) Or(conds ...gen.Condition) ISurveyVoteDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s surveyVoteDo) Select(conds ...field.Expr) ISurveyVoteDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s surveyVoteDo) Where(conds ...gen.Condition) ISurveyVoteDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s surveyVoteDo) Order(conds ...field.Expr) ISurveyVoteDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s surveyVoteDo) Distinct(cols ...field.Expr) ISurveyVoteDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s surveyVoteDo) Omit(cols ...field.Expr) ISurveyVoteDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s surveyVoteDo) Join(table schema.Tabler, on ...field.Expr) ISurveyVoteDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s surveyVoteDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISurveyVoteDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s surveyVoteDo) RightJoin(table schema.Tabler, on ...field.Expr) ISurveyVoteDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s surveyVoteDo) Group(cols ...field.Expr) ISurveyVoteDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s surveyVoteDo) Having(conds ...gen.Condition) ISurveyVoteDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s surveyVoteDo) Limit(limit int) ISurveyVoteDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s surveyVoteDo) Offset(offset int) ISurveyVoteDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s surveyVoteDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISurveyVoteDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s surveyVoteDo) Unscoped() ISurveyVoteDo {
	return s.withDO(s.DO.Unscoped())
}

func (s surveyVoteDo) Create(values ...*model.SurveyVote) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s surveyVoteDo) CreateInBatches(values []*model.SurveyVote, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s surveyVoteDo) Save(values ...*model.SurveyVote) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s surveyVoteDo) First() (*model.SurveyVote, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SurveyVote), nil
	}
}

func (s surveyVoteDo) Take() (*model.SurveyVote, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SurveyVote), nil
	}
}

func (s surveyVoteDo) Last() (*model.SurveyVote, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SurveyVote), nil
	}
}

func (s surveyVoteDo) Find() ([]*model.SurveyVote, error) {
	result, err := s.DO.Find()
	return result.([]*model.SurveyVote), err
}

func (s surveyVoteDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SurveyVote, err error) {
	buf := make([]*model.SurveyVote, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s surveyVoteDo) FindInBatches(result *[]*model.SurveyVote, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s surveyVoteDo) Attrs(attrs ...field.AssignExpr) ISurveyVoteDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s surveyVoteDo) Assign(attrs ...field.AssignExpr) ISurveyVoteDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s surveyVoteDo) Joins(fields ...field.RelationField) ISurveyVoteDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s surveyVoteDo) Preload(fields ...field.RelationField) ISurveyVoteDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s surveyVoteDo) FirstOrInit() (*model.SurveyVote, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SurveyVote), nil
	}
}

func (s surveyVoteDo) FirstOrCreate() (*model.SurveyVote, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SurveyVote), nil
	}
}

func (s surveyVoteDo) FindByPage(offset int, limit int) (result []*model.SurveyVote, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s surveyVoteDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s surveyVoteDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s surveyVoteDo) Delete(models ...*model.SurveyVote) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *surveyVoteDo) withDO(do gen.Dao) *surveyVoteDo {
	s.DO = *do.(*gen.DO)
	return s
}
