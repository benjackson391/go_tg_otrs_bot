// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newSchedulerRecurrentTask(db *gorm.DB, opts ...gen.DOOption) schedulerRecurrentTask {
	_schedulerRecurrentTask := schedulerRecurrentTask{}

	_schedulerRecurrentTask.schedulerRecurrentTaskDo.UseDB(db, opts...)
	_schedulerRecurrentTask.schedulerRecurrentTaskDo.UseModel(&model.SchedulerRecurrentTask{})

	tableName := _schedulerRecurrentTask.schedulerRecurrentTaskDo.TableName()
	_schedulerRecurrentTask.ALL = field.NewAsterisk(tableName)
	_schedulerRecurrentTask.ID = field.NewInt64(tableName, "id")
	_schedulerRecurrentTask.Name = field.NewString(tableName, "name")
	_schedulerRecurrentTask.TaskType = field.NewString(tableName, "task_type")
	_schedulerRecurrentTask.LastExecutionTime = field.NewTime(tableName, "last_execution_time")
	_schedulerRecurrentTask.LastWorkerTaskID = field.NewInt64(tableName, "last_worker_task_id")
	_schedulerRecurrentTask.LastWorkerStatus = field.NewInt32(tableName, "last_worker_status")
	_schedulerRecurrentTask.LastWorkerRunningTime = field.NewInt32(tableName, "last_worker_running_time")
	_schedulerRecurrentTask.LockKey = field.NewInt64(tableName, "lock_key")
	_schedulerRecurrentTask.LockTime = field.NewTime(tableName, "lock_time")
	_schedulerRecurrentTask.CreateTime = field.NewTime(tableName, "create_time")
	_schedulerRecurrentTask.ChangeTime = field.NewTime(tableName, "change_time")

	_schedulerRecurrentTask.fillFieldMap()

	return _schedulerRecurrentTask
}

type schedulerRecurrentTask struct {
	schedulerRecurrentTaskDo

	ALL                   field.Asterisk
	ID                    field.Int64
	Name                  field.String
	TaskType              field.String
	LastExecutionTime     field.Time
	LastWorkerTaskID      field.Int64
	LastWorkerStatus      field.Int32
	LastWorkerRunningTime field.Int32
	LockKey               field.Int64
	LockTime              field.Time
	CreateTime            field.Time
	ChangeTime            field.Time

	fieldMap map[string]field.Expr
}

func (s schedulerRecurrentTask) Table(newTableName string) *schedulerRecurrentTask {
	s.schedulerRecurrentTaskDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s schedulerRecurrentTask) As(alias string) *schedulerRecurrentTask {
	s.schedulerRecurrentTaskDo.DO = *(s.schedulerRecurrentTaskDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *schedulerRecurrentTask) updateTableName(table string) *schedulerRecurrentTask {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Name = field.NewString(table, "name")
	s.TaskType = field.NewString(table, "task_type")
	s.LastExecutionTime = field.NewTime(table, "last_execution_time")
	s.LastWorkerTaskID = field.NewInt64(table, "last_worker_task_id")
	s.LastWorkerStatus = field.NewInt32(table, "last_worker_status")
	s.LastWorkerRunningTime = field.NewInt32(table, "last_worker_running_time")
	s.LockKey = field.NewInt64(table, "lock_key")
	s.LockTime = field.NewTime(table, "lock_time")
	s.CreateTime = field.NewTime(table, "create_time")
	s.ChangeTime = field.NewTime(table, "change_time")

	s.fillFieldMap()

	return s
}

func (s *schedulerRecurrentTask) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *schedulerRecurrentTask) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["task_type"] = s.TaskType
	s.fieldMap["last_execution_time"] = s.LastExecutionTime
	s.fieldMap["last_worker_task_id"] = s.LastWorkerTaskID
	s.fieldMap["last_worker_status"] = s.LastWorkerStatus
	s.fieldMap["last_worker_running_time"] = s.LastWorkerRunningTime
	s.fieldMap["lock_key"] = s.LockKey
	s.fieldMap["lock_time"] = s.LockTime
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["change_time"] = s.ChangeTime
}

func (s schedulerRecurrentTask) clone(db *gorm.DB) schedulerRecurrentTask {
	s.schedulerRecurrentTaskDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s schedulerRecurrentTask) replaceDB(db *gorm.DB) schedulerRecurrentTask {
	s.schedulerRecurrentTaskDo.ReplaceDB(db)
	return s
}

type schedulerRecurrentTaskDo struct{ gen.DO }

type ISchedulerRecurrentTaskDo interface {
	gen.SubQuery
	Debug() ISchedulerRecurrentTaskDo
	WithContext(ctx context.Context) ISchedulerRecurrentTaskDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISchedulerRecurrentTaskDo
	WriteDB() ISchedulerRecurrentTaskDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISchedulerRecurrentTaskDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISchedulerRecurrentTaskDo
	Not(conds ...gen.Condition) ISchedulerRecurrentTaskDo
	Or(conds ...gen.Condition) ISchedulerRecurrentTaskDo
	Select(conds ...field.Expr) ISchedulerRecurrentTaskDo
	Where(conds ...gen.Condition) ISchedulerRecurrentTaskDo
	Order(conds ...field.Expr) ISchedulerRecurrentTaskDo
	Distinct(cols ...field.Expr) ISchedulerRecurrentTaskDo
	Omit(cols ...field.Expr) ISchedulerRecurrentTaskDo
	Join(table schema.Tabler, on ...field.Expr) ISchedulerRecurrentTaskDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISchedulerRecurrentTaskDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISchedulerRecurrentTaskDo
	Group(cols ...field.Expr) ISchedulerRecurrentTaskDo
	Having(conds ...gen.Condition) ISchedulerRecurrentTaskDo
	Limit(limit int) ISchedulerRecurrentTaskDo
	Offset(offset int) ISchedulerRecurrentTaskDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISchedulerRecurrentTaskDo
	Unscoped() ISchedulerRecurrentTaskDo
	Create(values ...*model.SchedulerRecurrentTask) error
	CreateInBatches(values []*model.SchedulerRecurrentTask, batchSize int) error
	Save(values ...*model.SchedulerRecurrentTask) error
	First() (*model.SchedulerRecurrentTask, error)
	Take() (*model.SchedulerRecurrentTask, error)
	Last() (*model.SchedulerRecurrentTask, error)
	Find() ([]*model.SchedulerRecurrentTask, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SchedulerRecurrentTask, err error)
	FindInBatches(result *[]*model.SchedulerRecurrentTask, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SchedulerRecurrentTask) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISchedulerRecurrentTaskDo
	Assign(attrs ...field.AssignExpr) ISchedulerRecurrentTaskDo
	Joins(fields ...field.RelationField) ISchedulerRecurrentTaskDo
	Preload(fields ...field.RelationField) ISchedulerRecurrentTaskDo
	FirstOrInit() (*model.SchedulerRecurrentTask, error)
	FirstOrCreate() (*model.SchedulerRecurrentTask, error)
	FindByPage(offset int, limit int) (result []*model.SchedulerRecurrentTask, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISchedulerRecurrentTaskDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s schedulerRecurrentTaskDo) Debug() ISchedulerRecurrentTaskDo {
	return s.withDO(s.DO.Debug())
}

func (s schedulerRecurrentTaskDo) WithContext(ctx context.Context) ISchedulerRecurrentTaskDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s schedulerRecurrentTaskDo) ReadDB() ISchedulerRecurrentTaskDo {
	return s.Clauses(dbresolver.Read)
}

func (s schedulerRecurrentTaskDo) WriteDB() ISchedulerRecurrentTaskDo {
	return s.Clauses(dbresolver.Write)
}

func (s schedulerRecurrentTaskDo) Session(config *gorm.Session) ISchedulerRecurrentTaskDo {
	return s.withDO(s.DO.Session(config))
}

func (s schedulerRecurrentTaskDo) Clauses(conds ...clause.Expression) ISchedulerRecurrentTaskDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s schedulerRecurrentTaskDo) Returning(value interface{}, columns ...string) ISchedulerRecurrentTaskDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s schedulerRecurrentTaskDo) Not(conds ...gen.Condition) ISchedulerRecurrentTaskDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s schedulerRecurrentTaskDo) Or(conds ...gen.Condition) ISchedulerRecurrentTaskDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s schedulerRecurrentTaskDo) Select(conds ...field.Expr) ISchedulerRecurrentTaskDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s schedulerRecurrentTaskDo) Where(conds ...gen.Condition) ISchedulerRecurrentTaskDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s schedulerRecurrentTaskDo) Order(conds ...field.Expr) ISchedulerRecurrentTaskDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s schedulerRecurrentTaskDo) Distinct(cols ...field.Expr) ISchedulerRecurrentTaskDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s schedulerRecurrentTaskDo) Omit(cols ...field.Expr) ISchedulerRecurrentTaskDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s schedulerRecurrentTaskDo) Join(table schema.Tabler, on ...field.Expr) ISchedulerRecurrentTaskDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s schedulerRecurrentTaskDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISchedulerRecurrentTaskDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s schedulerRecurrentTaskDo) RightJoin(table schema.Tabler, on ...field.Expr) ISchedulerRecurrentTaskDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s schedulerRecurrentTaskDo) Group(cols ...field.Expr) ISchedulerRecurrentTaskDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s schedulerRecurrentTaskDo) Having(conds ...gen.Condition) ISchedulerRecurrentTaskDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s schedulerRecurrentTaskDo) Limit(limit int) ISchedulerRecurrentTaskDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s schedulerRecurrentTaskDo) Offset(offset int) ISchedulerRecurrentTaskDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s schedulerRecurrentTaskDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISchedulerRecurrentTaskDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s schedulerRecurrentTaskDo) Unscoped() ISchedulerRecurrentTaskDo {
	return s.withDO(s.DO.Unscoped())
}

func (s schedulerRecurrentTaskDo) Create(values ...*model.SchedulerRecurrentTask) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s schedulerRecurrentTaskDo) CreateInBatches(values []*model.SchedulerRecurrentTask, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s schedulerRecurrentTaskDo) Save(values ...*model.SchedulerRecurrentTask) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s schedulerRecurrentTaskDo) First() (*model.SchedulerRecurrentTask, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SchedulerRecurrentTask), nil
	}
}

func (s schedulerRecurrentTaskDo) Take() (*model.SchedulerRecurrentTask, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SchedulerRecurrentTask), nil
	}
}

func (s schedulerRecurrentTaskDo) Last() (*model.SchedulerRecurrentTask, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SchedulerRecurrentTask), nil
	}
}

func (s schedulerRecurrentTaskDo) Find() ([]*model.SchedulerRecurrentTask, error) {
	result, err := s.DO.Find()
	return result.([]*model.SchedulerRecurrentTask), err
}

func (s schedulerRecurrentTaskDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SchedulerRecurrentTask, err error) {
	buf := make([]*model.SchedulerRecurrentTask, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s schedulerRecurrentTaskDo) FindInBatches(result *[]*model.SchedulerRecurrentTask, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s schedulerRecurrentTaskDo) Attrs(attrs ...field.AssignExpr) ISchedulerRecurrentTaskDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s schedulerRecurrentTaskDo) Assign(attrs ...field.AssignExpr) ISchedulerRecurrentTaskDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s schedulerRecurrentTaskDo) Joins(fields ...field.RelationField) ISchedulerRecurrentTaskDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s schedulerRecurrentTaskDo) Preload(fields ...field.RelationField) ISchedulerRecurrentTaskDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s schedulerRecurrentTaskDo) FirstOrInit() (*model.SchedulerRecurrentTask, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SchedulerRecurrentTask), nil
	}
}

func (s schedulerRecurrentTaskDo) FirstOrCreate() (*model.SchedulerRecurrentTask, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SchedulerRecurrentTask), nil
	}
}

func (s schedulerRecurrentTaskDo) FindByPage(offset int, limit int) (result []*model.SchedulerRecurrentTask, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s schedulerRecurrentTaskDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s schedulerRecurrentTaskDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s schedulerRecurrentTaskDo) Delete(models ...*model.SchedulerRecurrentTask) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *schedulerRecurrentTaskDo) withDO(do gen.Dao) *schedulerRecurrentTaskDo {
	s.DO = *do.(*gen.DO)
	return s
}
