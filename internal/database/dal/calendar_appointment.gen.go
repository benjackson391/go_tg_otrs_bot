// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newCalendarAppointment(db *gorm.DB, opts ...gen.DOOption) calendarAppointment {
	_calendarAppointment := calendarAppointment{}

	_calendarAppointment.calendarAppointmentDo.UseDB(db, opts...)
	_calendarAppointment.calendarAppointmentDo.UseModel(&model.CalendarAppointment{})

	tableName := _calendarAppointment.calendarAppointmentDo.TableName()
	_calendarAppointment.ALL = field.NewAsterisk(tableName)
	_calendarAppointment.ID = field.NewInt64(tableName, "id")
	_calendarAppointment.ParentID = field.NewInt64(tableName, "parent_id")
	_calendarAppointment.CalendarID = field.NewInt64(tableName, "calendar_id")
	_calendarAppointment.UniqueID = field.NewString(tableName, "unique_id")
	_calendarAppointment.Title = field.NewString(tableName, "title")
	_calendarAppointment.Description = field.NewString(tableName, "description")
	_calendarAppointment.Location = field.NewString(tableName, "location")
	_calendarAppointment.StartTime = field.NewTime(tableName, "start_time")
	_calendarAppointment.EndTime = field.NewTime(tableName, "end_time")
	_calendarAppointment.AllDay = field.NewInt32(tableName, "all_day")
	_calendarAppointment.NotifyTime = field.NewTime(tableName, "notify_time")
	_calendarAppointment.NotifyTemplate = field.NewString(tableName, "notify_template")
	_calendarAppointment.NotifyCustom = field.NewString(tableName, "notify_custom")
	_calendarAppointment.NotifyCustomUnitCount = field.NewInt64(tableName, "notify_custom_unit_count")
	_calendarAppointment.NotifyCustomUnit = field.NewString(tableName, "notify_custom_unit")
	_calendarAppointment.NotifyCustomUnitPoint = field.NewString(tableName, "notify_custom_unit_point")
	_calendarAppointment.NotifyCustomDate = field.NewTime(tableName, "notify_custom_date")
	_calendarAppointment.TeamID = field.NewString(tableName, "team_id")
	_calendarAppointment.ResourceID = field.NewString(tableName, "resource_id")
	_calendarAppointment.Recurring = field.NewInt32(tableName, "recurring")
	_calendarAppointment.RecurType = field.NewString(tableName, "recur_type")
	_calendarAppointment.RecurFreq = field.NewString(tableName, "recur_freq")
	_calendarAppointment.RecurCount = field.NewInt32(tableName, "recur_count")
	_calendarAppointment.RecurInterval = field.NewInt32(tableName, "recur_interval")
	_calendarAppointment.RecurUntil = field.NewTime(tableName, "recur_until")
	_calendarAppointment.RecurID = field.NewTime(tableName, "recur_id")
	_calendarAppointment.RecurExclude = field.NewString(tableName, "recur_exclude")
	_calendarAppointment.TicketAppointmentRuleID = field.NewString(tableName, "ticket_appointment_rule_id")
	_calendarAppointment.CreateTime = field.NewTime(tableName, "create_time")
	_calendarAppointment.CreateBy = field.NewInt32(tableName, "create_by")
	_calendarAppointment.ChangeTime = field.NewTime(tableName, "change_time")
	_calendarAppointment.ChangeBy = field.NewInt32(tableName, "change_by")

	_calendarAppointment.fillFieldMap()

	return _calendarAppointment
}

type calendarAppointment struct {
	calendarAppointmentDo

	ALL                     field.Asterisk
	ID                      field.Int64
	ParentID                field.Int64
	CalendarID              field.Int64
	UniqueID                field.String
	Title                   field.String
	Description             field.String
	Location                field.String
	StartTime               field.Time
	EndTime                 field.Time
	AllDay                  field.Int32
	NotifyTime              field.Time
	NotifyTemplate          field.String
	NotifyCustom            field.String
	NotifyCustomUnitCount   field.Int64
	NotifyCustomUnit        field.String
	NotifyCustomUnitPoint   field.String
	NotifyCustomDate        field.Time
	TeamID                  field.String
	ResourceID              field.String
	Recurring               field.Int32
	RecurType               field.String
	RecurFreq               field.String
	RecurCount              field.Int32
	RecurInterval           field.Int32
	RecurUntil              field.Time
	RecurID                 field.Time
	RecurExclude            field.String
	TicketAppointmentRuleID field.String
	CreateTime              field.Time
	CreateBy                field.Int32
	ChangeTime              field.Time
	ChangeBy                field.Int32

	fieldMap map[string]field.Expr
}

func (c calendarAppointment) Table(newTableName string) *calendarAppointment {
	c.calendarAppointmentDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c calendarAppointment) As(alias string) *calendarAppointment {
	c.calendarAppointmentDo.DO = *(c.calendarAppointmentDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *calendarAppointment) updateTableName(table string) *calendarAppointment {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.ParentID = field.NewInt64(table, "parent_id")
	c.CalendarID = field.NewInt64(table, "calendar_id")
	c.UniqueID = field.NewString(table, "unique_id")
	c.Title = field.NewString(table, "title")
	c.Description = field.NewString(table, "description")
	c.Location = field.NewString(table, "location")
	c.StartTime = field.NewTime(table, "start_time")
	c.EndTime = field.NewTime(table, "end_time")
	c.AllDay = field.NewInt32(table, "all_day")
	c.NotifyTime = field.NewTime(table, "notify_time")
	c.NotifyTemplate = field.NewString(table, "notify_template")
	c.NotifyCustom = field.NewString(table, "notify_custom")
	c.NotifyCustomUnitCount = field.NewInt64(table, "notify_custom_unit_count")
	c.NotifyCustomUnit = field.NewString(table, "notify_custom_unit")
	c.NotifyCustomUnitPoint = field.NewString(table, "notify_custom_unit_point")
	c.NotifyCustomDate = field.NewTime(table, "notify_custom_date")
	c.TeamID = field.NewString(table, "team_id")
	c.ResourceID = field.NewString(table, "resource_id")
	c.Recurring = field.NewInt32(table, "recurring")
	c.RecurType = field.NewString(table, "recur_type")
	c.RecurFreq = field.NewString(table, "recur_freq")
	c.RecurCount = field.NewInt32(table, "recur_count")
	c.RecurInterval = field.NewInt32(table, "recur_interval")
	c.RecurUntil = field.NewTime(table, "recur_until")
	c.RecurID = field.NewTime(table, "recur_id")
	c.RecurExclude = field.NewString(table, "recur_exclude")
	c.TicketAppointmentRuleID = field.NewString(table, "ticket_appointment_rule_id")
	c.CreateTime = field.NewTime(table, "create_time")
	c.CreateBy = field.NewInt32(table, "create_by")
	c.ChangeTime = field.NewTime(table, "change_time")
	c.ChangeBy = field.NewInt32(table, "change_by")

	c.fillFieldMap()

	return c
}

func (c *calendarAppointment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *calendarAppointment) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 32)
	c.fieldMap["id"] = c.ID
	c.fieldMap["parent_id"] = c.ParentID
	c.fieldMap["calendar_id"] = c.CalendarID
	c.fieldMap["unique_id"] = c.UniqueID
	c.fieldMap["title"] = c.Title
	c.fieldMap["description"] = c.Description
	c.fieldMap["location"] = c.Location
	c.fieldMap["start_time"] = c.StartTime
	c.fieldMap["end_time"] = c.EndTime
	c.fieldMap["all_day"] = c.AllDay
	c.fieldMap["notify_time"] = c.NotifyTime
	c.fieldMap["notify_template"] = c.NotifyTemplate
	c.fieldMap["notify_custom"] = c.NotifyCustom
	c.fieldMap["notify_custom_unit_count"] = c.NotifyCustomUnitCount
	c.fieldMap["notify_custom_unit"] = c.NotifyCustomUnit
	c.fieldMap["notify_custom_unit_point"] = c.NotifyCustomUnitPoint
	c.fieldMap["notify_custom_date"] = c.NotifyCustomDate
	c.fieldMap["team_id"] = c.TeamID
	c.fieldMap["resource_id"] = c.ResourceID
	c.fieldMap["recurring"] = c.Recurring
	c.fieldMap["recur_type"] = c.RecurType
	c.fieldMap["recur_freq"] = c.RecurFreq
	c.fieldMap["recur_count"] = c.RecurCount
	c.fieldMap["recur_interval"] = c.RecurInterval
	c.fieldMap["recur_until"] = c.RecurUntil
	c.fieldMap["recur_id"] = c.RecurID
	c.fieldMap["recur_exclude"] = c.RecurExclude
	c.fieldMap["ticket_appointment_rule_id"] = c.TicketAppointmentRuleID
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["create_by"] = c.CreateBy
	c.fieldMap["change_time"] = c.ChangeTime
	c.fieldMap["change_by"] = c.ChangeBy
}

func (c calendarAppointment) clone(db *gorm.DB) calendarAppointment {
	c.calendarAppointmentDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c calendarAppointment) replaceDB(db *gorm.DB) calendarAppointment {
	c.calendarAppointmentDo.ReplaceDB(db)
	return c
}

type calendarAppointmentDo struct{ gen.DO }

type ICalendarAppointmentDo interface {
	gen.SubQuery
	Debug() ICalendarAppointmentDo
	WithContext(ctx context.Context) ICalendarAppointmentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICalendarAppointmentDo
	WriteDB() ICalendarAppointmentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICalendarAppointmentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICalendarAppointmentDo
	Not(conds ...gen.Condition) ICalendarAppointmentDo
	Or(conds ...gen.Condition) ICalendarAppointmentDo
	Select(conds ...field.Expr) ICalendarAppointmentDo
	Where(conds ...gen.Condition) ICalendarAppointmentDo
	Order(conds ...field.Expr) ICalendarAppointmentDo
	Distinct(cols ...field.Expr) ICalendarAppointmentDo
	Omit(cols ...field.Expr) ICalendarAppointmentDo
	Join(table schema.Tabler, on ...field.Expr) ICalendarAppointmentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICalendarAppointmentDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICalendarAppointmentDo
	Group(cols ...field.Expr) ICalendarAppointmentDo
	Having(conds ...gen.Condition) ICalendarAppointmentDo
	Limit(limit int) ICalendarAppointmentDo
	Offset(offset int) ICalendarAppointmentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICalendarAppointmentDo
	Unscoped() ICalendarAppointmentDo
	Create(values ...*model.CalendarAppointment) error
	CreateInBatches(values []*model.CalendarAppointment, batchSize int) error
	Save(values ...*model.CalendarAppointment) error
	First() (*model.CalendarAppointment, error)
	Take() (*model.CalendarAppointment, error)
	Last() (*model.CalendarAppointment, error)
	Find() ([]*model.CalendarAppointment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CalendarAppointment, err error)
	FindInBatches(result *[]*model.CalendarAppointment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CalendarAppointment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICalendarAppointmentDo
	Assign(attrs ...field.AssignExpr) ICalendarAppointmentDo
	Joins(fields ...field.RelationField) ICalendarAppointmentDo
	Preload(fields ...field.RelationField) ICalendarAppointmentDo
	FirstOrInit() (*model.CalendarAppointment, error)
	FirstOrCreate() (*model.CalendarAppointment, error)
	FindByPage(offset int, limit int) (result []*model.CalendarAppointment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICalendarAppointmentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c calendarAppointmentDo) Debug() ICalendarAppointmentDo {
	return c.withDO(c.DO.Debug())
}

func (c calendarAppointmentDo) WithContext(ctx context.Context) ICalendarAppointmentDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c calendarAppointmentDo) ReadDB() ICalendarAppointmentDo {
	return c.Clauses(dbresolver.Read)
}

func (c calendarAppointmentDo) WriteDB() ICalendarAppointmentDo {
	return c.Clauses(dbresolver.Write)
}

func (c calendarAppointmentDo) Session(config *gorm.Session) ICalendarAppointmentDo {
	return c.withDO(c.DO.Session(config))
}

func (c calendarAppointmentDo) Clauses(conds ...clause.Expression) ICalendarAppointmentDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c calendarAppointmentDo) Returning(value interface{}, columns ...string) ICalendarAppointmentDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c calendarAppointmentDo) Not(conds ...gen.Condition) ICalendarAppointmentDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c calendarAppointmentDo) Or(conds ...gen.Condition) ICalendarAppointmentDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c calendarAppointmentDo) Select(conds ...field.Expr) ICalendarAppointmentDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c calendarAppointmentDo) Where(conds ...gen.Condition) ICalendarAppointmentDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c calendarAppointmentDo) Order(conds ...field.Expr) ICalendarAppointmentDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c calendarAppointmentDo) Distinct(cols ...field.Expr) ICalendarAppointmentDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c calendarAppointmentDo) Omit(cols ...field.Expr) ICalendarAppointmentDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c calendarAppointmentDo) Join(table schema.Tabler, on ...field.Expr) ICalendarAppointmentDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c calendarAppointmentDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICalendarAppointmentDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c calendarAppointmentDo) RightJoin(table schema.Tabler, on ...field.Expr) ICalendarAppointmentDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c calendarAppointmentDo) Group(cols ...field.Expr) ICalendarAppointmentDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c calendarAppointmentDo) Having(conds ...gen.Condition) ICalendarAppointmentDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c calendarAppointmentDo) Limit(limit int) ICalendarAppointmentDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c calendarAppointmentDo) Offset(offset int) ICalendarAppointmentDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c calendarAppointmentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICalendarAppointmentDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c calendarAppointmentDo) Unscoped() ICalendarAppointmentDo {
	return c.withDO(c.DO.Unscoped())
}

func (c calendarAppointmentDo) Create(values ...*model.CalendarAppointment) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c calendarAppointmentDo) CreateInBatches(values []*model.CalendarAppointment, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c calendarAppointmentDo) Save(values ...*model.CalendarAppointment) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c calendarAppointmentDo) First() (*model.CalendarAppointment, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CalendarAppointment), nil
	}
}

func (c calendarAppointmentDo) Take() (*model.CalendarAppointment, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CalendarAppointment), nil
	}
}

func (c calendarAppointmentDo) Last() (*model.CalendarAppointment, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CalendarAppointment), nil
	}
}

func (c calendarAppointmentDo) Find() ([]*model.CalendarAppointment, error) {
	result, err := c.DO.Find()
	return result.([]*model.CalendarAppointment), err
}

func (c calendarAppointmentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CalendarAppointment, err error) {
	buf := make([]*model.CalendarAppointment, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c calendarAppointmentDo) FindInBatches(result *[]*model.CalendarAppointment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c calendarAppointmentDo) Attrs(attrs ...field.AssignExpr) ICalendarAppointmentDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c calendarAppointmentDo) Assign(attrs ...field.AssignExpr) ICalendarAppointmentDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c calendarAppointmentDo) Joins(fields ...field.RelationField) ICalendarAppointmentDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c calendarAppointmentDo) Preload(fields ...field.RelationField) ICalendarAppointmentDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c calendarAppointmentDo) FirstOrInit() (*model.CalendarAppointment, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CalendarAppointment), nil
	}
}

func (c calendarAppointmentDo) FirstOrCreate() (*model.CalendarAppointment, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CalendarAppointment), nil
	}
}

func (c calendarAppointmentDo) FindByPage(offset int, limit int) (result []*model.CalendarAppointment, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c calendarAppointmentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c calendarAppointmentDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c calendarAppointmentDo) Delete(models ...*model.CalendarAppointment) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *calendarAppointmentDo) withDO(do gen.Dao) *calendarAppointmentDo {
	c.DO = *do.(*gen.DO)
	return c
}
