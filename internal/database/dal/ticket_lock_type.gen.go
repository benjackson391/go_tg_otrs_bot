// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newTicketLockType(db *gorm.DB, opts ...gen.DOOption) ticketLockType {
	_ticketLockType := ticketLockType{}

	_ticketLockType.ticketLockTypeDo.UseDB(db, opts...)
	_ticketLockType.ticketLockTypeDo.UseModel(&model.TicketLockType{})

	tableName := _ticketLockType.ticketLockTypeDo.TableName()
	_ticketLockType.ALL = field.NewAsterisk(tableName)
	_ticketLockType.ID = field.NewInt32(tableName, "id")
	_ticketLockType.Name = field.NewString(tableName, "name")
	_ticketLockType.ValidID = field.NewInt32(tableName, "valid_id")
	_ticketLockType.CreateTime = field.NewTime(tableName, "create_time")
	_ticketLockType.CreateBy = field.NewInt32(tableName, "create_by")
	_ticketLockType.ChangeTime = field.NewTime(tableName, "change_time")
	_ticketLockType.ChangeBy = field.NewInt32(tableName, "change_by")

	_ticketLockType.fillFieldMap()

	return _ticketLockType
}

type ticketLockType struct {
	ticketLockTypeDo

	ALL        field.Asterisk
	ID         field.Int32
	Name       field.String
	ValidID    field.Int32
	CreateTime field.Time
	CreateBy   field.Int32
	ChangeTime field.Time
	ChangeBy   field.Int32

	fieldMap map[string]field.Expr
}

func (t ticketLockType) Table(newTableName string) *ticketLockType {
	t.ticketLockTypeDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t ticketLockType) As(alias string) *ticketLockType {
	t.ticketLockTypeDo.DO = *(t.ticketLockTypeDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *ticketLockType) updateTableName(table string) *ticketLockType {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.Name = field.NewString(table, "name")
	t.ValidID = field.NewInt32(table, "valid_id")
	t.CreateTime = field.NewTime(table, "create_time")
	t.CreateBy = field.NewInt32(table, "create_by")
	t.ChangeTime = field.NewTime(table, "change_time")
	t.ChangeBy = field.NewInt32(table, "change_by")

	t.fillFieldMap()

	return t
}

func (t *ticketLockType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *ticketLockType) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["valid_id"] = t.ValidID
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["create_by"] = t.CreateBy
	t.fieldMap["change_time"] = t.ChangeTime
	t.fieldMap["change_by"] = t.ChangeBy
}

func (t ticketLockType) clone(db *gorm.DB) ticketLockType {
	t.ticketLockTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t ticketLockType) replaceDB(db *gorm.DB) ticketLockType {
	t.ticketLockTypeDo.ReplaceDB(db)
	return t
}

type ticketLockTypeDo struct{ gen.DO }

type ITicketLockTypeDo interface {
	gen.SubQuery
	Debug() ITicketLockTypeDo
	WithContext(ctx context.Context) ITicketLockTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITicketLockTypeDo
	WriteDB() ITicketLockTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITicketLockTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITicketLockTypeDo
	Not(conds ...gen.Condition) ITicketLockTypeDo
	Or(conds ...gen.Condition) ITicketLockTypeDo
	Select(conds ...field.Expr) ITicketLockTypeDo
	Where(conds ...gen.Condition) ITicketLockTypeDo
	Order(conds ...field.Expr) ITicketLockTypeDo
	Distinct(cols ...field.Expr) ITicketLockTypeDo
	Omit(cols ...field.Expr) ITicketLockTypeDo
	Join(table schema.Tabler, on ...field.Expr) ITicketLockTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITicketLockTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITicketLockTypeDo
	Group(cols ...field.Expr) ITicketLockTypeDo
	Having(conds ...gen.Condition) ITicketLockTypeDo
	Limit(limit int) ITicketLockTypeDo
	Offset(offset int) ITicketLockTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITicketLockTypeDo
	Unscoped() ITicketLockTypeDo
	Create(values ...*model.TicketLockType) error
	CreateInBatches(values []*model.TicketLockType, batchSize int) error
	Save(values ...*model.TicketLockType) error
	First() (*model.TicketLockType, error)
	Take() (*model.TicketLockType, error)
	Last() (*model.TicketLockType, error)
	Find() ([]*model.TicketLockType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TicketLockType, err error)
	FindInBatches(result *[]*model.TicketLockType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TicketLockType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITicketLockTypeDo
	Assign(attrs ...field.AssignExpr) ITicketLockTypeDo
	Joins(fields ...field.RelationField) ITicketLockTypeDo
	Preload(fields ...field.RelationField) ITicketLockTypeDo
	FirstOrInit() (*model.TicketLockType, error)
	FirstOrCreate() (*model.TicketLockType, error)
	FindByPage(offset int, limit int) (result []*model.TicketLockType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITicketLockTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t ticketLockTypeDo) Debug() ITicketLockTypeDo {
	return t.withDO(t.DO.Debug())
}

func (t ticketLockTypeDo) WithContext(ctx context.Context) ITicketLockTypeDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t ticketLockTypeDo) ReadDB() ITicketLockTypeDo {
	return t.Clauses(dbresolver.Read)
}

func (t ticketLockTypeDo) WriteDB() ITicketLockTypeDo {
	return t.Clauses(dbresolver.Write)
}

func (t ticketLockTypeDo) Session(config *gorm.Session) ITicketLockTypeDo {
	return t.withDO(t.DO.Session(config))
}

func (t ticketLockTypeDo) Clauses(conds ...clause.Expression) ITicketLockTypeDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t ticketLockTypeDo) Returning(value interface{}, columns ...string) ITicketLockTypeDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t ticketLockTypeDo) Not(conds ...gen.Condition) ITicketLockTypeDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t ticketLockTypeDo) Or(conds ...gen.Condition) ITicketLockTypeDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t ticketLockTypeDo) Select(conds ...field.Expr) ITicketLockTypeDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t ticketLockTypeDo) Where(conds ...gen.Condition) ITicketLockTypeDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t ticketLockTypeDo) Order(conds ...field.Expr) ITicketLockTypeDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t ticketLockTypeDo) Distinct(cols ...field.Expr) ITicketLockTypeDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t ticketLockTypeDo) Omit(cols ...field.Expr) ITicketLockTypeDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t ticketLockTypeDo) Join(table schema.Tabler, on ...field.Expr) ITicketLockTypeDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t ticketLockTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITicketLockTypeDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t ticketLockTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) ITicketLockTypeDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t ticketLockTypeDo) Group(cols ...field.Expr) ITicketLockTypeDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t ticketLockTypeDo) Having(conds ...gen.Condition) ITicketLockTypeDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t ticketLockTypeDo) Limit(limit int) ITicketLockTypeDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t ticketLockTypeDo) Offset(offset int) ITicketLockTypeDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t ticketLockTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITicketLockTypeDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t ticketLockTypeDo) Unscoped() ITicketLockTypeDo {
	return t.withDO(t.DO.Unscoped())
}

func (t ticketLockTypeDo) Create(values ...*model.TicketLockType) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t ticketLockTypeDo) CreateInBatches(values []*model.TicketLockType, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t ticketLockTypeDo) Save(values ...*model.TicketLockType) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t ticketLockTypeDo) First() (*model.TicketLockType, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketLockType), nil
	}
}

func (t ticketLockTypeDo) Take() (*model.TicketLockType, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketLockType), nil
	}
}

func (t ticketLockTypeDo) Last() (*model.TicketLockType, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketLockType), nil
	}
}

func (t ticketLockTypeDo) Find() ([]*model.TicketLockType, error) {
	result, err := t.DO.Find()
	return result.([]*model.TicketLockType), err
}

func (t ticketLockTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TicketLockType, err error) {
	buf := make([]*model.TicketLockType, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t ticketLockTypeDo) FindInBatches(result *[]*model.TicketLockType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t ticketLockTypeDo) Attrs(attrs ...field.AssignExpr) ITicketLockTypeDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t ticketLockTypeDo) Assign(attrs ...field.AssignExpr) ITicketLockTypeDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t ticketLockTypeDo) Joins(fields ...field.RelationField) ITicketLockTypeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t ticketLockTypeDo) Preload(fields ...field.RelationField) ITicketLockTypeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t ticketLockTypeDo) FirstOrInit() (*model.TicketLockType, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketLockType), nil
	}
}

func (t ticketLockTypeDo) FirstOrCreate() (*model.TicketLockType, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketLockType), nil
	}
}

func (t ticketLockTypeDo) FindByPage(offset int, limit int) (result []*model.TicketLockType, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t ticketLockTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t ticketLockTypeDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t ticketLockTypeDo) Delete(models ...*model.TicketLockType) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *ticketLockTypeDo) withDO(do gen.Dao) *ticketLockTypeDo {
	t.DO = *do.(*gen.DO)
	return t
}
