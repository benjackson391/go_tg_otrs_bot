// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newStandardAttachment(db *gorm.DB, opts ...gen.DOOption) standardAttachment {
	_standardAttachment := standardAttachment{}

	_standardAttachment.standardAttachmentDo.UseDB(db, opts...)
	_standardAttachment.standardAttachmentDo.UseModel(&model.StandardAttachment{})

	tableName := _standardAttachment.standardAttachmentDo.TableName()
	_standardAttachment.ALL = field.NewAsterisk(tableName)
	_standardAttachment.ID = field.NewInt32(tableName, "id")
	_standardAttachment.Name = field.NewString(tableName, "name")
	_standardAttachment.ContentType = field.NewString(tableName, "content_type")
	_standardAttachment.Content = field.NewBytes(tableName, "content")
	_standardAttachment.Filename = field.NewString(tableName, "filename")
	_standardAttachment.Comments = field.NewString(tableName, "comments")
	_standardAttachment.ValidID = field.NewInt32(tableName, "valid_id")
	_standardAttachment.CreateTime = field.NewTime(tableName, "create_time")
	_standardAttachment.CreateBy = field.NewInt32(tableName, "create_by")
	_standardAttachment.ChangeTime = field.NewTime(tableName, "change_time")
	_standardAttachment.ChangeBy = field.NewInt32(tableName, "change_by")

	_standardAttachment.fillFieldMap()

	return _standardAttachment
}

type standardAttachment struct {
	standardAttachmentDo

	ALL         field.Asterisk
	ID          field.Int32
	Name        field.String
	ContentType field.String
	Content     field.Bytes
	Filename    field.String
	Comments    field.String
	ValidID     field.Int32
	CreateTime  field.Time
	CreateBy    field.Int32
	ChangeTime  field.Time
	ChangeBy    field.Int32

	fieldMap map[string]field.Expr
}

func (s standardAttachment) Table(newTableName string) *standardAttachment {
	s.standardAttachmentDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s standardAttachment) As(alias string) *standardAttachment {
	s.standardAttachmentDo.DO = *(s.standardAttachmentDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *standardAttachment) updateTableName(table string) *standardAttachment {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.Name = field.NewString(table, "name")
	s.ContentType = field.NewString(table, "content_type")
	s.Content = field.NewBytes(table, "content")
	s.Filename = field.NewString(table, "filename")
	s.Comments = field.NewString(table, "comments")
	s.ValidID = field.NewInt32(table, "valid_id")
	s.CreateTime = field.NewTime(table, "create_time")
	s.CreateBy = field.NewInt32(table, "create_by")
	s.ChangeTime = field.NewTime(table, "change_time")
	s.ChangeBy = field.NewInt32(table, "change_by")

	s.fillFieldMap()

	return s
}

func (s *standardAttachment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *standardAttachment) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["content_type"] = s.ContentType
	s.fieldMap["content"] = s.Content
	s.fieldMap["filename"] = s.Filename
	s.fieldMap["comments"] = s.Comments
	s.fieldMap["valid_id"] = s.ValidID
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["change_time"] = s.ChangeTime
	s.fieldMap["change_by"] = s.ChangeBy
}

func (s standardAttachment) clone(db *gorm.DB) standardAttachment {
	s.standardAttachmentDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s standardAttachment) replaceDB(db *gorm.DB) standardAttachment {
	s.standardAttachmentDo.ReplaceDB(db)
	return s
}

type standardAttachmentDo struct{ gen.DO }

type IStandardAttachmentDo interface {
	gen.SubQuery
	Debug() IStandardAttachmentDo
	WithContext(ctx context.Context) IStandardAttachmentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStandardAttachmentDo
	WriteDB() IStandardAttachmentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStandardAttachmentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStandardAttachmentDo
	Not(conds ...gen.Condition) IStandardAttachmentDo
	Or(conds ...gen.Condition) IStandardAttachmentDo
	Select(conds ...field.Expr) IStandardAttachmentDo
	Where(conds ...gen.Condition) IStandardAttachmentDo
	Order(conds ...field.Expr) IStandardAttachmentDo
	Distinct(cols ...field.Expr) IStandardAttachmentDo
	Omit(cols ...field.Expr) IStandardAttachmentDo
	Join(table schema.Tabler, on ...field.Expr) IStandardAttachmentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStandardAttachmentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStandardAttachmentDo
	Group(cols ...field.Expr) IStandardAttachmentDo
	Having(conds ...gen.Condition) IStandardAttachmentDo
	Limit(limit int) IStandardAttachmentDo
	Offset(offset int) IStandardAttachmentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStandardAttachmentDo
	Unscoped() IStandardAttachmentDo
	Create(values ...*model.StandardAttachment) error
	CreateInBatches(values []*model.StandardAttachment, batchSize int) error
	Save(values ...*model.StandardAttachment) error
	First() (*model.StandardAttachment, error)
	Take() (*model.StandardAttachment, error)
	Last() (*model.StandardAttachment, error)
	Find() ([]*model.StandardAttachment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StandardAttachment, err error)
	FindInBatches(result *[]*model.StandardAttachment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.StandardAttachment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStandardAttachmentDo
	Assign(attrs ...field.AssignExpr) IStandardAttachmentDo
	Joins(fields ...field.RelationField) IStandardAttachmentDo
	Preload(fields ...field.RelationField) IStandardAttachmentDo
	FirstOrInit() (*model.StandardAttachment, error)
	FirstOrCreate() (*model.StandardAttachment, error)
	FindByPage(offset int, limit int) (result []*model.StandardAttachment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStandardAttachmentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s standardAttachmentDo) Debug() IStandardAttachmentDo {
	return s.withDO(s.DO.Debug())
}

func (s standardAttachmentDo) WithContext(ctx context.Context) IStandardAttachmentDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s standardAttachmentDo) ReadDB() IStandardAttachmentDo {
	return s.Clauses(dbresolver.Read)
}

func (s standardAttachmentDo) WriteDB() IStandardAttachmentDo {
	return s.Clauses(dbresolver.Write)
}

func (s standardAttachmentDo) Session(config *gorm.Session) IStandardAttachmentDo {
	return s.withDO(s.DO.Session(config))
}

func (s standardAttachmentDo) Clauses(conds ...clause.Expression) IStandardAttachmentDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s standardAttachmentDo) Returning(value interface{}, columns ...string) IStandardAttachmentDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s standardAttachmentDo) Not(conds ...gen.Condition) IStandardAttachmentDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s standardAttachmentDo) Or(conds ...gen.Condition) IStandardAttachmentDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s standardAttachmentDo) Select(conds ...field.Expr) IStandardAttachmentDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s standardAttachmentDo) Where(conds ...gen.Condition) IStandardAttachmentDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s standardAttachmentDo) Order(conds ...field.Expr) IStandardAttachmentDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s standardAttachmentDo) Distinct(cols ...field.Expr) IStandardAttachmentDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s standardAttachmentDo) Omit(cols ...field.Expr) IStandardAttachmentDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s standardAttachmentDo) Join(table schema.Tabler, on ...field.Expr) IStandardAttachmentDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s standardAttachmentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStandardAttachmentDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s standardAttachmentDo) RightJoin(table schema.Tabler, on ...field.Expr) IStandardAttachmentDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s standardAttachmentDo) Group(cols ...field.Expr) IStandardAttachmentDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s standardAttachmentDo) Having(conds ...gen.Condition) IStandardAttachmentDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s standardAttachmentDo) Limit(limit int) IStandardAttachmentDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s standardAttachmentDo) Offset(offset int) IStandardAttachmentDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s standardAttachmentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStandardAttachmentDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s standardAttachmentDo) Unscoped() IStandardAttachmentDo {
	return s.withDO(s.DO.Unscoped())
}

func (s standardAttachmentDo) Create(values ...*model.StandardAttachment) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s standardAttachmentDo) CreateInBatches(values []*model.StandardAttachment, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s standardAttachmentDo) Save(values ...*model.StandardAttachment) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s standardAttachmentDo) First() (*model.StandardAttachment, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StandardAttachment), nil
	}
}

func (s standardAttachmentDo) Take() (*model.StandardAttachment, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StandardAttachment), nil
	}
}

func (s standardAttachmentDo) Last() (*model.StandardAttachment, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StandardAttachment), nil
	}
}

func (s standardAttachmentDo) Find() ([]*model.StandardAttachment, error) {
	result, err := s.DO.Find()
	return result.([]*model.StandardAttachment), err
}

func (s standardAttachmentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StandardAttachment, err error) {
	buf := make([]*model.StandardAttachment, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s standardAttachmentDo) FindInBatches(result *[]*model.StandardAttachment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s standardAttachmentDo) Attrs(attrs ...field.AssignExpr) IStandardAttachmentDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s standardAttachmentDo) Assign(attrs ...field.AssignExpr) IStandardAttachmentDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s standardAttachmentDo) Joins(fields ...field.RelationField) IStandardAttachmentDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s standardAttachmentDo) Preload(fields ...field.RelationField) IStandardAttachmentDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s standardAttachmentDo) FirstOrInit() (*model.StandardAttachment, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StandardAttachment), nil
	}
}

func (s standardAttachmentDo) FirstOrCreate() (*model.StandardAttachment, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StandardAttachment), nil
	}
}

func (s standardAttachmentDo) FindByPage(offset int, limit int) (result []*model.StandardAttachment, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s standardAttachmentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s standardAttachmentDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s standardAttachmentDo) Delete(models ...*model.StandardAttachment) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *standardAttachmentDo) withDO(do gen.Dao) *standardAttachmentDo {
	s.DO = *do.(*gen.DO)
	return s
}
