// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newArticleDataMimePlain(db *gorm.DB, opts ...gen.DOOption) articleDataMimePlain {
	_articleDataMimePlain := articleDataMimePlain{}

	_articleDataMimePlain.articleDataMimePlainDo.UseDB(db, opts...)
	_articleDataMimePlain.articleDataMimePlainDo.UseModel(&model.ArticleDataMimePlain{})

	tableName := _articleDataMimePlain.articleDataMimePlainDo.TableName()
	_articleDataMimePlain.ALL = field.NewAsterisk(tableName)
	_articleDataMimePlain.ID = field.NewInt64(tableName, "id")
	_articleDataMimePlain.ArticleID = field.NewInt64(tableName, "article_id")
	_articleDataMimePlain.Body = field.NewBytes(tableName, "body")
	_articleDataMimePlain.CreateTime = field.NewTime(tableName, "create_time")
	_articleDataMimePlain.CreateBy = field.NewInt32(tableName, "create_by")
	_articleDataMimePlain.ChangeTime = field.NewTime(tableName, "change_time")
	_articleDataMimePlain.ChangeBy = field.NewInt32(tableName, "change_by")

	_articleDataMimePlain.fillFieldMap()

	return _articleDataMimePlain
}

type articleDataMimePlain struct {
	articleDataMimePlainDo

	ALL        field.Asterisk
	ID         field.Int64
	ArticleID  field.Int64
	Body       field.Bytes
	CreateTime field.Time
	CreateBy   field.Int32
	ChangeTime field.Time
	ChangeBy   field.Int32

	fieldMap map[string]field.Expr
}

func (a articleDataMimePlain) Table(newTableName string) *articleDataMimePlain {
	a.articleDataMimePlainDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a articleDataMimePlain) As(alias string) *articleDataMimePlain {
	a.articleDataMimePlainDo.DO = *(a.articleDataMimePlainDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *articleDataMimePlain) updateTableName(table string) *articleDataMimePlain {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.ArticleID = field.NewInt64(table, "article_id")
	a.Body = field.NewBytes(table, "body")
	a.CreateTime = field.NewTime(table, "create_time")
	a.CreateBy = field.NewInt32(table, "create_by")
	a.ChangeTime = field.NewTime(table, "change_time")
	a.ChangeBy = field.NewInt32(table, "change_by")

	a.fillFieldMap()

	return a
}

func (a *articleDataMimePlain) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *articleDataMimePlain) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["id"] = a.ID
	a.fieldMap["article_id"] = a.ArticleID
	a.fieldMap["body"] = a.Body
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["create_by"] = a.CreateBy
	a.fieldMap["change_time"] = a.ChangeTime
	a.fieldMap["change_by"] = a.ChangeBy
}

func (a articleDataMimePlain) clone(db *gorm.DB) articleDataMimePlain {
	a.articleDataMimePlainDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a articleDataMimePlain) replaceDB(db *gorm.DB) articleDataMimePlain {
	a.articleDataMimePlainDo.ReplaceDB(db)
	return a
}

type articleDataMimePlainDo struct{ gen.DO }

type IArticleDataMimePlainDo interface {
	gen.SubQuery
	Debug() IArticleDataMimePlainDo
	WithContext(ctx context.Context) IArticleDataMimePlainDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IArticleDataMimePlainDo
	WriteDB() IArticleDataMimePlainDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IArticleDataMimePlainDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IArticleDataMimePlainDo
	Not(conds ...gen.Condition) IArticleDataMimePlainDo
	Or(conds ...gen.Condition) IArticleDataMimePlainDo
	Select(conds ...field.Expr) IArticleDataMimePlainDo
	Where(conds ...gen.Condition) IArticleDataMimePlainDo
	Order(conds ...field.Expr) IArticleDataMimePlainDo
	Distinct(cols ...field.Expr) IArticleDataMimePlainDo
	Omit(cols ...field.Expr) IArticleDataMimePlainDo
	Join(table schema.Tabler, on ...field.Expr) IArticleDataMimePlainDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IArticleDataMimePlainDo
	RightJoin(table schema.Tabler, on ...field.Expr) IArticleDataMimePlainDo
	Group(cols ...field.Expr) IArticleDataMimePlainDo
	Having(conds ...gen.Condition) IArticleDataMimePlainDo
	Limit(limit int) IArticleDataMimePlainDo
	Offset(offset int) IArticleDataMimePlainDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IArticleDataMimePlainDo
	Unscoped() IArticleDataMimePlainDo
	Create(values ...*model.ArticleDataMimePlain) error
	CreateInBatches(values []*model.ArticleDataMimePlain, batchSize int) error
	Save(values ...*model.ArticleDataMimePlain) error
	First() (*model.ArticleDataMimePlain, error)
	Take() (*model.ArticleDataMimePlain, error)
	Last() (*model.ArticleDataMimePlain, error)
	Find() ([]*model.ArticleDataMimePlain, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ArticleDataMimePlain, err error)
	FindInBatches(result *[]*model.ArticleDataMimePlain, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ArticleDataMimePlain) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IArticleDataMimePlainDo
	Assign(attrs ...field.AssignExpr) IArticleDataMimePlainDo
	Joins(fields ...field.RelationField) IArticleDataMimePlainDo
	Preload(fields ...field.RelationField) IArticleDataMimePlainDo
	FirstOrInit() (*model.ArticleDataMimePlain, error)
	FirstOrCreate() (*model.ArticleDataMimePlain, error)
	FindByPage(offset int, limit int) (result []*model.ArticleDataMimePlain, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IArticleDataMimePlainDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a articleDataMimePlainDo) Debug() IArticleDataMimePlainDo {
	return a.withDO(a.DO.Debug())
}

func (a articleDataMimePlainDo) WithContext(ctx context.Context) IArticleDataMimePlainDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a articleDataMimePlainDo) ReadDB() IArticleDataMimePlainDo {
	return a.Clauses(dbresolver.Read)
}

func (a articleDataMimePlainDo) WriteDB() IArticleDataMimePlainDo {
	return a.Clauses(dbresolver.Write)
}

func (a articleDataMimePlainDo) Session(config *gorm.Session) IArticleDataMimePlainDo {
	return a.withDO(a.DO.Session(config))
}

func (a articleDataMimePlainDo) Clauses(conds ...clause.Expression) IArticleDataMimePlainDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a articleDataMimePlainDo) Returning(value interface{}, columns ...string) IArticleDataMimePlainDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a articleDataMimePlainDo) Not(conds ...gen.Condition) IArticleDataMimePlainDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a articleDataMimePlainDo) Or(conds ...gen.Condition) IArticleDataMimePlainDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a articleDataMimePlainDo) Select(conds ...field.Expr) IArticleDataMimePlainDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a articleDataMimePlainDo) Where(conds ...gen.Condition) IArticleDataMimePlainDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a articleDataMimePlainDo) Order(conds ...field.Expr) IArticleDataMimePlainDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a articleDataMimePlainDo) Distinct(cols ...field.Expr) IArticleDataMimePlainDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a articleDataMimePlainDo) Omit(cols ...field.Expr) IArticleDataMimePlainDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a articleDataMimePlainDo) Join(table schema.Tabler, on ...field.Expr) IArticleDataMimePlainDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a articleDataMimePlainDo) LeftJoin(table schema.Tabler, on ...field.Expr) IArticleDataMimePlainDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a articleDataMimePlainDo) RightJoin(table schema.Tabler, on ...field.Expr) IArticleDataMimePlainDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a articleDataMimePlainDo) Group(cols ...field.Expr) IArticleDataMimePlainDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a articleDataMimePlainDo) Having(conds ...gen.Condition) IArticleDataMimePlainDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a articleDataMimePlainDo) Limit(limit int) IArticleDataMimePlainDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a articleDataMimePlainDo) Offset(offset int) IArticleDataMimePlainDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a articleDataMimePlainDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IArticleDataMimePlainDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a articleDataMimePlainDo) Unscoped() IArticleDataMimePlainDo {
	return a.withDO(a.DO.Unscoped())
}

func (a articleDataMimePlainDo) Create(values ...*model.ArticleDataMimePlain) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a articleDataMimePlainDo) CreateInBatches(values []*model.ArticleDataMimePlain, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a articleDataMimePlainDo) Save(values ...*model.ArticleDataMimePlain) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a articleDataMimePlainDo) First() (*model.ArticleDataMimePlain, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleDataMimePlain), nil
	}
}

func (a articleDataMimePlainDo) Take() (*model.ArticleDataMimePlain, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleDataMimePlain), nil
	}
}

func (a articleDataMimePlainDo) Last() (*model.ArticleDataMimePlain, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleDataMimePlain), nil
	}
}

func (a articleDataMimePlainDo) Find() ([]*model.ArticleDataMimePlain, error) {
	result, err := a.DO.Find()
	return result.([]*model.ArticleDataMimePlain), err
}

func (a articleDataMimePlainDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ArticleDataMimePlain, err error) {
	buf := make([]*model.ArticleDataMimePlain, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a articleDataMimePlainDo) FindInBatches(result *[]*model.ArticleDataMimePlain, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a articleDataMimePlainDo) Attrs(attrs ...field.AssignExpr) IArticleDataMimePlainDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a articleDataMimePlainDo) Assign(attrs ...field.AssignExpr) IArticleDataMimePlainDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a articleDataMimePlainDo) Joins(fields ...field.RelationField) IArticleDataMimePlainDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a articleDataMimePlainDo) Preload(fields ...field.RelationField) IArticleDataMimePlainDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a articleDataMimePlainDo) FirstOrInit() (*model.ArticleDataMimePlain, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleDataMimePlain), nil
	}
}

func (a articleDataMimePlainDo) FirstOrCreate() (*model.ArticleDataMimePlain, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleDataMimePlain), nil
	}
}

func (a articleDataMimePlainDo) FindByPage(offset int, limit int) (result []*model.ArticleDataMimePlain, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a articleDataMimePlainDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a articleDataMimePlainDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a articleDataMimePlainDo) Delete(models ...*model.ArticleDataMimePlain) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *articleDataMimePlainDo) withDO(do gen.Dao) *articleDataMimePlainDo {
	a.DO = *do.(*gen.DO)
	return a
}
