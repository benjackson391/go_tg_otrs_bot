// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newTicketState(db *gorm.DB, opts ...gen.DOOption) ticketState {
	_ticketState := ticketState{}

	_ticketState.ticketStateDo.UseDB(db, opts...)
	_ticketState.ticketStateDo.UseModel(&model.TicketState{})

	tableName := _ticketState.ticketStateDo.TableName()
	_ticketState.ALL = field.NewAsterisk(tableName)
	_ticketState.ID = field.NewInt32(tableName, "id")
	_ticketState.Name = field.NewString(tableName, "name")
	_ticketState.Comments = field.NewString(tableName, "comments")
	_ticketState.TypeID = field.NewInt32(tableName, "type_id")
	_ticketState.ValidID = field.NewInt32(tableName, "valid_id")
	_ticketState.CreateTime = field.NewTime(tableName, "create_time")
	_ticketState.CreateBy = field.NewInt32(tableName, "create_by")
	_ticketState.ChangeTime = field.NewTime(tableName, "change_time")
	_ticketState.ChangeBy = field.NewInt32(tableName, "change_by")

	_ticketState.fillFieldMap()

	return _ticketState
}

type ticketState struct {
	ticketStateDo

	ALL        field.Asterisk
	ID         field.Int32
	Name       field.String
	Comments   field.String
	TypeID     field.Int32
	ValidID    field.Int32
	CreateTime field.Time
	CreateBy   field.Int32
	ChangeTime field.Time
	ChangeBy   field.Int32

	fieldMap map[string]field.Expr
}

func (t ticketState) Table(newTableName string) *ticketState {
	t.ticketStateDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t ticketState) As(alias string) *ticketState {
	t.ticketStateDo.DO = *(t.ticketStateDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *ticketState) updateTableName(table string) *ticketState {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.Name = field.NewString(table, "name")
	t.Comments = field.NewString(table, "comments")
	t.TypeID = field.NewInt32(table, "type_id")
	t.ValidID = field.NewInt32(table, "valid_id")
	t.CreateTime = field.NewTime(table, "create_time")
	t.CreateBy = field.NewInt32(table, "create_by")
	t.ChangeTime = field.NewTime(table, "change_time")
	t.ChangeBy = field.NewInt32(table, "change_by")

	t.fillFieldMap()

	return t
}

func (t *ticketState) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *ticketState) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 9)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["comments"] = t.Comments
	t.fieldMap["type_id"] = t.TypeID
	t.fieldMap["valid_id"] = t.ValidID
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["create_by"] = t.CreateBy
	t.fieldMap["change_time"] = t.ChangeTime
	t.fieldMap["change_by"] = t.ChangeBy
}

func (t ticketState) clone(db *gorm.DB) ticketState {
	t.ticketStateDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t ticketState) replaceDB(db *gorm.DB) ticketState {
	t.ticketStateDo.ReplaceDB(db)
	return t
}

type ticketStateDo struct{ gen.DO }

type ITicketStateDo interface {
	gen.SubQuery
	Debug() ITicketStateDo
	WithContext(ctx context.Context) ITicketStateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITicketStateDo
	WriteDB() ITicketStateDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITicketStateDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITicketStateDo
	Not(conds ...gen.Condition) ITicketStateDo
	Or(conds ...gen.Condition) ITicketStateDo
	Select(conds ...field.Expr) ITicketStateDo
	Where(conds ...gen.Condition) ITicketStateDo
	Order(conds ...field.Expr) ITicketStateDo
	Distinct(cols ...field.Expr) ITicketStateDo
	Omit(cols ...field.Expr) ITicketStateDo
	Join(table schema.Tabler, on ...field.Expr) ITicketStateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITicketStateDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITicketStateDo
	Group(cols ...field.Expr) ITicketStateDo
	Having(conds ...gen.Condition) ITicketStateDo
	Limit(limit int) ITicketStateDo
	Offset(offset int) ITicketStateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITicketStateDo
	Unscoped() ITicketStateDo
	Create(values ...*model.TicketState) error
	CreateInBatches(values []*model.TicketState, batchSize int) error
	Save(values ...*model.TicketState) error
	First() (*model.TicketState, error)
	Take() (*model.TicketState, error)
	Last() (*model.TicketState, error)
	Find() ([]*model.TicketState, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TicketState, err error)
	FindInBatches(result *[]*model.TicketState, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TicketState) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITicketStateDo
	Assign(attrs ...field.AssignExpr) ITicketStateDo
	Joins(fields ...field.RelationField) ITicketStateDo
	Preload(fields ...field.RelationField) ITicketStateDo
	FirstOrInit() (*model.TicketState, error)
	FirstOrCreate() (*model.TicketState, error)
	FindByPage(offset int, limit int) (result []*model.TicketState, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITicketStateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t ticketStateDo) Debug() ITicketStateDo {
	return t.withDO(t.DO.Debug())
}

func (t ticketStateDo) WithContext(ctx context.Context) ITicketStateDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t ticketStateDo) ReadDB() ITicketStateDo {
	return t.Clauses(dbresolver.Read)
}

func (t ticketStateDo) WriteDB() ITicketStateDo {
	return t.Clauses(dbresolver.Write)
}

func (t ticketStateDo) Session(config *gorm.Session) ITicketStateDo {
	return t.withDO(t.DO.Session(config))
}

func (t ticketStateDo) Clauses(conds ...clause.Expression) ITicketStateDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t ticketStateDo) Returning(value interface{}, columns ...string) ITicketStateDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t ticketStateDo) Not(conds ...gen.Condition) ITicketStateDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t ticketStateDo) Or(conds ...gen.Condition) ITicketStateDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t ticketStateDo) Select(conds ...field.Expr) ITicketStateDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t ticketStateDo) Where(conds ...gen.Condition) ITicketStateDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t ticketStateDo) Order(conds ...field.Expr) ITicketStateDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t ticketStateDo) Distinct(cols ...field.Expr) ITicketStateDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t ticketStateDo) Omit(cols ...field.Expr) ITicketStateDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t ticketStateDo) Join(table schema.Tabler, on ...field.Expr) ITicketStateDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t ticketStateDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITicketStateDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t ticketStateDo) RightJoin(table schema.Tabler, on ...field.Expr) ITicketStateDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t ticketStateDo) Group(cols ...field.Expr) ITicketStateDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t ticketStateDo) Having(conds ...gen.Condition) ITicketStateDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t ticketStateDo) Limit(limit int) ITicketStateDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t ticketStateDo) Offset(offset int) ITicketStateDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t ticketStateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITicketStateDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t ticketStateDo) Unscoped() ITicketStateDo {
	return t.withDO(t.DO.Unscoped())
}

func (t ticketStateDo) Create(values ...*model.TicketState) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t ticketStateDo) CreateInBatches(values []*model.TicketState, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t ticketStateDo) Save(values ...*model.TicketState) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t ticketStateDo) First() (*model.TicketState, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketState), nil
	}
}

func (t ticketStateDo) Take() (*model.TicketState, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketState), nil
	}
}

func (t ticketStateDo) Last() (*model.TicketState, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketState), nil
	}
}

func (t ticketStateDo) Find() ([]*model.TicketState, error) {
	result, err := t.DO.Find()
	return result.([]*model.TicketState), err
}

func (t ticketStateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TicketState, err error) {
	buf := make([]*model.TicketState, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t ticketStateDo) FindInBatches(result *[]*model.TicketState, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t ticketStateDo) Attrs(attrs ...field.AssignExpr) ITicketStateDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t ticketStateDo) Assign(attrs ...field.AssignExpr) ITicketStateDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t ticketStateDo) Joins(fields ...field.RelationField) ITicketStateDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t ticketStateDo) Preload(fields ...field.RelationField) ITicketStateDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t ticketStateDo) FirstOrInit() (*model.TicketState, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketState), nil
	}
}

func (t ticketStateDo) FirstOrCreate() (*model.TicketState, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketState), nil
	}
}

func (t ticketStateDo) FindByPage(offset int, limit int) (result []*model.TicketState, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t ticketStateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t ticketStateDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t ticketStateDo) Delete(models ...*model.TicketState) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *ticketStateDo) withDO(do gen.Dao) *ticketStateDo {
	t.DO = *do.(*gen.DO)
	return t
}
