// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newTicketLockIndex(db *gorm.DB, opts ...gen.DOOption) ticketLockIndex {
	_ticketLockIndex := ticketLockIndex{}

	_ticketLockIndex.ticketLockIndexDo.UseDB(db, opts...)
	_ticketLockIndex.ticketLockIndexDo.UseModel(&model.TicketLockIndex{})

	tableName := _ticketLockIndex.ticketLockIndexDo.TableName()
	_ticketLockIndex.ALL = field.NewAsterisk(tableName)
	_ticketLockIndex.TicketID = field.NewInt64(tableName, "ticket_id")

	_ticketLockIndex.fillFieldMap()

	return _ticketLockIndex
}

type ticketLockIndex struct {
	ticketLockIndexDo

	ALL      field.Asterisk
	TicketID field.Int64

	fieldMap map[string]field.Expr
}

func (t ticketLockIndex) Table(newTableName string) *ticketLockIndex {
	t.ticketLockIndexDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t ticketLockIndex) As(alias string) *ticketLockIndex {
	t.ticketLockIndexDo.DO = *(t.ticketLockIndexDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *ticketLockIndex) updateTableName(table string) *ticketLockIndex {
	t.ALL = field.NewAsterisk(table)
	t.TicketID = field.NewInt64(table, "ticket_id")

	t.fillFieldMap()

	return t
}

func (t *ticketLockIndex) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *ticketLockIndex) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 1)
	t.fieldMap["ticket_id"] = t.TicketID
}

func (t ticketLockIndex) clone(db *gorm.DB) ticketLockIndex {
	t.ticketLockIndexDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t ticketLockIndex) replaceDB(db *gorm.DB) ticketLockIndex {
	t.ticketLockIndexDo.ReplaceDB(db)
	return t
}

type ticketLockIndexDo struct{ gen.DO }

type ITicketLockIndexDo interface {
	gen.SubQuery
	Debug() ITicketLockIndexDo
	WithContext(ctx context.Context) ITicketLockIndexDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITicketLockIndexDo
	WriteDB() ITicketLockIndexDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITicketLockIndexDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITicketLockIndexDo
	Not(conds ...gen.Condition) ITicketLockIndexDo
	Or(conds ...gen.Condition) ITicketLockIndexDo
	Select(conds ...field.Expr) ITicketLockIndexDo
	Where(conds ...gen.Condition) ITicketLockIndexDo
	Order(conds ...field.Expr) ITicketLockIndexDo
	Distinct(cols ...field.Expr) ITicketLockIndexDo
	Omit(cols ...field.Expr) ITicketLockIndexDo
	Join(table schema.Tabler, on ...field.Expr) ITicketLockIndexDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITicketLockIndexDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITicketLockIndexDo
	Group(cols ...field.Expr) ITicketLockIndexDo
	Having(conds ...gen.Condition) ITicketLockIndexDo
	Limit(limit int) ITicketLockIndexDo
	Offset(offset int) ITicketLockIndexDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITicketLockIndexDo
	Unscoped() ITicketLockIndexDo
	Create(values ...*model.TicketLockIndex) error
	CreateInBatches(values []*model.TicketLockIndex, batchSize int) error
	Save(values ...*model.TicketLockIndex) error
	First() (*model.TicketLockIndex, error)
	Take() (*model.TicketLockIndex, error)
	Last() (*model.TicketLockIndex, error)
	Find() ([]*model.TicketLockIndex, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TicketLockIndex, err error)
	FindInBatches(result *[]*model.TicketLockIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TicketLockIndex) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITicketLockIndexDo
	Assign(attrs ...field.AssignExpr) ITicketLockIndexDo
	Joins(fields ...field.RelationField) ITicketLockIndexDo
	Preload(fields ...field.RelationField) ITicketLockIndexDo
	FirstOrInit() (*model.TicketLockIndex, error)
	FirstOrCreate() (*model.TicketLockIndex, error)
	FindByPage(offset int, limit int) (result []*model.TicketLockIndex, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITicketLockIndexDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t ticketLockIndexDo) Debug() ITicketLockIndexDo {
	return t.withDO(t.DO.Debug())
}

func (t ticketLockIndexDo) WithContext(ctx context.Context) ITicketLockIndexDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t ticketLockIndexDo) ReadDB() ITicketLockIndexDo {
	return t.Clauses(dbresolver.Read)
}

func (t ticketLockIndexDo) WriteDB() ITicketLockIndexDo {
	return t.Clauses(dbresolver.Write)
}

func (t ticketLockIndexDo) Session(config *gorm.Session) ITicketLockIndexDo {
	return t.withDO(t.DO.Session(config))
}

func (t ticketLockIndexDo) Clauses(conds ...clause.Expression) ITicketLockIndexDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t ticketLockIndexDo) Returning(value interface{}, columns ...string) ITicketLockIndexDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t ticketLockIndexDo) Not(conds ...gen.Condition) ITicketLockIndexDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t ticketLockIndexDo) Or(conds ...gen.Condition) ITicketLockIndexDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t ticketLockIndexDo) Select(conds ...field.Expr) ITicketLockIndexDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t ticketLockIndexDo) Where(conds ...gen.Condition) ITicketLockIndexDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t ticketLockIndexDo) Order(conds ...field.Expr) ITicketLockIndexDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t ticketLockIndexDo) Distinct(cols ...field.Expr) ITicketLockIndexDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t ticketLockIndexDo) Omit(cols ...field.Expr) ITicketLockIndexDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t ticketLockIndexDo) Join(table schema.Tabler, on ...field.Expr) ITicketLockIndexDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t ticketLockIndexDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITicketLockIndexDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t ticketLockIndexDo) RightJoin(table schema.Tabler, on ...field.Expr) ITicketLockIndexDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t ticketLockIndexDo) Group(cols ...field.Expr) ITicketLockIndexDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t ticketLockIndexDo) Having(conds ...gen.Condition) ITicketLockIndexDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t ticketLockIndexDo) Limit(limit int) ITicketLockIndexDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t ticketLockIndexDo) Offset(offset int) ITicketLockIndexDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t ticketLockIndexDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITicketLockIndexDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t ticketLockIndexDo) Unscoped() ITicketLockIndexDo {
	return t.withDO(t.DO.Unscoped())
}

func (t ticketLockIndexDo) Create(values ...*model.TicketLockIndex) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t ticketLockIndexDo) CreateInBatches(values []*model.TicketLockIndex, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t ticketLockIndexDo) Save(values ...*model.TicketLockIndex) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t ticketLockIndexDo) First() (*model.TicketLockIndex, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketLockIndex), nil
	}
}

func (t ticketLockIndexDo) Take() (*model.TicketLockIndex, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketLockIndex), nil
	}
}

func (t ticketLockIndexDo) Last() (*model.TicketLockIndex, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketLockIndex), nil
	}
}

func (t ticketLockIndexDo) Find() ([]*model.TicketLockIndex, error) {
	result, err := t.DO.Find()
	return result.([]*model.TicketLockIndex), err
}

func (t ticketLockIndexDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TicketLockIndex, err error) {
	buf := make([]*model.TicketLockIndex, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t ticketLockIndexDo) FindInBatches(result *[]*model.TicketLockIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t ticketLockIndexDo) Attrs(attrs ...field.AssignExpr) ITicketLockIndexDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t ticketLockIndexDo) Assign(attrs ...field.AssignExpr) ITicketLockIndexDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t ticketLockIndexDo) Joins(fields ...field.RelationField) ITicketLockIndexDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t ticketLockIndexDo) Preload(fields ...field.RelationField) ITicketLockIndexDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t ticketLockIndexDo) FirstOrInit() (*model.TicketLockIndex, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketLockIndex), nil
	}
}

func (t ticketLockIndexDo) FirstOrCreate() (*model.TicketLockIndex, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketLockIndex), nil
	}
}

func (t ticketLockIndexDo) FindByPage(offset int, limit int) (result []*model.TicketLockIndex, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t ticketLockIndexDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t ticketLockIndexDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t ticketLockIndexDo) Delete(models ...*model.TicketLockIndex) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *ticketLockIndexDo) withDO(do gen.Dao) *ticketLockIndexDo {
	t.DO = *do.(*gen.DO)
	return t
}
