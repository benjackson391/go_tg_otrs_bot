// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newLinkType(db *gorm.DB, opts ...gen.DOOption) linkType {
	_linkType := linkType{}

	_linkType.linkTypeDo.UseDB(db, opts...)
	_linkType.linkTypeDo.UseModel(&model.LinkType{})

	tableName := _linkType.linkTypeDo.TableName()
	_linkType.ALL = field.NewAsterisk(tableName)
	_linkType.ID = field.NewInt32(tableName, "id")
	_linkType.Name = field.NewString(tableName, "name")
	_linkType.ValidID = field.NewInt32(tableName, "valid_id")
	_linkType.CreateTime = field.NewTime(tableName, "create_time")
	_linkType.CreateBy = field.NewInt32(tableName, "create_by")
	_linkType.ChangeTime = field.NewTime(tableName, "change_time")
	_linkType.ChangeBy = field.NewInt32(tableName, "change_by")

	_linkType.fillFieldMap()

	return _linkType
}

type linkType struct {
	linkTypeDo

	ALL        field.Asterisk
	ID         field.Int32
	Name       field.String
	ValidID    field.Int32
	CreateTime field.Time
	CreateBy   field.Int32
	ChangeTime field.Time
	ChangeBy   field.Int32

	fieldMap map[string]field.Expr
}

func (l linkType) Table(newTableName string) *linkType {
	l.linkTypeDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l linkType) As(alias string) *linkType {
	l.linkTypeDo.DO = *(l.linkTypeDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *linkType) updateTableName(table string) *linkType {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt32(table, "id")
	l.Name = field.NewString(table, "name")
	l.ValidID = field.NewInt32(table, "valid_id")
	l.CreateTime = field.NewTime(table, "create_time")
	l.CreateBy = field.NewInt32(table, "create_by")
	l.ChangeTime = field.NewTime(table, "change_time")
	l.ChangeBy = field.NewInt32(table, "change_by")

	l.fillFieldMap()

	return l
}

func (l *linkType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *linkType) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 7)
	l.fieldMap["id"] = l.ID
	l.fieldMap["name"] = l.Name
	l.fieldMap["valid_id"] = l.ValidID
	l.fieldMap["create_time"] = l.CreateTime
	l.fieldMap["create_by"] = l.CreateBy
	l.fieldMap["change_time"] = l.ChangeTime
	l.fieldMap["change_by"] = l.ChangeBy
}

func (l linkType) clone(db *gorm.DB) linkType {
	l.linkTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l linkType) replaceDB(db *gorm.DB) linkType {
	l.linkTypeDo.ReplaceDB(db)
	return l
}

type linkTypeDo struct{ gen.DO }

type ILinkTypeDo interface {
	gen.SubQuery
	Debug() ILinkTypeDo
	WithContext(ctx context.Context) ILinkTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILinkTypeDo
	WriteDB() ILinkTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILinkTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILinkTypeDo
	Not(conds ...gen.Condition) ILinkTypeDo
	Or(conds ...gen.Condition) ILinkTypeDo
	Select(conds ...field.Expr) ILinkTypeDo
	Where(conds ...gen.Condition) ILinkTypeDo
	Order(conds ...field.Expr) ILinkTypeDo
	Distinct(cols ...field.Expr) ILinkTypeDo
	Omit(cols ...field.Expr) ILinkTypeDo
	Join(table schema.Tabler, on ...field.Expr) ILinkTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILinkTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILinkTypeDo
	Group(cols ...field.Expr) ILinkTypeDo
	Having(conds ...gen.Condition) ILinkTypeDo
	Limit(limit int) ILinkTypeDo
	Offset(offset int) ILinkTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILinkTypeDo
	Unscoped() ILinkTypeDo
	Create(values ...*model.LinkType) error
	CreateInBatches(values []*model.LinkType, batchSize int) error
	Save(values ...*model.LinkType) error
	First() (*model.LinkType, error)
	Take() (*model.LinkType, error)
	Last() (*model.LinkType, error)
	Find() ([]*model.LinkType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LinkType, err error)
	FindInBatches(result *[]*model.LinkType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LinkType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILinkTypeDo
	Assign(attrs ...field.AssignExpr) ILinkTypeDo
	Joins(fields ...field.RelationField) ILinkTypeDo
	Preload(fields ...field.RelationField) ILinkTypeDo
	FirstOrInit() (*model.LinkType, error)
	FirstOrCreate() (*model.LinkType, error)
	FindByPage(offset int, limit int) (result []*model.LinkType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILinkTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l linkTypeDo) Debug() ILinkTypeDo {
	return l.withDO(l.DO.Debug())
}

func (l linkTypeDo) WithContext(ctx context.Context) ILinkTypeDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l linkTypeDo) ReadDB() ILinkTypeDo {
	return l.Clauses(dbresolver.Read)
}

func (l linkTypeDo) WriteDB() ILinkTypeDo {
	return l.Clauses(dbresolver.Write)
}

func (l linkTypeDo) Session(config *gorm.Session) ILinkTypeDo {
	return l.withDO(l.DO.Session(config))
}

func (l linkTypeDo) Clauses(conds ...clause.Expression) ILinkTypeDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l linkTypeDo) Returning(value interface{}, columns ...string) ILinkTypeDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l linkTypeDo) Not(conds ...gen.Condition) ILinkTypeDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l linkTypeDo) Or(conds ...gen.Condition) ILinkTypeDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l linkTypeDo) Select(conds ...field.Expr) ILinkTypeDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l linkTypeDo) Where(conds ...gen.Condition) ILinkTypeDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l linkTypeDo) Order(conds ...field.Expr) ILinkTypeDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l linkTypeDo) Distinct(cols ...field.Expr) ILinkTypeDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l linkTypeDo) Omit(cols ...field.Expr) ILinkTypeDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l linkTypeDo) Join(table schema.Tabler, on ...field.Expr) ILinkTypeDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l linkTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILinkTypeDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l linkTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) ILinkTypeDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l linkTypeDo) Group(cols ...field.Expr) ILinkTypeDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l linkTypeDo) Having(conds ...gen.Condition) ILinkTypeDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l linkTypeDo) Limit(limit int) ILinkTypeDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l linkTypeDo) Offset(offset int) ILinkTypeDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l linkTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILinkTypeDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l linkTypeDo) Unscoped() ILinkTypeDo {
	return l.withDO(l.DO.Unscoped())
}

func (l linkTypeDo) Create(values ...*model.LinkType) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l linkTypeDo) CreateInBatches(values []*model.LinkType, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l linkTypeDo) Save(values ...*model.LinkType) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l linkTypeDo) First() (*model.LinkType, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LinkType), nil
	}
}

func (l linkTypeDo) Take() (*model.LinkType, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LinkType), nil
	}
}

func (l linkTypeDo) Last() (*model.LinkType, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LinkType), nil
	}
}

func (l linkTypeDo) Find() ([]*model.LinkType, error) {
	result, err := l.DO.Find()
	return result.([]*model.LinkType), err
}

func (l linkTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LinkType, err error) {
	buf := make([]*model.LinkType, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l linkTypeDo) FindInBatches(result *[]*model.LinkType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l linkTypeDo) Attrs(attrs ...field.AssignExpr) ILinkTypeDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l linkTypeDo) Assign(attrs ...field.AssignExpr) ILinkTypeDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l linkTypeDo) Joins(fields ...field.RelationField) ILinkTypeDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l linkTypeDo) Preload(fields ...field.RelationField) ILinkTypeDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l linkTypeDo) FirstOrInit() (*model.LinkType, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LinkType), nil
	}
}

func (l linkTypeDo) FirstOrCreate() (*model.LinkType, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LinkType), nil
	}
}

func (l linkTypeDo) FindByPage(offset int, limit int) (result []*model.LinkType, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l linkTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l linkTypeDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l linkTypeDo) Delete(models ...*model.LinkType) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *linkTypeDo) withDO(do gen.Dao) *linkTypeDo {
	l.DO = *do.(*gen.DO)
	return l
}
