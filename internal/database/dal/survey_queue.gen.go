// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newSurveyQueue(db *gorm.DB, opts ...gen.DOOption) surveyQueue {
	_surveyQueue := surveyQueue{}

	_surveyQueue.surveyQueueDo.UseDB(db, opts...)
	_surveyQueue.surveyQueueDo.UseModel(&model.SurveyQueue{})

	tableName := _surveyQueue.surveyQueueDo.TableName()
	_surveyQueue.ALL = field.NewAsterisk(tableName)
	_surveyQueue.SurveyID = field.NewInt64(tableName, "survey_id")
	_surveyQueue.QueueID = field.NewInt32(tableName, "queue_id")

	_surveyQueue.fillFieldMap()

	return _surveyQueue
}

type surveyQueue struct {
	surveyQueueDo

	ALL      field.Asterisk
	SurveyID field.Int64
	QueueID  field.Int32

	fieldMap map[string]field.Expr
}

func (s surveyQueue) Table(newTableName string) *surveyQueue {
	s.surveyQueueDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s surveyQueue) As(alias string) *surveyQueue {
	s.surveyQueueDo.DO = *(s.surveyQueueDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *surveyQueue) updateTableName(table string) *surveyQueue {
	s.ALL = field.NewAsterisk(table)
	s.SurveyID = field.NewInt64(table, "survey_id")
	s.QueueID = field.NewInt32(table, "queue_id")

	s.fillFieldMap()

	return s
}

func (s *surveyQueue) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *surveyQueue) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 2)
	s.fieldMap["survey_id"] = s.SurveyID
	s.fieldMap["queue_id"] = s.QueueID
}

func (s surveyQueue) clone(db *gorm.DB) surveyQueue {
	s.surveyQueueDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s surveyQueue) replaceDB(db *gorm.DB) surveyQueue {
	s.surveyQueueDo.ReplaceDB(db)
	return s
}

type surveyQueueDo struct{ gen.DO }

type ISurveyQueueDo interface {
	gen.SubQuery
	Debug() ISurveyQueueDo
	WithContext(ctx context.Context) ISurveyQueueDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISurveyQueueDo
	WriteDB() ISurveyQueueDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISurveyQueueDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISurveyQueueDo
	Not(conds ...gen.Condition) ISurveyQueueDo
	Or(conds ...gen.Condition) ISurveyQueueDo
	Select(conds ...field.Expr) ISurveyQueueDo
	Where(conds ...gen.Condition) ISurveyQueueDo
	Order(conds ...field.Expr) ISurveyQueueDo
	Distinct(cols ...field.Expr) ISurveyQueueDo
	Omit(cols ...field.Expr) ISurveyQueueDo
	Join(table schema.Tabler, on ...field.Expr) ISurveyQueueDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISurveyQueueDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISurveyQueueDo
	Group(cols ...field.Expr) ISurveyQueueDo
	Having(conds ...gen.Condition) ISurveyQueueDo
	Limit(limit int) ISurveyQueueDo
	Offset(offset int) ISurveyQueueDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISurveyQueueDo
	Unscoped() ISurveyQueueDo
	Create(values ...*model.SurveyQueue) error
	CreateInBatches(values []*model.SurveyQueue, batchSize int) error
	Save(values ...*model.SurveyQueue) error
	First() (*model.SurveyQueue, error)
	Take() (*model.SurveyQueue, error)
	Last() (*model.SurveyQueue, error)
	Find() ([]*model.SurveyQueue, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SurveyQueue, err error)
	FindInBatches(result *[]*model.SurveyQueue, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SurveyQueue) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISurveyQueueDo
	Assign(attrs ...field.AssignExpr) ISurveyQueueDo
	Joins(fields ...field.RelationField) ISurveyQueueDo
	Preload(fields ...field.RelationField) ISurveyQueueDo
	FirstOrInit() (*model.SurveyQueue, error)
	FirstOrCreate() (*model.SurveyQueue, error)
	FindByPage(offset int, limit int) (result []*model.SurveyQueue, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISurveyQueueDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s surveyQueueDo) Debug() ISurveyQueueDo {
	return s.withDO(s.DO.Debug())
}

func (s surveyQueueDo) WithContext(ctx context.Context) ISurveyQueueDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s surveyQueueDo) ReadDB() ISurveyQueueDo {
	return s.Clauses(dbresolver.Read)
}

func (s surveyQueueDo) WriteDB() ISurveyQueueDo {
	return s.Clauses(dbresolver.Write)
}

func (s surveyQueueDo) Session(config *gorm.Session) ISurveyQueueDo {
	return s.withDO(s.DO.Session(config))
}

func (s surveyQueueDo) Clauses(conds ...clause.Expression) ISurveyQueueDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s surveyQueueDo) Returning(value interface{}, columns ...string) ISurveyQueueDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s surveyQueueDo) Not(conds ...gen.Condition) ISurveyQueueDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s surveyQueueDo) Or(conds ...gen.Condition) ISurveyQueueDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s surveyQueueDo) Select(conds ...field.Expr) ISurveyQueueDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s surveyQueueDo) Where(conds ...gen.Condition) ISurveyQueueDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s surveyQueueDo) Order(conds ...field.Expr) ISurveyQueueDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s surveyQueueDo) Distinct(cols ...field.Expr) ISurveyQueueDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s surveyQueueDo) Omit(cols ...field.Expr) ISurveyQueueDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s surveyQueueDo) Join(table schema.Tabler, on ...field.Expr) ISurveyQueueDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s surveyQueueDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISurveyQueueDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s surveyQueueDo) RightJoin(table schema.Tabler, on ...field.Expr) ISurveyQueueDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s surveyQueueDo) Group(cols ...field.Expr) ISurveyQueueDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s surveyQueueDo) Having(conds ...gen.Condition) ISurveyQueueDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s surveyQueueDo) Limit(limit int) ISurveyQueueDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s surveyQueueDo) Offset(offset int) ISurveyQueueDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s surveyQueueDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISurveyQueueDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s surveyQueueDo) Unscoped() ISurveyQueueDo {
	return s.withDO(s.DO.Unscoped())
}

func (s surveyQueueDo) Create(values ...*model.SurveyQueue) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s surveyQueueDo) CreateInBatches(values []*model.SurveyQueue, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s surveyQueueDo) Save(values ...*model.SurveyQueue) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s surveyQueueDo) First() (*model.SurveyQueue, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SurveyQueue), nil
	}
}

func (s surveyQueueDo) Take() (*model.SurveyQueue, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SurveyQueue), nil
	}
}

func (s surveyQueueDo) Last() (*model.SurveyQueue, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SurveyQueue), nil
	}
}

func (s surveyQueueDo) Find() ([]*model.SurveyQueue, error) {
	result, err := s.DO.Find()
	return result.([]*model.SurveyQueue), err
}

func (s surveyQueueDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SurveyQueue, err error) {
	buf := make([]*model.SurveyQueue, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s surveyQueueDo) FindInBatches(result *[]*model.SurveyQueue, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s surveyQueueDo) Attrs(attrs ...field.AssignExpr) ISurveyQueueDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s surveyQueueDo) Assign(attrs ...field.AssignExpr) ISurveyQueueDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s surveyQueueDo) Joins(fields ...field.RelationField) ISurveyQueueDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s surveyQueueDo) Preload(fields ...field.RelationField) ISurveyQueueDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s surveyQueueDo) FirstOrInit() (*model.SurveyQueue, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SurveyQueue), nil
	}
}

func (s surveyQueueDo) FirstOrCreate() (*model.SurveyQueue, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SurveyQueue), nil
	}
}

func (s surveyQueueDo) FindByPage(offset int, limit int) (result []*model.SurveyQueue, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s surveyQueueDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s surveyQueueDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s surveyQueueDo) Delete(models ...*model.SurveyQueue) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *surveyQueueDo) withDO(do gen.Dao) *surveyQueueDo {
	s.DO = *do.(*gen.DO)
	return s
}
