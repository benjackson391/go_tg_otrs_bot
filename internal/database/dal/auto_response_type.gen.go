// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newAutoResponseType(db *gorm.DB, opts ...gen.DOOption) autoResponseType {
	_autoResponseType := autoResponseType{}

	_autoResponseType.autoResponseTypeDo.UseDB(db, opts...)
	_autoResponseType.autoResponseTypeDo.UseModel(&model.AutoResponseType{})

	tableName := _autoResponseType.autoResponseTypeDo.TableName()
	_autoResponseType.ALL = field.NewAsterisk(tableName)
	_autoResponseType.ID = field.NewInt32(tableName, "id")
	_autoResponseType.Name = field.NewString(tableName, "name")
	_autoResponseType.Comments = field.NewString(tableName, "comments")
	_autoResponseType.ValidID = field.NewInt32(tableName, "valid_id")
	_autoResponseType.CreateTime = field.NewTime(tableName, "create_time")
	_autoResponseType.CreateBy = field.NewInt32(tableName, "create_by")
	_autoResponseType.ChangeTime = field.NewTime(tableName, "change_time")
	_autoResponseType.ChangeBy = field.NewInt32(tableName, "change_by")

	_autoResponseType.fillFieldMap()

	return _autoResponseType
}

type autoResponseType struct {
	autoResponseTypeDo

	ALL        field.Asterisk
	ID         field.Int32
	Name       field.String
	Comments   field.String
	ValidID    field.Int32
	CreateTime field.Time
	CreateBy   field.Int32
	ChangeTime field.Time
	ChangeBy   field.Int32

	fieldMap map[string]field.Expr
}

func (a autoResponseType) Table(newTableName string) *autoResponseType {
	a.autoResponseTypeDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a autoResponseType) As(alias string) *autoResponseType {
	a.autoResponseTypeDo.DO = *(a.autoResponseTypeDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *autoResponseType) updateTableName(table string) *autoResponseType {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.Name = field.NewString(table, "name")
	a.Comments = field.NewString(table, "comments")
	a.ValidID = field.NewInt32(table, "valid_id")
	a.CreateTime = field.NewTime(table, "create_time")
	a.CreateBy = field.NewInt32(table, "create_by")
	a.ChangeTime = field.NewTime(table, "change_time")
	a.ChangeBy = field.NewInt32(table, "change_by")

	a.fillFieldMap()

	return a
}

func (a *autoResponseType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *autoResponseType) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 8)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["comments"] = a.Comments
	a.fieldMap["valid_id"] = a.ValidID
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["create_by"] = a.CreateBy
	a.fieldMap["change_time"] = a.ChangeTime
	a.fieldMap["change_by"] = a.ChangeBy
}

func (a autoResponseType) clone(db *gorm.DB) autoResponseType {
	a.autoResponseTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a autoResponseType) replaceDB(db *gorm.DB) autoResponseType {
	a.autoResponseTypeDo.ReplaceDB(db)
	return a
}

type autoResponseTypeDo struct{ gen.DO }

type IAutoResponseTypeDo interface {
	gen.SubQuery
	Debug() IAutoResponseTypeDo
	WithContext(ctx context.Context) IAutoResponseTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAutoResponseTypeDo
	WriteDB() IAutoResponseTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAutoResponseTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAutoResponseTypeDo
	Not(conds ...gen.Condition) IAutoResponseTypeDo
	Or(conds ...gen.Condition) IAutoResponseTypeDo
	Select(conds ...field.Expr) IAutoResponseTypeDo
	Where(conds ...gen.Condition) IAutoResponseTypeDo
	Order(conds ...field.Expr) IAutoResponseTypeDo
	Distinct(cols ...field.Expr) IAutoResponseTypeDo
	Omit(cols ...field.Expr) IAutoResponseTypeDo
	Join(table schema.Tabler, on ...field.Expr) IAutoResponseTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAutoResponseTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAutoResponseTypeDo
	Group(cols ...field.Expr) IAutoResponseTypeDo
	Having(conds ...gen.Condition) IAutoResponseTypeDo
	Limit(limit int) IAutoResponseTypeDo
	Offset(offset int) IAutoResponseTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAutoResponseTypeDo
	Unscoped() IAutoResponseTypeDo
	Create(values ...*model.AutoResponseType) error
	CreateInBatches(values []*model.AutoResponseType, batchSize int) error
	Save(values ...*model.AutoResponseType) error
	First() (*model.AutoResponseType, error)
	Take() (*model.AutoResponseType, error)
	Last() (*model.AutoResponseType, error)
	Find() ([]*model.AutoResponseType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AutoResponseType, err error)
	FindInBatches(result *[]*model.AutoResponseType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AutoResponseType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAutoResponseTypeDo
	Assign(attrs ...field.AssignExpr) IAutoResponseTypeDo
	Joins(fields ...field.RelationField) IAutoResponseTypeDo
	Preload(fields ...field.RelationField) IAutoResponseTypeDo
	FirstOrInit() (*model.AutoResponseType, error)
	FirstOrCreate() (*model.AutoResponseType, error)
	FindByPage(offset int, limit int) (result []*model.AutoResponseType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAutoResponseTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a autoResponseTypeDo) Debug() IAutoResponseTypeDo {
	return a.withDO(a.DO.Debug())
}

func (a autoResponseTypeDo) WithContext(ctx context.Context) IAutoResponseTypeDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a autoResponseTypeDo) ReadDB() IAutoResponseTypeDo {
	return a.Clauses(dbresolver.Read)
}

func (a autoResponseTypeDo) WriteDB() IAutoResponseTypeDo {
	return a.Clauses(dbresolver.Write)
}

func (a autoResponseTypeDo) Session(config *gorm.Session) IAutoResponseTypeDo {
	return a.withDO(a.DO.Session(config))
}

func (a autoResponseTypeDo) Clauses(conds ...clause.Expression) IAutoResponseTypeDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a autoResponseTypeDo) Returning(value interface{}, columns ...string) IAutoResponseTypeDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a autoResponseTypeDo) Not(conds ...gen.Condition) IAutoResponseTypeDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a autoResponseTypeDo) Or(conds ...gen.Condition) IAutoResponseTypeDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a autoResponseTypeDo) Select(conds ...field.Expr) IAutoResponseTypeDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a autoResponseTypeDo) Where(conds ...gen.Condition) IAutoResponseTypeDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a autoResponseTypeDo) Order(conds ...field.Expr) IAutoResponseTypeDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a autoResponseTypeDo) Distinct(cols ...field.Expr) IAutoResponseTypeDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a autoResponseTypeDo) Omit(cols ...field.Expr) IAutoResponseTypeDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a autoResponseTypeDo) Join(table schema.Tabler, on ...field.Expr) IAutoResponseTypeDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a autoResponseTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAutoResponseTypeDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a autoResponseTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IAutoResponseTypeDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a autoResponseTypeDo) Group(cols ...field.Expr) IAutoResponseTypeDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a autoResponseTypeDo) Having(conds ...gen.Condition) IAutoResponseTypeDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a autoResponseTypeDo) Limit(limit int) IAutoResponseTypeDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a autoResponseTypeDo) Offset(offset int) IAutoResponseTypeDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a autoResponseTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAutoResponseTypeDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a autoResponseTypeDo) Unscoped() IAutoResponseTypeDo {
	return a.withDO(a.DO.Unscoped())
}

func (a autoResponseTypeDo) Create(values ...*model.AutoResponseType) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a autoResponseTypeDo) CreateInBatches(values []*model.AutoResponseType, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a autoResponseTypeDo) Save(values ...*model.AutoResponseType) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a autoResponseTypeDo) First() (*model.AutoResponseType, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoResponseType), nil
	}
}

func (a autoResponseTypeDo) Take() (*model.AutoResponseType, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoResponseType), nil
	}
}

func (a autoResponseTypeDo) Last() (*model.AutoResponseType, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoResponseType), nil
	}
}

func (a autoResponseTypeDo) Find() ([]*model.AutoResponseType, error) {
	result, err := a.DO.Find()
	return result.([]*model.AutoResponseType), err
}

func (a autoResponseTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AutoResponseType, err error) {
	buf := make([]*model.AutoResponseType, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a autoResponseTypeDo) FindInBatches(result *[]*model.AutoResponseType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a autoResponseTypeDo) Attrs(attrs ...field.AssignExpr) IAutoResponseTypeDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a autoResponseTypeDo) Assign(attrs ...field.AssignExpr) IAutoResponseTypeDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a autoResponseTypeDo) Joins(fields ...field.RelationField) IAutoResponseTypeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a autoResponseTypeDo) Preload(fields ...field.RelationField) IAutoResponseTypeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a autoResponseTypeDo) FirstOrInit() (*model.AutoResponseType, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoResponseType), nil
	}
}

func (a autoResponseTypeDo) FirstOrCreate() (*model.AutoResponseType, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoResponseType), nil
	}
}

func (a autoResponseTypeDo) FindByPage(offset int, limit int) (result []*model.AutoResponseType, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a autoResponseTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a autoResponseTypeDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a autoResponseTypeDo) Delete(models ...*model.AutoResponseType) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *autoResponseTypeDo) withDO(do gen.Dao) *autoResponseTypeDo {
	a.DO = *do.(*gen.DO)
	return a
}
