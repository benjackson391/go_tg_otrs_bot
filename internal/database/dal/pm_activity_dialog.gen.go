// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newPmActivityDialog(db *gorm.DB, opts ...gen.DOOption) pmActivityDialog {
	_pmActivityDialog := pmActivityDialog{}

	_pmActivityDialog.pmActivityDialogDo.UseDB(db, opts...)
	_pmActivityDialog.pmActivityDialogDo.UseModel(&model.PmActivityDialog{})

	tableName := _pmActivityDialog.pmActivityDialogDo.TableName()
	_pmActivityDialog.ALL = field.NewAsterisk(tableName)
	_pmActivityDialog.ID = field.NewInt32(tableName, "id")
	_pmActivityDialog.EntityID = field.NewString(tableName, "entity_id")
	_pmActivityDialog.Name = field.NewString(tableName, "name")
	_pmActivityDialog.Config = field.NewBytes(tableName, "config")
	_pmActivityDialog.CreateTime = field.NewTime(tableName, "create_time")
	_pmActivityDialog.CreateBy = field.NewInt32(tableName, "create_by")
	_pmActivityDialog.ChangeTime = field.NewTime(tableName, "change_time")
	_pmActivityDialog.ChangeBy = field.NewInt32(tableName, "change_by")

	_pmActivityDialog.fillFieldMap()

	return _pmActivityDialog
}

type pmActivityDialog struct {
	pmActivityDialogDo

	ALL        field.Asterisk
	ID         field.Int32
	EntityID   field.String
	Name       field.String
	Config     field.Bytes
	CreateTime field.Time
	CreateBy   field.Int32
	ChangeTime field.Time
	ChangeBy   field.Int32

	fieldMap map[string]field.Expr
}

func (p pmActivityDialog) Table(newTableName string) *pmActivityDialog {
	p.pmActivityDialogDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmActivityDialog) As(alias string) *pmActivityDialog {
	p.pmActivityDialogDo.DO = *(p.pmActivityDialogDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmActivityDialog) updateTableName(table string) *pmActivityDialog {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.EntityID = field.NewString(table, "entity_id")
	p.Name = field.NewString(table, "name")
	p.Config = field.NewBytes(table, "config")
	p.CreateTime = field.NewTime(table, "create_time")
	p.CreateBy = field.NewInt32(table, "create_by")
	p.ChangeTime = field.NewTime(table, "change_time")
	p.ChangeBy = field.NewInt32(table, "change_by")

	p.fillFieldMap()

	return p
}

func (p *pmActivityDialog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmActivityDialog) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.ID
	p.fieldMap["entity_id"] = p.EntityID
	p.fieldMap["name"] = p.Name
	p.fieldMap["config"] = p.Config
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["create_by"] = p.CreateBy
	p.fieldMap["change_time"] = p.ChangeTime
	p.fieldMap["change_by"] = p.ChangeBy
}

func (p pmActivityDialog) clone(db *gorm.DB) pmActivityDialog {
	p.pmActivityDialogDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmActivityDialog) replaceDB(db *gorm.DB) pmActivityDialog {
	p.pmActivityDialogDo.ReplaceDB(db)
	return p
}

type pmActivityDialogDo struct{ gen.DO }

type IPmActivityDialogDo interface {
	gen.SubQuery
	Debug() IPmActivityDialogDo
	WithContext(ctx context.Context) IPmActivityDialogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPmActivityDialogDo
	WriteDB() IPmActivityDialogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPmActivityDialogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPmActivityDialogDo
	Not(conds ...gen.Condition) IPmActivityDialogDo
	Or(conds ...gen.Condition) IPmActivityDialogDo
	Select(conds ...field.Expr) IPmActivityDialogDo
	Where(conds ...gen.Condition) IPmActivityDialogDo
	Order(conds ...field.Expr) IPmActivityDialogDo
	Distinct(cols ...field.Expr) IPmActivityDialogDo
	Omit(cols ...field.Expr) IPmActivityDialogDo
	Join(table schema.Tabler, on ...field.Expr) IPmActivityDialogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPmActivityDialogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPmActivityDialogDo
	Group(cols ...field.Expr) IPmActivityDialogDo
	Having(conds ...gen.Condition) IPmActivityDialogDo
	Limit(limit int) IPmActivityDialogDo
	Offset(offset int) IPmActivityDialogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPmActivityDialogDo
	Unscoped() IPmActivityDialogDo
	Create(values ...*model.PmActivityDialog) error
	CreateInBatches(values []*model.PmActivityDialog, batchSize int) error
	Save(values ...*model.PmActivityDialog) error
	First() (*model.PmActivityDialog, error)
	Take() (*model.PmActivityDialog, error)
	Last() (*model.PmActivityDialog, error)
	Find() ([]*model.PmActivityDialog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmActivityDialog, err error)
	FindInBatches(result *[]*model.PmActivityDialog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PmActivityDialog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPmActivityDialogDo
	Assign(attrs ...field.AssignExpr) IPmActivityDialogDo
	Joins(fields ...field.RelationField) IPmActivityDialogDo
	Preload(fields ...field.RelationField) IPmActivityDialogDo
	FirstOrInit() (*model.PmActivityDialog, error)
	FirstOrCreate() (*model.PmActivityDialog, error)
	FindByPage(offset int, limit int) (result []*model.PmActivityDialog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPmActivityDialogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pmActivityDialogDo) Debug() IPmActivityDialogDo {
	return p.withDO(p.DO.Debug())
}

func (p pmActivityDialogDo) WithContext(ctx context.Context) IPmActivityDialogDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmActivityDialogDo) ReadDB() IPmActivityDialogDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmActivityDialogDo) WriteDB() IPmActivityDialogDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmActivityDialogDo) Session(config *gorm.Session) IPmActivityDialogDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmActivityDialogDo) Clauses(conds ...clause.Expression) IPmActivityDialogDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmActivityDialogDo) Returning(value interface{}, columns ...string) IPmActivityDialogDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmActivityDialogDo) Not(conds ...gen.Condition) IPmActivityDialogDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmActivityDialogDo) Or(conds ...gen.Condition) IPmActivityDialogDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmActivityDialogDo) Select(conds ...field.Expr) IPmActivityDialogDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmActivityDialogDo) Where(conds ...gen.Condition) IPmActivityDialogDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmActivityDialogDo) Order(conds ...field.Expr) IPmActivityDialogDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmActivityDialogDo) Distinct(cols ...field.Expr) IPmActivityDialogDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmActivityDialogDo) Omit(cols ...field.Expr) IPmActivityDialogDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmActivityDialogDo) Join(table schema.Tabler, on ...field.Expr) IPmActivityDialogDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmActivityDialogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPmActivityDialogDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmActivityDialogDo) RightJoin(table schema.Tabler, on ...field.Expr) IPmActivityDialogDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmActivityDialogDo) Group(cols ...field.Expr) IPmActivityDialogDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmActivityDialogDo) Having(conds ...gen.Condition) IPmActivityDialogDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmActivityDialogDo) Limit(limit int) IPmActivityDialogDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmActivityDialogDo) Offset(offset int) IPmActivityDialogDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmActivityDialogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPmActivityDialogDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmActivityDialogDo) Unscoped() IPmActivityDialogDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmActivityDialogDo) Create(values ...*model.PmActivityDialog) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmActivityDialogDo) CreateInBatches(values []*model.PmActivityDialog, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmActivityDialogDo) Save(values ...*model.PmActivityDialog) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmActivityDialogDo) First() (*model.PmActivityDialog, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmActivityDialog), nil
	}
}

func (p pmActivityDialogDo) Take() (*model.PmActivityDialog, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmActivityDialog), nil
	}
}

func (p pmActivityDialogDo) Last() (*model.PmActivityDialog, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmActivityDialog), nil
	}
}

func (p pmActivityDialogDo) Find() ([]*model.PmActivityDialog, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmActivityDialog), err
}

func (p pmActivityDialogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmActivityDialog, err error) {
	buf := make([]*model.PmActivityDialog, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmActivityDialogDo) FindInBatches(result *[]*model.PmActivityDialog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmActivityDialogDo) Attrs(attrs ...field.AssignExpr) IPmActivityDialogDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmActivityDialogDo) Assign(attrs ...field.AssignExpr) IPmActivityDialogDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmActivityDialogDo) Joins(fields ...field.RelationField) IPmActivityDialogDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmActivityDialogDo) Preload(fields ...field.RelationField) IPmActivityDialogDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmActivityDialogDo) FirstOrInit() (*model.PmActivityDialog, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmActivityDialog), nil
	}
}

func (p pmActivityDialogDo) FirstOrCreate() (*model.PmActivityDialog, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmActivityDialog), nil
	}
}

func (p pmActivityDialogDo) FindByPage(offset int, limit int) (result []*model.PmActivityDialog, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmActivityDialogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmActivityDialogDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmActivityDialogDo) Delete(models ...*model.PmActivityDialog) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmActivityDialogDo) withDO(do gen.Dao) *pmActivityDialogDo {
	p.DO = *do.(*gen.DO)
	return p
}
