// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newLinkState(db *gorm.DB, opts ...gen.DOOption) linkState {
	_linkState := linkState{}

	_linkState.linkStateDo.UseDB(db, opts...)
	_linkState.linkStateDo.UseModel(&model.LinkState{})

	tableName := _linkState.linkStateDo.TableName()
	_linkState.ALL = field.NewAsterisk(tableName)
	_linkState.ID = field.NewInt32(tableName, "id")
	_linkState.Name = field.NewString(tableName, "name")
	_linkState.ValidID = field.NewInt32(tableName, "valid_id")
	_linkState.CreateTime = field.NewTime(tableName, "create_time")
	_linkState.CreateBy = field.NewInt32(tableName, "create_by")
	_linkState.ChangeTime = field.NewTime(tableName, "change_time")
	_linkState.ChangeBy = field.NewInt32(tableName, "change_by")

	_linkState.fillFieldMap()

	return _linkState
}

type linkState struct {
	linkStateDo

	ALL        field.Asterisk
	ID         field.Int32
	Name       field.String
	ValidID    field.Int32
	CreateTime field.Time
	CreateBy   field.Int32
	ChangeTime field.Time
	ChangeBy   field.Int32

	fieldMap map[string]field.Expr
}

func (l linkState) Table(newTableName string) *linkState {
	l.linkStateDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l linkState) As(alias string) *linkState {
	l.linkStateDo.DO = *(l.linkStateDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *linkState) updateTableName(table string) *linkState {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt32(table, "id")
	l.Name = field.NewString(table, "name")
	l.ValidID = field.NewInt32(table, "valid_id")
	l.CreateTime = field.NewTime(table, "create_time")
	l.CreateBy = field.NewInt32(table, "create_by")
	l.ChangeTime = field.NewTime(table, "change_time")
	l.ChangeBy = field.NewInt32(table, "change_by")

	l.fillFieldMap()

	return l
}

func (l *linkState) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *linkState) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 7)
	l.fieldMap["id"] = l.ID
	l.fieldMap["name"] = l.Name
	l.fieldMap["valid_id"] = l.ValidID
	l.fieldMap["create_time"] = l.CreateTime
	l.fieldMap["create_by"] = l.CreateBy
	l.fieldMap["change_time"] = l.ChangeTime
	l.fieldMap["change_by"] = l.ChangeBy
}

func (l linkState) clone(db *gorm.DB) linkState {
	l.linkStateDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l linkState) replaceDB(db *gorm.DB) linkState {
	l.linkStateDo.ReplaceDB(db)
	return l
}

type linkStateDo struct{ gen.DO }

type ILinkStateDo interface {
	gen.SubQuery
	Debug() ILinkStateDo
	WithContext(ctx context.Context) ILinkStateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILinkStateDo
	WriteDB() ILinkStateDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILinkStateDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILinkStateDo
	Not(conds ...gen.Condition) ILinkStateDo
	Or(conds ...gen.Condition) ILinkStateDo
	Select(conds ...field.Expr) ILinkStateDo
	Where(conds ...gen.Condition) ILinkStateDo
	Order(conds ...field.Expr) ILinkStateDo
	Distinct(cols ...field.Expr) ILinkStateDo
	Omit(cols ...field.Expr) ILinkStateDo
	Join(table schema.Tabler, on ...field.Expr) ILinkStateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILinkStateDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILinkStateDo
	Group(cols ...field.Expr) ILinkStateDo
	Having(conds ...gen.Condition) ILinkStateDo
	Limit(limit int) ILinkStateDo
	Offset(offset int) ILinkStateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILinkStateDo
	Unscoped() ILinkStateDo
	Create(values ...*model.LinkState) error
	CreateInBatches(values []*model.LinkState, batchSize int) error
	Save(values ...*model.LinkState) error
	First() (*model.LinkState, error)
	Take() (*model.LinkState, error)
	Last() (*model.LinkState, error)
	Find() ([]*model.LinkState, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LinkState, err error)
	FindInBatches(result *[]*model.LinkState, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LinkState) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILinkStateDo
	Assign(attrs ...field.AssignExpr) ILinkStateDo
	Joins(fields ...field.RelationField) ILinkStateDo
	Preload(fields ...field.RelationField) ILinkStateDo
	FirstOrInit() (*model.LinkState, error)
	FirstOrCreate() (*model.LinkState, error)
	FindByPage(offset int, limit int) (result []*model.LinkState, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILinkStateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l linkStateDo) Debug() ILinkStateDo {
	return l.withDO(l.DO.Debug())
}

func (l linkStateDo) WithContext(ctx context.Context) ILinkStateDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l linkStateDo) ReadDB() ILinkStateDo {
	return l.Clauses(dbresolver.Read)
}

func (l linkStateDo) WriteDB() ILinkStateDo {
	return l.Clauses(dbresolver.Write)
}

func (l linkStateDo) Session(config *gorm.Session) ILinkStateDo {
	return l.withDO(l.DO.Session(config))
}

func (l linkStateDo) Clauses(conds ...clause.Expression) ILinkStateDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l linkStateDo) Returning(value interface{}, columns ...string) ILinkStateDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l linkStateDo) Not(conds ...gen.Condition) ILinkStateDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l linkStateDo) Or(conds ...gen.Condition) ILinkStateDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l linkStateDo) Select(conds ...field.Expr) ILinkStateDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l linkStateDo) Where(conds ...gen.Condition) ILinkStateDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l linkStateDo) Order(conds ...field.Expr) ILinkStateDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l linkStateDo) Distinct(cols ...field.Expr) ILinkStateDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l linkStateDo) Omit(cols ...field.Expr) ILinkStateDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l linkStateDo) Join(table schema.Tabler, on ...field.Expr) ILinkStateDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l linkStateDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILinkStateDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l linkStateDo) RightJoin(table schema.Tabler, on ...field.Expr) ILinkStateDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l linkStateDo) Group(cols ...field.Expr) ILinkStateDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l linkStateDo) Having(conds ...gen.Condition) ILinkStateDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l linkStateDo) Limit(limit int) ILinkStateDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l linkStateDo) Offset(offset int) ILinkStateDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l linkStateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILinkStateDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l linkStateDo) Unscoped() ILinkStateDo {
	return l.withDO(l.DO.Unscoped())
}

func (l linkStateDo) Create(values ...*model.LinkState) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l linkStateDo) CreateInBatches(values []*model.LinkState, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l linkStateDo) Save(values ...*model.LinkState) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l linkStateDo) First() (*model.LinkState, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LinkState), nil
	}
}

func (l linkStateDo) Take() (*model.LinkState, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LinkState), nil
	}
}

func (l linkStateDo) Last() (*model.LinkState, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LinkState), nil
	}
}

func (l linkStateDo) Find() ([]*model.LinkState, error) {
	result, err := l.DO.Find()
	return result.([]*model.LinkState), err
}

func (l linkStateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LinkState, err error) {
	buf := make([]*model.LinkState, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l linkStateDo) FindInBatches(result *[]*model.LinkState, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l linkStateDo) Attrs(attrs ...field.AssignExpr) ILinkStateDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l linkStateDo) Assign(attrs ...field.AssignExpr) ILinkStateDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l linkStateDo) Joins(fields ...field.RelationField) ILinkStateDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l linkStateDo) Preload(fields ...field.RelationField) ILinkStateDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l linkStateDo) FirstOrInit() (*model.LinkState, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LinkState), nil
	}
}

func (l linkStateDo) FirstOrCreate() (*model.LinkState, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LinkState), nil
	}
}

func (l linkStateDo) FindByPage(offset int, limit int) (result []*model.LinkState, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l linkStateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l linkStateDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l linkStateDo) Delete(models ...*model.LinkState) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *linkStateDo) withDO(do gen.Dao) *linkStateDo {
	l.DO = *do.(*gen.DO)
	return l
}
