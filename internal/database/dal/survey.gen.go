// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newSurvey(db *gorm.DB, opts ...gen.DOOption) survey {
	_survey := survey{}

	_survey.surveyDo.UseDB(db, opts...)
	_survey.surveyDo.UseModel(&model.Survey{})

	tableName := _survey.surveyDo.TableName()
	_survey.ALL = field.NewAsterisk(tableName)
	_survey.ID = field.NewInt64(tableName, "id")
	_survey.Surveynumber = field.NewString(tableName, "surveynumber")
	_survey.Title = field.NewString(tableName, "title")
	_survey.Introduction = field.NewString(tableName, "introduction")
	_survey.Description = field.NewString(tableName, "description")
	_survey.NotificationSender = field.NewString(tableName, "notification_sender")
	_survey.NotificationSubject = field.NewString(tableName, "notification_subject")
	_survey.NotificationBody = field.NewString(tableName, "notification_body")
	_survey.Status = field.NewString(tableName, "status")
	_survey.SendConditions = field.NewString(tableName, "send_conditions")
	_survey.CreateTime = field.NewTime(tableName, "create_time")
	_survey.CreateBy = field.NewInt32(tableName, "create_by")
	_survey.ChangeTime = field.NewTime(tableName, "change_time")
	_survey.ChangeBy = field.NewInt32(tableName, "change_by")

	_survey.fillFieldMap()

	return _survey
}

type survey struct {
	surveyDo

	ALL                 field.Asterisk
	ID                  field.Int64
	Surveynumber        field.String
	Title               field.String
	Introduction        field.String
	Description         field.String
	NotificationSender  field.String
	NotificationSubject field.String
	NotificationBody    field.String
	Status              field.String
	SendConditions      field.String
	CreateTime          field.Time
	CreateBy            field.Int32
	ChangeTime          field.Time
	ChangeBy            field.Int32

	fieldMap map[string]field.Expr
}

func (s survey) Table(newTableName string) *survey {
	s.surveyDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s survey) As(alias string) *survey {
	s.surveyDo.DO = *(s.surveyDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *survey) updateTableName(table string) *survey {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Surveynumber = field.NewString(table, "surveynumber")
	s.Title = field.NewString(table, "title")
	s.Introduction = field.NewString(table, "introduction")
	s.Description = field.NewString(table, "description")
	s.NotificationSender = field.NewString(table, "notification_sender")
	s.NotificationSubject = field.NewString(table, "notification_subject")
	s.NotificationBody = field.NewString(table, "notification_body")
	s.Status = field.NewString(table, "status")
	s.SendConditions = field.NewString(table, "send_conditions")
	s.CreateTime = field.NewTime(table, "create_time")
	s.CreateBy = field.NewInt32(table, "create_by")
	s.ChangeTime = field.NewTime(table, "change_time")
	s.ChangeBy = field.NewInt32(table, "change_by")

	s.fillFieldMap()

	return s
}

func (s *survey) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *survey) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 14)
	s.fieldMap["id"] = s.ID
	s.fieldMap["surveynumber"] = s.Surveynumber
	s.fieldMap["title"] = s.Title
	s.fieldMap["introduction"] = s.Introduction
	s.fieldMap["description"] = s.Description
	s.fieldMap["notification_sender"] = s.NotificationSender
	s.fieldMap["notification_subject"] = s.NotificationSubject
	s.fieldMap["notification_body"] = s.NotificationBody
	s.fieldMap["status"] = s.Status
	s.fieldMap["send_conditions"] = s.SendConditions
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["change_time"] = s.ChangeTime
	s.fieldMap["change_by"] = s.ChangeBy
}

func (s survey) clone(db *gorm.DB) survey {
	s.surveyDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s survey) replaceDB(db *gorm.DB) survey {
	s.surveyDo.ReplaceDB(db)
	return s
}

type surveyDo struct{ gen.DO }

type ISurveyDo interface {
	gen.SubQuery
	Debug() ISurveyDo
	WithContext(ctx context.Context) ISurveyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISurveyDo
	WriteDB() ISurveyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISurveyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISurveyDo
	Not(conds ...gen.Condition) ISurveyDo
	Or(conds ...gen.Condition) ISurveyDo
	Select(conds ...field.Expr) ISurveyDo
	Where(conds ...gen.Condition) ISurveyDo
	Order(conds ...field.Expr) ISurveyDo
	Distinct(cols ...field.Expr) ISurveyDo
	Omit(cols ...field.Expr) ISurveyDo
	Join(table schema.Tabler, on ...field.Expr) ISurveyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISurveyDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISurveyDo
	Group(cols ...field.Expr) ISurveyDo
	Having(conds ...gen.Condition) ISurveyDo
	Limit(limit int) ISurveyDo
	Offset(offset int) ISurveyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISurveyDo
	Unscoped() ISurveyDo
	Create(values ...*model.Survey) error
	CreateInBatches(values []*model.Survey, batchSize int) error
	Save(values ...*model.Survey) error
	First() (*model.Survey, error)
	Take() (*model.Survey, error)
	Last() (*model.Survey, error)
	Find() ([]*model.Survey, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Survey, err error)
	FindInBatches(result *[]*model.Survey, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Survey) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISurveyDo
	Assign(attrs ...field.AssignExpr) ISurveyDo
	Joins(fields ...field.RelationField) ISurveyDo
	Preload(fields ...field.RelationField) ISurveyDo
	FirstOrInit() (*model.Survey, error)
	FirstOrCreate() (*model.Survey, error)
	FindByPage(offset int, limit int) (result []*model.Survey, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISurveyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s surveyDo) Debug() ISurveyDo {
	return s.withDO(s.DO.Debug())
}

func (s surveyDo) WithContext(ctx context.Context) ISurveyDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s surveyDo) ReadDB() ISurveyDo {
	return s.Clauses(dbresolver.Read)
}

func (s surveyDo) WriteDB() ISurveyDo {
	return s.Clauses(dbresolver.Write)
}

func (s surveyDo) Session(config *gorm.Session) ISurveyDo {
	return s.withDO(s.DO.Session(config))
}

func (s surveyDo) Clauses(conds ...clause.Expression) ISurveyDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s surveyDo) Returning(value interface{}, columns ...string) ISurveyDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s surveyDo) Not(conds ...gen.Condition) ISurveyDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s surveyDo) Or(conds ...gen.Condition) ISurveyDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s surveyDo) Select(conds ...field.Expr) ISurveyDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s surveyDo) Where(conds ...gen.Condition) ISurveyDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s surveyDo) Order(conds ...field.Expr) ISurveyDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s surveyDo) Distinct(cols ...field.Expr) ISurveyDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s surveyDo) Omit(cols ...field.Expr) ISurveyDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s surveyDo) Join(table schema.Tabler, on ...field.Expr) ISurveyDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s surveyDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISurveyDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s surveyDo) RightJoin(table schema.Tabler, on ...field.Expr) ISurveyDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s surveyDo) Group(cols ...field.Expr) ISurveyDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s surveyDo) Having(conds ...gen.Condition) ISurveyDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s surveyDo) Limit(limit int) ISurveyDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s surveyDo) Offset(offset int) ISurveyDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s surveyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISurveyDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s surveyDo) Unscoped() ISurveyDo {
	return s.withDO(s.DO.Unscoped())
}

func (s surveyDo) Create(values ...*model.Survey) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s surveyDo) CreateInBatches(values []*model.Survey, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s surveyDo) Save(values ...*model.Survey) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s surveyDo) First() (*model.Survey, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Survey), nil
	}
}

func (s surveyDo) Take() (*model.Survey, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Survey), nil
	}
}

func (s surveyDo) Last() (*model.Survey, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Survey), nil
	}
}

func (s surveyDo) Find() ([]*model.Survey, error) {
	result, err := s.DO.Find()
	return result.([]*model.Survey), err
}

func (s surveyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Survey, err error) {
	buf := make([]*model.Survey, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s surveyDo) FindInBatches(result *[]*model.Survey, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s surveyDo) Attrs(attrs ...field.AssignExpr) ISurveyDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s surveyDo) Assign(attrs ...field.AssignExpr) ISurveyDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s surveyDo) Joins(fields ...field.RelationField) ISurveyDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s surveyDo) Preload(fields ...field.RelationField) ISurveyDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s surveyDo) FirstOrInit() (*model.Survey, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Survey), nil
	}
}

func (s surveyDo) FirstOrCreate() (*model.Survey, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Survey), nil
	}
}

func (s surveyDo) FindByPage(offset int, limit int) (result []*model.Survey, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s surveyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s surveyDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s surveyDo) Delete(models ...*model.Survey) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *surveyDo) withDO(do gen.Dao) *surveyDo {
	s.DO = *do.(*gen.DO)
	return s
}
