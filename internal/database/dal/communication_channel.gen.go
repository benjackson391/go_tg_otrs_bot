// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newCommunicationChannel(db *gorm.DB, opts ...gen.DOOption) communicationChannel {
	_communicationChannel := communicationChannel{}

	_communicationChannel.communicationChannelDo.UseDB(db, opts...)
	_communicationChannel.communicationChannelDo.UseModel(&model.CommunicationChannel{})

	tableName := _communicationChannel.communicationChannelDo.TableName()
	_communicationChannel.ALL = field.NewAsterisk(tableName)
	_communicationChannel.ID = field.NewInt64(tableName, "id")
	_communicationChannel.Name = field.NewString(tableName, "name")
	_communicationChannel.Module = field.NewString(tableName, "module")
	_communicationChannel.PackageName = field.NewString(tableName, "package_name")
	_communicationChannel.ChannelData = field.NewBytes(tableName, "channel_data")
	_communicationChannel.ValidID = field.NewInt32(tableName, "valid_id")
	_communicationChannel.CreateTime = field.NewTime(tableName, "create_time")
	_communicationChannel.CreateBy = field.NewInt32(tableName, "create_by")
	_communicationChannel.ChangeTime = field.NewTime(tableName, "change_time")
	_communicationChannel.ChangeBy = field.NewInt32(tableName, "change_by")

	_communicationChannel.fillFieldMap()

	return _communicationChannel
}

type communicationChannel struct {
	communicationChannelDo

	ALL         field.Asterisk
	ID          field.Int64
	Name        field.String
	Module      field.String
	PackageName field.String
	ChannelData field.Bytes
	ValidID     field.Int32
	CreateTime  field.Time
	CreateBy    field.Int32
	ChangeTime  field.Time
	ChangeBy    field.Int32

	fieldMap map[string]field.Expr
}

func (c communicationChannel) Table(newTableName string) *communicationChannel {
	c.communicationChannelDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c communicationChannel) As(alias string) *communicationChannel {
	c.communicationChannelDo.DO = *(c.communicationChannelDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *communicationChannel) updateTableName(table string) *communicationChannel {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Name = field.NewString(table, "name")
	c.Module = field.NewString(table, "module")
	c.PackageName = field.NewString(table, "package_name")
	c.ChannelData = field.NewBytes(table, "channel_data")
	c.ValidID = field.NewInt32(table, "valid_id")
	c.CreateTime = field.NewTime(table, "create_time")
	c.CreateBy = field.NewInt32(table, "create_by")
	c.ChangeTime = field.NewTime(table, "change_time")
	c.ChangeBy = field.NewInt32(table, "change_by")

	c.fillFieldMap()

	return c
}

func (c *communicationChannel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *communicationChannel) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["id"] = c.ID
	c.fieldMap["name"] = c.Name
	c.fieldMap["module"] = c.Module
	c.fieldMap["package_name"] = c.PackageName
	c.fieldMap["channel_data"] = c.ChannelData
	c.fieldMap["valid_id"] = c.ValidID
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["create_by"] = c.CreateBy
	c.fieldMap["change_time"] = c.ChangeTime
	c.fieldMap["change_by"] = c.ChangeBy
}

func (c communicationChannel) clone(db *gorm.DB) communicationChannel {
	c.communicationChannelDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c communicationChannel) replaceDB(db *gorm.DB) communicationChannel {
	c.communicationChannelDo.ReplaceDB(db)
	return c
}

type communicationChannelDo struct{ gen.DO }

type ICommunicationChannelDo interface {
	gen.SubQuery
	Debug() ICommunicationChannelDo
	WithContext(ctx context.Context) ICommunicationChannelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICommunicationChannelDo
	WriteDB() ICommunicationChannelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICommunicationChannelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICommunicationChannelDo
	Not(conds ...gen.Condition) ICommunicationChannelDo
	Or(conds ...gen.Condition) ICommunicationChannelDo
	Select(conds ...field.Expr) ICommunicationChannelDo
	Where(conds ...gen.Condition) ICommunicationChannelDo
	Order(conds ...field.Expr) ICommunicationChannelDo
	Distinct(cols ...field.Expr) ICommunicationChannelDo
	Omit(cols ...field.Expr) ICommunicationChannelDo
	Join(table schema.Tabler, on ...field.Expr) ICommunicationChannelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICommunicationChannelDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICommunicationChannelDo
	Group(cols ...field.Expr) ICommunicationChannelDo
	Having(conds ...gen.Condition) ICommunicationChannelDo
	Limit(limit int) ICommunicationChannelDo
	Offset(offset int) ICommunicationChannelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICommunicationChannelDo
	Unscoped() ICommunicationChannelDo
	Create(values ...*model.CommunicationChannel) error
	CreateInBatches(values []*model.CommunicationChannel, batchSize int) error
	Save(values ...*model.CommunicationChannel) error
	First() (*model.CommunicationChannel, error)
	Take() (*model.CommunicationChannel, error)
	Last() (*model.CommunicationChannel, error)
	Find() ([]*model.CommunicationChannel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CommunicationChannel, err error)
	FindInBatches(result *[]*model.CommunicationChannel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CommunicationChannel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICommunicationChannelDo
	Assign(attrs ...field.AssignExpr) ICommunicationChannelDo
	Joins(fields ...field.RelationField) ICommunicationChannelDo
	Preload(fields ...field.RelationField) ICommunicationChannelDo
	FirstOrInit() (*model.CommunicationChannel, error)
	FirstOrCreate() (*model.CommunicationChannel, error)
	FindByPage(offset int, limit int) (result []*model.CommunicationChannel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICommunicationChannelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c communicationChannelDo) Debug() ICommunicationChannelDo {
	return c.withDO(c.DO.Debug())
}

func (c communicationChannelDo) WithContext(ctx context.Context) ICommunicationChannelDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c communicationChannelDo) ReadDB() ICommunicationChannelDo {
	return c.Clauses(dbresolver.Read)
}

func (c communicationChannelDo) WriteDB() ICommunicationChannelDo {
	return c.Clauses(dbresolver.Write)
}

func (c communicationChannelDo) Session(config *gorm.Session) ICommunicationChannelDo {
	return c.withDO(c.DO.Session(config))
}

func (c communicationChannelDo) Clauses(conds ...clause.Expression) ICommunicationChannelDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c communicationChannelDo) Returning(value interface{}, columns ...string) ICommunicationChannelDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c communicationChannelDo) Not(conds ...gen.Condition) ICommunicationChannelDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c communicationChannelDo) Or(conds ...gen.Condition) ICommunicationChannelDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c communicationChannelDo) Select(conds ...field.Expr) ICommunicationChannelDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c communicationChannelDo) Where(conds ...gen.Condition) ICommunicationChannelDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c communicationChannelDo) Order(conds ...field.Expr) ICommunicationChannelDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c communicationChannelDo) Distinct(cols ...field.Expr) ICommunicationChannelDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c communicationChannelDo) Omit(cols ...field.Expr) ICommunicationChannelDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c communicationChannelDo) Join(table schema.Tabler, on ...field.Expr) ICommunicationChannelDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c communicationChannelDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICommunicationChannelDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c communicationChannelDo) RightJoin(table schema.Tabler, on ...field.Expr) ICommunicationChannelDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c communicationChannelDo) Group(cols ...field.Expr) ICommunicationChannelDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c communicationChannelDo) Having(conds ...gen.Condition) ICommunicationChannelDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c communicationChannelDo) Limit(limit int) ICommunicationChannelDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c communicationChannelDo) Offset(offset int) ICommunicationChannelDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c communicationChannelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICommunicationChannelDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c communicationChannelDo) Unscoped() ICommunicationChannelDo {
	return c.withDO(c.DO.Unscoped())
}

func (c communicationChannelDo) Create(values ...*model.CommunicationChannel) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c communicationChannelDo) CreateInBatches(values []*model.CommunicationChannel, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c communicationChannelDo) Save(values ...*model.CommunicationChannel) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c communicationChannelDo) First() (*model.CommunicationChannel, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunicationChannel), nil
	}
}

func (c communicationChannelDo) Take() (*model.CommunicationChannel, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunicationChannel), nil
	}
}

func (c communicationChannelDo) Last() (*model.CommunicationChannel, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunicationChannel), nil
	}
}

func (c communicationChannelDo) Find() ([]*model.CommunicationChannel, error) {
	result, err := c.DO.Find()
	return result.([]*model.CommunicationChannel), err
}

func (c communicationChannelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CommunicationChannel, err error) {
	buf := make([]*model.CommunicationChannel, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c communicationChannelDo) FindInBatches(result *[]*model.CommunicationChannel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c communicationChannelDo) Attrs(attrs ...field.AssignExpr) ICommunicationChannelDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c communicationChannelDo) Assign(attrs ...field.AssignExpr) ICommunicationChannelDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c communicationChannelDo) Joins(fields ...field.RelationField) ICommunicationChannelDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c communicationChannelDo) Preload(fields ...field.RelationField) ICommunicationChannelDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c communicationChannelDo) FirstOrInit() (*model.CommunicationChannel, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunicationChannel), nil
	}
}

func (c communicationChannelDo) FirstOrCreate() (*model.CommunicationChannel, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunicationChannel), nil
	}
}

func (c communicationChannelDo) FindByPage(offset int, limit int) (result []*model.CommunicationChannel, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c communicationChannelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c communicationChannelDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c communicationChannelDo) Delete(models ...*model.CommunicationChannel) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *communicationChannelDo) withDO(do gen.Dao) *communicationChannelDo {
	c.DO = *do.(*gen.DO)
	return c
}
