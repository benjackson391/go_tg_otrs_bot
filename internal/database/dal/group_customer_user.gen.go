// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newGroupCustomerUser(db *gorm.DB, opts ...gen.DOOption) groupCustomerUser {
	_groupCustomerUser := groupCustomerUser{}

	_groupCustomerUser.groupCustomerUserDo.UseDB(db, opts...)
	_groupCustomerUser.groupCustomerUserDo.UseModel(&model.GroupCustomerUser{})

	tableName := _groupCustomerUser.groupCustomerUserDo.TableName()
	_groupCustomerUser.ALL = field.NewAsterisk(tableName)
	_groupCustomerUser.UserID = field.NewString(tableName, "user_id")
	_groupCustomerUser.GroupID = field.NewInt32(tableName, "group_id")
	_groupCustomerUser.PermissionKey = field.NewString(tableName, "permission_key")
	_groupCustomerUser.PermissionValue = field.NewInt32(tableName, "permission_value")
	_groupCustomerUser.CreateTime = field.NewTime(tableName, "create_time")
	_groupCustomerUser.CreateBy = field.NewInt32(tableName, "create_by")
	_groupCustomerUser.ChangeTime = field.NewTime(tableName, "change_time")
	_groupCustomerUser.ChangeBy = field.NewInt32(tableName, "change_by")

	_groupCustomerUser.fillFieldMap()

	return _groupCustomerUser
}

type groupCustomerUser struct {
	groupCustomerUserDo

	ALL             field.Asterisk
	UserID          field.String
	GroupID         field.Int32
	PermissionKey   field.String
	PermissionValue field.Int32
	CreateTime      field.Time
	CreateBy        field.Int32
	ChangeTime      field.Time
	ChangeBy        field.Int32

	fieldMap map[string]field.Expr
}

func (g groupCustomerUser) Table(newTableName string) *groupCustomerUser {
	g.groupCustomerUserDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g groupCustomerUser) As(alias string) *groupCustomerUser {
	g.groupCustomerUserDo.DO = *(g.groupCustomerUserDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *groupCustomerUser) updateTableName(table string) *groupCustomerUser {
	g.ALL = field.NewAsterisk(table)
	g.UserID = field.NewString(table, "user_id")
	g.GroupID = field.NewInt32(table, "group_id")
	g.PermissionKey = field.NewString(table, "permission_key")
	g.PermissionValue = field.NewInt32(table, "permission_value")
	g.CreateTime = field.NewTime(table, "create_time")
	g.CreateBy = field.NewInt32(table, "create_by")
	g.ChangeTime = field.NewTime(table, "change_time")
	g.ChangeBy = field.NewInt32(table, "change_by")

	g.fillFieldMap()

	return g
}

func (g *groupCustomerUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *groupCustomerUser) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 8)
	g.fieldMap["user_id"] = g.UserID
	g.fieldMap["group_id"] = g.GroupID
	g.fieldMap["permission_key"] = g.PermissionKey
	g.fieldMap["permission_value"] = g.PermissionValue
	g.fieldMap["create_time"] = g.CreateTime
	g.fieldMap["create_by"] = g.CreateBy
	g.fieldMap["change_time"] = g.ChangeTime
	g.fieldMap["change_by"] = g.ChangeBy
}

func (g groupCustomerUser) clone(db *gorm.DB) groupCustomerUser {
	g.groupCustomerUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g groupCustomerUser) replaceDB(db *gorm.DB) groupCustomerUser {
	g.groupCustomerUserDo.ReplaceDB(db)
	return g
}

type groupCustomerUserDo struct{ gen.DO }

type IGroupCustomerUserDo interface {
	gen.SubQuery
	Debug() IGroupCustomerUserDo
	WithContext(ctx context.Context) IGroupCustomerUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGroupCustomerUserDo
	WriteDB() IGroupCustomerUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGroupCustomerUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGroupCustomerUserDo
	Not(conds ...gen.Condition) IGroupCustomerUserDo
	Or(conds ...gen.Condition) IGroupCustomerUserDo
	Select(conds ...field.Expr) IGroupCustomerUserDo
	Where(conds ...gen.Condition) IGroupCustomerUserDo
	Order(conds ...field.Expr) IGroupCustomerUserDo
	Distinct(cols ...field.Expr) IGroupCustomerUserDo
	Omit(cols ...field.Expr) IGroupCustomerUserDo
	Join(table schema.Tabler, on ...field.Expr) IGroupCustomerUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGroupCustomerUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGroupCustomerUserDo
	Group(cols ...field.Expr) IGroupCustomerUserDo
	Having(conds ...gen.Condition) IGroupCustomerUserDo
	Limit(limit int) IGroupCustomerUserDo
	Offset(offset int) IGroupCustomerUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGroupCustomerUserDo
	Unscoped() IGroupCustomerUserDo
	Create(values ...*model.GroupCustomerUser) error
	CreateInBatches(values []*model.GroupCustomerUser, batchSize int) error
	Save(values ...*model.GroupCustomerUser) error
	First() (*model.GroupCustomerUser, error)
	Take() (*model.GroupCustomerUser, error)
	Last() (*model.GroupCustomerUser, error)
	Find() ([]*model.GroupCustomerUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GroupCustomerUser, err error)
	FindInBatches(result *[]*model.GroupCustomerUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GroupCustomerUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGroupCustomerUserDo
	Assign(attrs ...field.AssignExpr) IGroupCustomerUserDo
	Joins(fields ...field.RelationField) IGroupCustomerUserDo
	Preload(fields ...field.RelationField) IGroupCustomerUserDo
	FirstOrInit() (*model.GroupCustomerUser, error)
	FirstOrCreate() (*model.GroupCustomerUser, error)
	FindByPage(offset int, limit int) (result []*model.GroupCustomerUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGroupCustomerUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g groupCustomerUserDo) Debug() IGroupCustomerUserDo {
	return g.withDO(g.DO.Debug())
}

func (g groupCustomerUserDo) WithContext(ctx context.Context) IGroupCustomerUserDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g groupCustomerUserDo) ReadDB() IGroupCustomerUserDo {
	return g.Clauses(dbresolver.Read)
}

func (g groupCustomerUserDo) WriteDB() IGroupCustomerUserDo {
	return g.Clauses(dbresolver.Write)
}

func (g groupCustomerUserDo) Session(config *gorm.Session) IGroupCustomerUserDo {
	return g.withDO(g.DO.Session(config))
}

func (g groupCustomerUserDo) Clauses(conds ...clause.Expression) IGroupCustomerUserDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g groupCustomerUserDo) Returning(value interface{}, columns ...string) IGroupCustomerUserDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g groupCustomerUserDo) Not(conds ...gen.Condition) IGroupCustomerUserDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g groupCustomerUserDo) Or(conds ...gen.Condition) IGroupCustomerUserDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g groupCustomerUserDo) Select(conds ...field.Expr) IGroupCustomerUserDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g groupCustomerUserDo) Where(conds ...gen.Condition) IGroupCustomerUserDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g groupCustomerUserDo) Order(conds ...field.Expr) IGroupCustomerUserDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g groupCustomerUserDo) Distinct(cols ...field.Expr) IGroupCustomerUserDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g groupCustomerUserDo) Omit(cols ...field.Expr) IGroupCustomerUserDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g groupCustomerUserDo) Join(table schema.Tabler, on ...field.Expr) IGroupCustomerUserDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g groupCustomerUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGroupCustomerUserDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g groupCustomerUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IGroupCustomerUserDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g groupCustomerUserDo) Group(cols ...field.Expr) IGroupCustomerUserDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g groupCustomerUserDo) Having(conds ...gen.Condition) IGroupCustomerUserDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g groupCustomerUserDo) Limit(limit int) IGroupCustomerUserDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g groupCustomerUserDo) Offset(offset int) IGroupCustomerUserDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g groupCustomerUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGroupCustomerUserDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g groupCustomerUserDo) Unscoped() IGroupCustomerUserDo {
	return g.withDO(g.DO.Unscoped())
}

func (g groupCustomerUserDo) Create(values ...*model.GroupCustomerUser) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g groupCustomerUserDo) CreateInBatches(values []*model.GroupCustomerUser, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g groupCustomerUserDo) Save(values ...*model.GroupCustomerUser) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g groupCustomerUserDo) First() (*model.GroupCustomerUser, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupCustomerUser), nil
	}
}

func (g groupCustomerUserDo) Take() (*model.GroupCustomerUser, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupCustomerUser), nil
	}
}

func (g groupCustomerUserDo) Last() (*model.GroupCustomerUser, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupCustomerUser), nil
	}
}

func (g groupCustomerUserDo) Find() ([]*model.GroupCustomerUser, error) {
	result, err := g.DO.Find()
	return result.([]*model.GroupCustomerUser), err
}

func (g groupCustomerUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GroupCustomerUser, err error) {
	buf := make([]*model.GroupCustomerUser, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g groupCustomerUserDo) FindInBatches(result *[]*model.GroupCustomerUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g groupCustomerUserDo) Attrs(attrs ...field.AssignExpr) IGroupCustomerUserDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g groupCustomerUserDo) Assign(attrs ...field.AssignExpr) IGroupCustomerUserDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g groupCustomerUserDo) Joins(fields ...field.RelationField) IGroupCustomerUserDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g groupCustomerUserDo) Preload(fields ...field.RelationField) IGroupCustomerUserDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g groupCustomerUserDo) FirstOrInit() (*model.GroupCustomerUser, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupCustomerUser), nil
	}
}

func (g groupCustomerUserDo) FirstOrCreate() (*model.GroupCustomerUser, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupCustomerUser), nil
	}
}

func (g groupCustomerUserDo) FindByPage(offset int, limit int) (result []*model.GroupCustomerUser, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g groupCustomerUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g groupCustomerUserDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g groupCustomerUserDo) Delete(models ...*model.GroupCustomerUser) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *groupCustomerUserDo) withDO(do gen.Dao) *groupCustomerUserDo {
	g.DO = *do.(*gen.DO)
	return g
}
