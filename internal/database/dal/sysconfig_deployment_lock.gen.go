// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newSysconfigDeploymentLock(db *gorm.DB, opts ...gen.DOOption) sysconfigDeploymentLock {
	_sysconfigDeploymentLock := sysconfigDeploymentLock{}

	_sysconfigDeploymentLock.sysconfigDeploymentLockDo.UseDB(db, opts...)
	_sysconfigDeploymentLock.sysconfigDeploymentLockDo.UseModel(&model.SysconfigDeploymentLock{})

	tableName := _sysconfigDeploymentLock.sysconfigDeploymentLockDo.TableName()
	_sysconfigDeploymentLock.ALL = field.NewAsterisk(tableName)
	_sysconfigDeploymentLock.ID = field.NewInt32(tableName, "id")
	_sysconfigDeploymentLock.ExclusiveLockGUID = field.NewString(tableName, "exclusive_lock_guid")
	_sysconfigDeploymentLock.ExclusiveLockUserID = field.NewInt32(tableName, "exclusive_lock_user_id")
	_sysconfigDeploymentLock.ExclusiveLockExpiryTime = field.NewTime(tableName, "exclusive_lock_expiry_time")

	_sysconfigDeploymentLock.fillFieldMap()

	return _sysconfigDeploymentLock
}

type sysconfigDeploymentLock struct {
	sysconfigDeploymentLockDo

	ALL                     field.Asterisk
	ID                      field.Int32
	ExclusiveLockGUID       field.String
	ExclusiveLockUserID     field.Int32
	ExclusiveLockExpiryTime field.Time

	fieldMap map[string]field.Expr
}

func (s sysconfigDeploymentLock) Table(newTableName string) *sysconfigDeploymentLock {
	s.sysconfigDeploymentLockDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysconfigDeploymentLock) As(alias string) *sysconfigDeploymentLock {
	s.sysconfigDeploymentLockDo.DO = *(s.sysconfigDeploymentLockDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysconfigDeploymentLock) updateTableName(table string) *sysconfigDeploymentLock {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.ExclusiveLockGUID = field.NewString(table, "exclusive_lock_guid")
	s.ExclusiveLockUserID = field.NewInt32(table, "exclusive_lock_user_id")
	s.ExclusiveLockExpiryTime = field.NewTime(table, "exclusive_lock_expiry_time")

	s.fillFieldMap()

	return s
}

func (s *sysconfigDeploymentLock) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysconfigDeploymentLock) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["id"] = s.ID
	s.fieldMap["exclusive_lock_guid"] = s.ExclusiveLockGUID
	s.fieldMap["exclusive_lock_user_id"] = s.ExclusiveLockUserID
	s.fieldMap["exclusive_lock_expiry_time"] = s.ExclusiveLockExpiryTime
}

func (s sysconfigDeploymentLock) clone(db *gorm.DB) sysconfigDeploymentLock {
	s.sysconfigDeploymentLockDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysconfigDeploymentLock) replaceDB(db *gorm.DB) sysconfigDeploymentLock {
	s.sysconfigDeploymentLockDo.ReplaceDB(db)
	return s
}

type sysconfigDeploymentLockDo struct{ gen.DO }

type ISysconfigDeploymentLockDo interface {
	gen.SubQuery
	Debug() ISysconfigDeploymentLockDo
	WithContext(ctx context.Context) ISysconfigDeploymentLockDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysconfigDeploymentLockDo
	WriteDB() ISysconfigDeploymentLockDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysconfigDeploymentLockDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysconfigDeploymentLockDo
	Not(conds ...gen.Condition) ISysconfigDeploymentLockDo
	Or(conds ...gen.Condition) ISysconfigDeploymentLockDo
	Select(conds ...field.Expr) ISysconfigDeploymentLockDo
	Where(conds ...gen.Condition) ISysconfigDeploymentLockDo
	Order(conds ...field.Expr) ISysconfigDeploymentLockDo
	Distinct(cols ...field.Expr) ISysconfigDeploymentLockDo
	Omit(cols ...field.Expr) ISysconfigDeploymentLockDo
	Join(table schema.Tabler, on ...field.Expr) ISysconfigDeploymentLockDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysconfigDeploymentLockDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysconfigDeploymentLockDo
	Group(cols ...field.Expr) ISysconfigDeploymentLockDo
	Having(conds ...gen.Condition) ISysconfigDeploymentLockDo
	Limit(limit int) ISysconfigDeploymentLockDo
	Offset(offset int) ISysconfigDeploymentLockDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysconfigDeploymentLockDo
	Unscoped() ISysconfigDeploymentLockDo
	Create(values ...*model.SysconfigDeploymentLock) error
	CreateInBatches(values []*model.SysconfigDeploymentLock, batchSize int) error
	Save(values ...*model.SysconfigDeploymentLock) error
	First() (*model.SysconfigDeploymentLock, error)
	Take() (*model.SysconfigDeploymentLock, error)
	Last() (*model.SysconfigDeploymentLock, error)
	Find() ([]*model.SysconfigDeploymentLock, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysconfigDeploymentLock, err error)
	FindInBatches(result *[]*model.SysconfigDeploymentLock, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysconfigDeploymentLock) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysconfigDeploymentLockDo
	Assign(attrs ...field.AssignExpr) ISysconfigDeploymentLockDo
	Joins(fields ...field.RelationField) ISysconfigDeploymentLockDo
	Preload(fields ...field.RelationField) ISysconfigDeploymentLockDo
	FirstOrInit() (*model.SysconfigDeploymentLock, error)
	FirstOrCreate() (*model.SysconfigDeploymentLock, error)
	FindByPage(offset int, limit int) (result []*model.SysconfigDeploymentLock, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysconfigDeploymentLockDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysconfigDeploymentLockDo) Debug() ISysconfigDeploymentLockDo {
	return s.withDO(s.DO.Debug())
}

func (s sysconfigDeploymentLockDo) WithContext(ctx context.Context) ISysconfigDeploymentLockDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysconfigDeploymentLockDo) ReadDB() ISysconfigDeploymentLockDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysconfigDeploymentLockDo) WriteDB() ISysconfigDeploymentLockDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysconfigDeploymentLockDo) Session(config *gorm.Session) ISysconfigDeploymentLockDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysconfigDeploymentLockDo) Clauses(conds ...clause.Expression) ISysconfigDeploymentLockDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysconfigDeploymentLockDo) Returning(value interface{}, columns ...string) ISysconfigDeploymentLockDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysconfigDeploymentLockDo) Not(conds ...gen.Condition) ISysconfigDeploymentLockDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysconfigDeploymentLockDo) Or(conds ...gen.Condition) ISysconfigDeploymentLockDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysconfigDeploymentLockDo) Select(conds ...field.Expr) ISysconfigDeploymentLockDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysconfigDeploymentLockDo) Where(conds ...gen.Condition) ISysconfigDeploymentLockDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysconfigDeploymentLockDo) Order(conds ...field.Expr) ISysconfigDeploymentLockDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysconfigDeploymentLockDo) Distinct(cols ...field.Expr) ISysconfigDeploymentLockDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysconfigDeploymentLockDo) Omit(cols ...field.Expr) ISysconfigDeploymentLockDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysconfigDeploymentLockDo) Join(table schema.Tabler, on ...field.Expr) ISysconfigDeploymentLockDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysconfigDeploymentLockDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysconfigDeploymentLockDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysconfigDeploymentLockDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysconfigDeploymentLockDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysconfigDeploymentLockDo) Group(cols ...field.Expr) ISysconfigDeploymentLockDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysconfigDeploymentLockDo) Having(conds ...gen.Condition) ISysconfigDeploymentLockDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysconfigDeploymentLockDo) Limit(limit int) ISysconfigDeploymentLockDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysconfigDeploymentLockDo) Offset(offset int) ISysconfigDeploymentLockDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysconfigDeploymentLockDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysconfigDeploymentLockDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysconfigDeploymentLockDo) Unscoped() ISysconfigDeploymentLockDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysconfigDeploymentLockDo) Create(values ...*model.SysconfigDeploymentLock) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysconfigDeploymentLockDo) CreateInBatches(values []*model.SysconfigDeploymentLock, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysconfigDeploymentLockDo) Save(values ...*model.SysconfigDeploymentLock) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysconfigDeploymentLockDo) First() (*model.SysconfigDeploymentLock, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysconfigDeploymentLock), nil
	}
}

func (s sysconfigDeploymentLockDo) Take() (*model.SysconfigDeploymentLock, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysconfigDeploymentLock), nil
	}
}

func (s sysconfigDeploymentLockDo) Last() (*model.SysconfigDeploymentLock, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysconfigDeploymentLock), nil
	}
}

func (s sysconfigDeploymentLockDo) Find() ([]*model.SysconfigDeploymentLock, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysconfigDeploymentLock), err
}

func (s sysconfigDeploymentLockDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysconfigDeploymentLock, err error) {
	buf := make([]*model.SysconfigDeploymentLock, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysconfigDeploymentLockDo) FindInBatches(result *[]*model.SysconfigDeploymentLock, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysconfigDeploymentLockDo) Attrs(attrs ...field.AssignExpr) ISysconfigDeploymentLockDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysconfigDeploymentLockDo) Assign(attrs ...field.AssignExpr) ISysconfigDeploymentLockDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysconfigDeploymentLockDo) Joins(fields ...field.RelationField) ISysconfigDeploymentLockDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysconfigDeploymentLockDo) Preload(fields ...field.RelationField) ISysconfigDeploymentLockDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysconfigDeploymentLockDo) FirstOrInit() (*model.SysconfigDeploymentLock, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysconfigDeploymentLock), nil
	}
}

func (s sysconfigDeploymentLockDo) FirstOrCreate() (*model.SysconfigDeploymentLock, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysconfigDeploymentLock), nil
	}
}

func (s sysconfigDeploymentLockDo) FindByPage(offset int, limit int) (result []*model.SysconfigDeploymentLock, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysconfigDeploymentLockDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysconfigDeploymentLockDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysconfigDeploymentLockDo) Delete(models ...*model.SysconfigDeploymentLock) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysconfigDeploymentLockDo) withDO(do gen.Dao) *sysconfigDeploymentLockDo {
	s.DO = *do.(*gen.DO)
	return s
}
