// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newNotificationEvent(db *gorm.DB, opts ...gen.DOOption) notificationEvent {
	_notificationEvent := notificationEvent{}

	_notificationEvent.notificationEventDo.UseDB(db, opts...)
	_notificationEvent.notificationEventDo.UseModel(&model.NotificationEvent{})

	tableName := _notificationEvent.notificationEventDo.TableName()
	_notificationEvent.ALL = field.NewAsterisk(tableName)
	_notificationEvent.ID = field.NewInt32(tableName, "id")
	_notificationEvent.Name = field.NewString(tableName, "name")
	_notificationEvent.ValidID = field.NewInt32(tableName, "valid_id")
	_notificationEvent.Comments = field.NewString(tableName, "comments")
	_notificationEvent.CreateTime = field.NewTime(tableName, "create_time")
	_notificationEvent.CreateBy = field.NewInt32(tableName, "create_by")
	_notificationEvent.ChangeTime = field.NewTime(tableName, "change_time")
	_notificationEvent.ChangeBy = field.NewInt32(tableName, "change_by")

	_notificationEvent.fillFieldMap()

	return _notificationEvent
}

type notificationEvent struct {
	notificationEventDo

	ALL        field.Asterisk
	ID         field.Int32
	Name       field.String
	ValidID    field.Int32
	Comments   field.String
	CreateTime field.Time
	CreateBy   field.Int32
	ChangeTime field.Time
	ChangeBy   field.Int32

	fieldMap map[string]field.Expr
}

func (n notificationEvent) Table(newTableName string) *notificationEvent {
	n.notificationEventDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n notificationEvent) As(alias string) *notificationEvent {
	n.notificationEventDo.DO = *(n.notificationEventDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *notificationEvent) updateTableName(table string) *notificationEvent {
	n.ALL = field.NewAsterisk(table)
	n.ID = field.NewInt32(table, "id")
	n.Name = field.NewString(table, "name")
	n.ValidID = field.NewInt32(table, "valid_id")
	n.Comments = field.NewString(table, "comments")
	n.CreateTime = field.NewTime(table, "create_time")
	n.CreateBy = field.NewInt32(table, "create_by")
	n.ChangeTime = field.NewTime(table, "change_time")
	n.ChangeBy = field.NewInt32(table, "change_by")

	n.fillFieldMap()

	return n
}

func (n *notificationEvent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *notificationEvent) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 8)
	n.fieldMap["id"] = n.ID
	n.fieldMap["name"] = n.Name
	n.fieldMap["valid_id"] = n.ValidID
	n.fieldMap["comments"] = n.Comments
	n.fieldMap["create_time"] = n.CreateTime
	n.fieldMap["create_by"] = n.CreateBy
	n.fieldMap["change_time"] = n.ChangeTime
	n.fieldMap["change_by"] = n.ChangeBy
}

func (n notificationEvent) clone(db *gorm.DB) notificationEvent {
	n.notificationEventDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n notificationEvent) replaceDB(db *gorm.DB) notificationEvent {
	n.notificationEventDo.ReplaceDB(db)
	return n
}

type notificationEventDo struct{ gen.DO }

type INotificationEventDo interface {
	gen.SubQuery
	Debug() INotificationEventDo
	WithContext(ctx context.Context) INotificationEventDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() INotificationEventDo
	WriteDB() INotificationEventDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) INotificationEventDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INotificationEventDo
	Not(conds ...gen.Condition) INotificationEventDo
	Or(conds ...gen.Condition) INotificationEventDo
	Select(conds ...field.Expr) INotificationEventDo
	Where(conds ...gen.Condition) INotificationEventDo
	Order(conds ...field.Expr) INotificationEventDo
	Distinct(cols ...field.Expr) INotificationEventDo
	Omit(cols ...field.Expr) INotificationEventDo
	Join(table schema.Tabler, on ...field.Expr) INotificationEventDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INotificationEventDo
	RightJoin(table schema.Tabler, on ...field.Expr) INotificationEventDo
	Group(cols ...field.Expr) INotificationEventDo
	Having(conds ...gen.Condition) INotificationEventDo
	Limit(limit int) INotificationEventDo
	Offset(offset int) INotificationEventDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INotificationEventDo
	Unscoped() INotificationEventDo
	Create(values ...*model.NotificationEvent) error
	CreateInBatches(values []*model.NotificationEvent, batchSize int) error
	Save(values ...*model.NotificationEvent) error
	First() (*model.NotificationEvent, error)
	Take() (*model.NotificationEvent, error)
	Last() (*model.NotificationEvent, error)
	Find() ([]*model.NotificationEvent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NotificationEvent, err error)
	FindInBatches(result *[]*model.NotificationEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.NotificationEvent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INotificationEventDo
	Assign(attrs ...field.AssignExpr) INotificationEventDo
	Joins(fields ...field.RelationField) INotificationEventDo
	Preload(fields ...field.RelationField) INotificationEventDo
	FirstOrInit() (*model.NotificationEvent, error)
	FirstOrCreate() (*model.NotificationEvent, error)
	FindByPage(offset int, limit int) (result []*model.NotificationEvent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INotificationEventDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n notificationEventDo) Debug() INotificationEventDo {
	return n.withDO(n.DO.Debug())
}

func (n notificationEventDo) WithContext(ctx context.Context) INotificationEventDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n notificationEventDo) ReadDB() INotificationEventDo {
	return n.Clauses(dbresolver.Read)
}

func (n notificationEventDo) WriteDB() INotificationEventDo {
	return n.Clauses(dbresolver.Write)
}

func (n notificationEventDo) Session(config *gorm.Session) INotificationEventDo {
	return n.withDO(n.DO.Session(config))
}

func (n notificationEventDo) Clauses(conds ...clause.Expression) INotificationEventDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n notificationEventDo) Returning(value interface{}, columns ...string) INotificationEventDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n notificationEventDo) Not(conds ...gen.Condition) INotificationEventDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n notificationEventDo) Or(conds ...gen.Condition) INotificationEventDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n notificationEventDo) Select(conds ...field.Expr) INotificationEventDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n notificationEventDo) Where(conds ...gen.Condition) INotificationEventDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n notificationEventDo) Order(conds ...field.Expr) INotificationEventDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n notificationEventDo) Distinct(cols ...field.Expr) INotificationEventDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n notificationEventDo) Omit(cols ...field.Expr) INotificationEventDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n notificationEventDo) Join(table schema.Tabler, on ...field.Expr) INotificationEventDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n notificationEventDo) LeftJoin(table schema.Tabler, on ...field.Expr) INotificationEventDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n notificationEventDo) RightJoin(table schema.Tabler, on ...field.Expr) INotificationEventDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n notificationEventDo) Group(cols ...field.Expr) INotificationEventDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n notificationEventDo) Having(conds ...gen.Condition) INotificationEventDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n notificationEventDo) Limit(limit int) INotificationEventDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n notificationEventDo) Offset(offset int) INotificationEventDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n notificationEventDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INotificationEventDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n notificationEventDo) Unscoped() INotificationEventDo {
	return n.withDO(n.DO.Unscoped())
}

func (n notificationEventDo) Create(values ...*model.NotificationEvent) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n notificationEventDo) CreateInBatches(values []*model.NotificationEvent, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n notificationEventDo) Save(values ...*model.NotificationEvent) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n notificationEventDo) First() (*model.NotificationEvent, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationEvent), nil
	}
}

func (n notificationEventDo) Take() (*model.NotificationEvent, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationEvent), nil
	}
}

func (n notificationEventDo) Last() (*model.NotificationEvent, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationEvent), nil
	}
}

func (n notificationEventDo) Find() ([]*model.NotificationEvent, error) {
	result, err := n.DO.Find()
	return result.([]*model.NotificationEvent), err
}

func (n notificationEventDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NotificationEvent, err error) {
	buf := make([]*model.NotificationEvent, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n notificationEventDo) FindInBatches(result *[]*model.NotificationEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n notificationEventDo) Attrs(attrs ...field.AssignExpr) INotificationEventDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n notificationEventDo) Assign(attrs ...field.AssignExpr) INotificationEventDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n notificationEventDo) Joins(fields ...field.RelationField) INotificationEventDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n notificationEventDo) Preload(fields ...field.RelationField) INotificationEventDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n notificationEventDo) FirstOrInit() (*model.NotificationEvent, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationEvent), nil
	}
}

func (n notificationEventDo) FirstOrCreate() (*model.NotificationEvent, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationEvent), nil
	}
}

func (n notificationEventDo) FindByPage(offset int, limit int) (result []*model.NotificationEvent, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n notificationEventDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n notificationEventDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n notificationEventDo) Delete(models ...*model.NotificationEvent) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *notificationEventDo) withDO(do gen.Dao) *notificationEventDo {
	n.DO = *do.(*gen.DO)
	return n
}
