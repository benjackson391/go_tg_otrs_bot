// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newArticleDataMime(db *gorm.DB, opts ...gen.DOOption) articleDataMime {
	_articleDataMime := articleDataMime{}

	_articleDataMime.articleDataMimeDo.UseDB(db, opts...)
	_articleDataMime.articleDataMimeDo.UseModel(&model.ArticleDataMime{})

	tableName := _articleDataMime.articleDataMimeDo.TableName()
	_articleDataMime.ALL = field.NewAsterisk(tableName)
	_articleDataMime.ID = field.NewInt64(tableName, "id")
	_articleDataMime.ArticleID = field.NewInt64(tableName, "article_id")
	_articleDataMime.AFrom = field.NewString(tableName, "a_from")
	_articleDataMime.AReplyTo = field.NewString(tableName, "a_reply_to")
	_articleDataMime.ATo = field.NewString(tableName, "a_to")
	_articleDataMime.ACc = field.NewString(tableName, "a_cc")
	_articleDataMime.ABcc = field.NewString(tableName, "a_bcc")
	_articleDataMime.ASubject = field.NewString(tableName, "a_subject")
	_articleDataMime.AMessageID = field.NewString(tableName, "a_message_id")
	_articleDataMime.AMessageIDMd5 = field.NewString(tableName, "a_message_id_md5")
	_articleDataMime.AInReplyTo = field.NewString(tableName, "a_in_reply_to")
	_articleDataMime.AReferences = field.NewString(tableName, "a_references")
	_articleDataMime.AContentType = field.NewString(tableName, "a_content_type")
	_articleDataMime.ABody = field.NewString(tableName, "a_body")
	_articleDataMime.IncomingTime = field.NewInt32(tableName, "incoming_time")
	_articleDataMime.ContentPath = field.NewString(tableName, "content_path")
	_articleDataMime.CreateTime = field.NewTime(tableName, "create_time")
	_articleDataMime.CreateBy = field.NewInt32(tableName, "create_by")
	_articleDataMime.ChangeTime = field.NewTime(tableName, "change_time")
	_articleDataMime.ChangeBy = field.NewInt32(tableName, "change_by")

	_articleDataMime.fillFieldMap()

	return _articleDataMime
}

type articleDataMime struct {
	articleDataMimeDo

	ALL           field.Asterisk
	ID            field.Int64
	ArticleID     field.Int64
	AFrom         field.String
	AReplyTo      field.String
	ATo           field.String
	ACc           field.String
	ABcc          field.String
	ASubject      field.String
	AMessageID    field.String
	AMessageIDMd5 field.String
	AInReplyTo    field.String
	AReferences   field.String
	AContentType  field.String
	ABody         field.String
	IncomingTime  field.Int32
	ContentPath   field.String
	CreateTime    field.Time
	CreateBy      field.Int32
	ChangeTime    field.Time
	ChangeBy      field.Int32

	fieldMap map[string]field.Expr
}

func (a articleDataMime) Table(newTableName string) *articleDataMime {
	a.articleDataMimeDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a articleDataMime) As(alias string) *articleDataMime {
	a.articleDataMimeDo.DO = *(a.articleDataMimeDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *articleDataMime) updateTableName(table string) *articleDataMime {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.ArticleID = field.NewInt64(table, "article_id")
	a.AFrom = field.NewString(table, "a_from")
	a.AReplyTo = field.NewString(table, "a_reply_to")
	a.ATo = field.NewString(table, "a_to")
	a.ACc = field.NewString(table, "a_cc")
	a.ABcc = field.NewString(table, "a_bcc")
	a.ASubject = field.NewString(table, "a_subject")
	a.AMessageID = field.NewString(table, "a_message_id")
	a.AMessageIDMd5 = field.NewString(table, "a_message_id_md5")
	a.AInReplyTo = field.NewString(table, "a_in_reply_to")
	a.AReferences = field.NewString(table, "a_references")
	a.AContentType = field.NewString(table, "a_content_type")
	a.ABody = field.NewString(table, "a_body")
	a.IncomingTime = field.NewInt32(table, "incoming_time")
	a.ContentPath = field.NewString(table, "content_path")
	a.CreateTime = field.NewTime(table, "create_time")
	a.CreateBy = field.NewInt32(table, "create_by")
	a.ChangeTime = field.NewTime(table, "change_time")
	a.ChangeBy = field.NewInt32(table, "change_by")

	a.fillFieldMap()

	return a
}

func (a *articleDataMime) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *articleDataMime) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 20)
	a.fieldMap["id"] = a.ID
	a.fieldMap["article_id"] = a.ArticleID
	a.fieldMap["a_from"] = a.AFrom
	a.fieldMap["a_reply_to"] = a.AReplyTo
	a.fieldMap["a_to"] = a.ATo
	a.fieldMap["a_cc"] = a.ACc
	a.fieldMap["a_bcc"] = a.ABcc
	a.fieldMap["a_subject"] = a.ASubject
	a.fieldMap["a_message_id"] = a.AMessageID
	a.fieldMap["a_message_id_md5"] = a.AMessageIDMd5
	a.fieldMap["a_in_reply_to"] = a.AInReplyTo
	a.fieldMap["a_references"] = a.AReferences
	a.fieldMap["a_content_type"] = a.AContentType
	a.fieldMap["a_body"] = a.ABody
	a.fieldMap["incoming_time"] = a.IncomingTime
	a.fieldMap["content_path"] = a.ContentPath
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["create_by"] = a.CreateBy
	a.fieldMap["change_time"] = a.ChangeTime
	a.fieldMap["change_by"] = a.ChangeBy
}

func (a articleDataMime) clone(db *gorm.DB) articleDataMime {
	a.articleDataMimeDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a articleDataMime) replaceDB(db *gorm.DB) articleDataMime {
	a.articleDataMimeDo.ReplaceDB(db)
	return a
}

type articleDataMimeDo struct{ gen.DO }

type IArticleDataMimeDo interface {
	gen.SubQuery
	Debug() IArticleDataMimeDo
	WithContext(ctx context.Context) IArticleDataMimeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IArticleDataMimeDo
	WriteDB() IArticleDataMimeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IArticleDataMimeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IArticleDataMimeDo
	Not(conds ...gen.Condition) IArticleDataMimeDo
	Or(conds ...gen.Condition) IArticleDataMimeDo
	Select(conds ...field.Expr) IArticleDataMimeDo
	Where(conds ...gen.Condition) IArticleDataMimeDo
	Order(conds ...field.Expr) IArticleDataMimeDo
	Distinct(cols ...field.Expr) IArticleDataMimeDo
	Omit(cols ...field.Expr) IArticleDataMimeDo
	Join(table schema.Tabler, on ...field.Expr) IArticleDataMimeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IArticleDataMimeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IArticleDataMimeDo
	Group(cols ...field.Expr) IArticleDataMimeDo
	Having(conds ...gen.Condition) IArticleDataMimeDo
	Limit(limit int) IArticleDataMimeDo
	Offset(offset int) IArticleDataMimeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IArticleDataMimeDo
	Unscoped() IArticleDataMimeDo
	Create(values ...*model.ArticleDataMime) error
	CreateInBatches(values []*model.ArticleDataMime, batchSize int) error
	Save(values ...*model.ArticleDataMime) error
	First() (*model.ArticleDataMime, error)
	Take() (*model.ArticleDataMime, error)
	Last() (*model.ArticleDataMime, error)
	Find() ([]*model.ArticleDataMime, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ArticleDataMime, err error)
	FindInBatches(result *[]*model.ArticleDataMime, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ArticleDataMime) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IArticleDataMimeDo
	Assign(attrs ...field.AssignExpr) IArticleDataMimeDo
	Joins(fields ...field.RelationField) IArticleDataMimeDo
	Preload(fields ...field.RelationField) IArticleDataMimeDo
	FirstOrInit() (*model.ArticleDataMime, error)
	FirstOrCreate() (*model.ArticleDataMime, error)
	FindByPage(offset int, limit int) (result []*model.ArticleDataMime, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IArticleDataMimeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a articleDataMimeDo) Debug() IArticleDataMimeDo {
	return a.withDO(a.DO.Debug())
}

func (a articleDataMimeDo) WithContext(ctx context.Context) IArticleDataMimeDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a articleDataMimeDo) ReadDB() IArticleDataMimeDo {
	return a.Clauses(dbresolver.Read)
}

func (a articleDataMimeDo) WriteDB() IArticleDataMimeDo {
	return a.Clauses(dbresolver.Write)
}

func (a articleDataMimeDo) Session(config *gorm.Session) IArticleDataMimeDo {
	return a.withDO(a.DO.Session(config))
}

func (a articleDataMimeDo) Clauses(conds ...clause.Expression) IArticleDataMimeDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a articleDataMimeDo) Returning(value interface{}, columns ...string) IArticleDataMimeDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a articleDataMimeDo) Not(conds ...gen.Condition) IArticleDataMimeDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a articleDataMimeDo) Or(conds ...gen.Condition) IArticleDataMimeDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a articleDataMimeDo) Select(conds ...field.Expr) IArticleDataMimeDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a articleDataMimeDo) Where(conds ...gen.Condition) IArticleDataMimeDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a articleDataMimeDo) Order(conds ...field.Expr) IArticleDataMimeDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a articleDataMimeDo) Distinct(cols ...field.Expr) IArticleDataMimeDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a articleDataMimeDo) Omit(cols ...field.Expr) IArticleDataMimeDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a articleDataMimeDo) Join(table schema.Tabler, on ...field.Expr) IArticleDataMimeDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a articleDataMimeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IArticleDataMimeDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a articleDataMimeDo) RightJoin(table schema.Tabler, on ...field.Expr) IArticleDataMimeDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a articleDataMimeDo) Group(cols ...field.Expr) IArticleDataMimeDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a articleDataMimeDo) Having(conds ...gen.Condition) IArticleDataMimeDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a articleDataMimeDo) Limit(limit int) IArticleDataMimeDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a articleDataMimeDo) Offset(offset int) IArticleDataMimeDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a articleDataMimeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IArticleDataMimeDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a articleDataMimeDo) Unscoped() IArticleDataMimeDo {
	return a.withDO(a.DO.Unscoped())
}

func (a articleDataMimeDo) Create(values ...*model.ArticleDataMime) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a articleDataMimeDo) CreateInBatches(values []*model.ArticleDataMime, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a articleDataMimeDo) Save(values ...*model.ArticleDataMime) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a articleDataMimeDo) First() (*model.ArticleDataMime, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleDataMime), nil
	}
}

func (a articleDataMimeDo) Take() (*model.ArticleDataMime, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleDataMime), nil
	}
}

func (a articleDataMimeDo) Last() (*model.ArticleDataMime, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleDataMime), nil
	}
}

func (a articleDataMimeDo) Find() ([]*model.ArticleDataMime, error) {
	result, err := a.DO.Find()
	return result.([]*model.ArticleDataMime), err
}

func (a articleDataMimeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ArticleDataMime, err error) {
	buf := make([]*model.ArticleDataMime, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a articleDataMimeDo) FindInBatches(result *[]*model.ArticleDataMime, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a articleDataMimeDo) Attrs(attrs ...field.AssignExpr) IArticleDataMimeDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a articleDataMimeDo) Assign(attrs ...field.AssignExpr) IArticleDataMimeDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a articleDataMimeDo) Joins(fields ...field.RelationField) IArticleDataMimeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a articleDataMimeDo) Preload(fields ...field.RelationField) IArticleDataMimeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a articleDataMimeDo) FirstOrInit() (*model.ArticleDataMime, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleDataMime), nil
	}
}

func (a articleDataMimeDo) FirstOrCreate() (*model.ArticleDataMime, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleDataMime), nil
	}
}

func (a articleDataMimeDo) FindByPage(offset int, limit int) (result []*model.ArticleDataMime, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a articleDataMimeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a articleDataMimeDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a articleDataMimeDo) Delete(models ...*model.ArticleDataMime) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *articleDataMimeDo) withDO(do gen.Dao) *articleDataMimeDo {
	a.DO = *do.(*gen.DO)
	return a
}
