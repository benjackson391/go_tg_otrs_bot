// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newTicketType(db *gorm.DB, opts ...gen.DOOption) ticketType {
	_ticketType := ticketType{}

	_ticketType.ticketTypeDo.UseDB(db, opts...)
	_ticketType.ticketTypeDo.UseModel(&model.TicketType{})

	tableName := _ticketType.ticketTypeDo.TableName()
	_ticketType.ALL = field.NewAsterisk(tableName)
	_ticketType.ID = field.NewInt32(tableName, "id")
	_ticketType.Name = field.NewString(tableName, "name")
	_ticketType.ValidID = field.NewInt32(tableName, "valid_id")
	_ticketType.CreateTime = field.NewTime(tableName, "create_time")
	_ticketType.CreateBy = field.NewInt32(tableName, "create_by")
	_ticketType.ChangeTime = field.NewTime(tableName, "change_time")
	_ticketType.ChangeBy = field.NewInt32(tableName, "change_by")

	_ticketType.fillFieldMap()

	return _ticketType
}

type ticketType struct {
	ticketTypeDo

	ALL        field.Asterisk
	ID         field.Int32
	Name       field.String
	ValidID    field.Int32
	CreateTime field.Time
	CreateBy   field.Int32
	ChangeTime field.Time
	ChangeBy   field.Int32

	fieldMap map[string]field.Expr
}

func (t ticketType) Table(newTableName string) *ticketType {
	t.ticketTypeDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t ticketType) As(alias string) *ticketType {
	t.ticketTypeDo.DO = *(t.ticketTypeDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *ticketType) updateTableName(table string) *ticketType {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.Name = field.NewString(table, "name")
	t.ValidID = field.NewInt32(table, "valid_id")
	t.CreateTime = field.NewTime(table, "create_time")
	t.CreateBy = field.NewInt32(table, "create_by")
	t.ChangeTime = field.NewTime(table, "change_time")
	t.ChangeBy = field.NewInt32(table, "change_by")

	t.fillFieldMap()

	return t
}

func (t *ticketType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *ticketType) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["valid_id"] = t.ValidID
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["create_by"] = t.CreateBy
	t.fieldMap["change_time"] = t.ChangeTime
	t.fieldMap["change_by"] = t.ChangeBy
}

func (t ticketType) clone(db *gorm.DB) ticketType {
	t.ticketTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t ticketType) replaceDB(db *gorm.DB) ticketType {
	t.ticketTypeDo.ReplaceDB(db)
	return t
}

type ticketTypeDo struct{ gen.DO }

type ITicketTypeDo interface {
	gen.SubQuery
	Debug() ITicketTypeDo
	WithContext(ctx context.Context) ITicketTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITicketTypeDo
	WriteDB() ITicketTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITicketTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITicketTypeDo
	Not(conds ...gen.Condition) ITicketTypeDo
	Or(conds ...gen.Condition) ITicketTypeDo
	Select(conds ...field.Expr) ITicketTypeDo
	Where(conds ...gen.Condition) ITicketTypeDo
	Order(conds ...field.Expr) ITicketTypeDo
	Distinct(cols ...field.Expr) ITicketTypeDo
	Omit(cols ...field.Expr) ITicketTypeDo
	Join(table schema.Tabler, on ...field.Expr) ITicketTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITicketTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITicketTypeDo
	Group(cols ...field.Expr) ITicketTypeDo
	Having(conds ...gen.Condition) ITicketTypeDo
	Limit(limit int) ITicketTypeDo
	Offset(offset int) ITicketTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITicketTypeDo
	Unscoped() ITicketTypeDo
	Create(values ...*model.TicketType) error
	CreateInBatches(values []*model.TicketType, batchSize int) error
	Save(values ...*model.TicketType) error
	First() (*model.TicketType, error)
	Take() (*model.TicketType, error)
	Last() (*model.TicketType, error)
	Find() ([]*model.TicketType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TicketType, err error)
	FindInBatches(result *[]*model.TicketType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TicketType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITicketTypeDo
	Assign(attrs ...field.AssignExpr) ITicketTypeDo
	Joins(fields ...field.RelationField) ITicketTypeDo
	Preload(fields ...field.RelationField) ITicketTypeDo
	FirstOrInit() (*model.TicketType, error)
	FirstOrCreate() (*model.TicketType, error)
	FindByPage(offset int, limit int) (result []*model.TicketType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITicketTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t ticketTypeDo) Debug() ITicketTypeDo {
	return t.withDO(t.DO.Debug())
}

func (t ticketTypeDo) WithContext(ctx context.Context) ITicketTypeDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t ticketTypeDo) ReadDB() ITicketTypeDo {
	return t.Clauses(dbresolver.Read)
}

func (t ticketTypeDo) WriteDB() ITicketTypeDo {
	return t.Clauses(dbresolver.Write)
}

func (t ticketTypeDo) Session(config *gorm.Session) ITicketTypeDo {
	return t.withDO(t.DO.Session(config))
}

func (t ticketTypeDo) Clauses(conds ...clause.Expression) ITicketTypeDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t ticketTypeDo) Returning(value interface{}, columns ...string) ITicketTypeDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t ticketTypeDo) Not(conds ...gen.Condition) ITicketTypeDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t ticketTypeDo) Or(conds ...gen.Condition) ITicketTypeDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t ticketTypeDo) Select(conds ...field.Expr) ITicketTypeDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t ticketTypeDo) Where(conds ...gen.Condition) ITicketTypeDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t ticketTypeDo) Order(conds ...field.Expr) ITicketTypeDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t ticketTypeDo) Distinct(cols ...field.Expr) ITicketTypeDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t ticketTypeDo) Omit(cols ...field.Expr) ITicketTypeDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t ticketTypeDo) Join(table schema.Tabler, on ...field.Expr) ITicketTypeDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t ticketTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITicketTypeDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t ticketTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) ITicketTypeDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t ticketTypeDo) Group(cols ...field.Expr) ITicketTypeDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t ticketTypeDo) Having(conds ...gen.Condition) ITicketTypeDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t ticketTypeDo) Limit(limit int) ITicketTypeDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t ticketTypeDo) Offset(offset int) ITicketTypeDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t ticketTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITicketTypeDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t ticketTypeDo) Unscoped() ITicketTypeDo {
	return t.withDO(t.DO.Unscoped())
}

func (t ticketTypeDo) Create(values ...*model.TicketType) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t ticketTypeDo) CreateInBatches(values []*model.TicketType, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t ticketTypeDo) Save(values ...*model.TicketType) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t ticketTypeDo) First() (*model.TicketType, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketType), nil
	}
}

func (t ticketTypeDo) Take() (*model.TicketType, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketType), nil
	}
}

func (t ticketTypeDo) Last() (*model.TicketType, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketType), nil
	}
}

func (t ticketTypeDo) Find() ([]*model.TicketType, error) {
	result, err := t.DO.Find()
	return result.([]*model.TicketType), err
}

func (t ticketTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TicketType, err error) {
	buf := make([]*model.TicketType, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t ticketTypeDo) FindInBatches(result *[]*model.TicketType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t ticketTypeDo) Attrs(attrs ...field.AssignExpr) ITicketTypeDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t ticketTypeDo) Assign(attrs ...field.AssignExpr) ITicketTypeDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t ticketTypeDo) Joins(fields ...field.RelationField) ITicketTypeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t ticketTypeDo) Preload(fields ...field.RelationField) ITicketTypeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t ticketTypeDo) FirstOrInit() (*model.TicketType, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketType), nil
	}
}

func (t ticketTypeDo) FirstOrCreate() (*model.TicketType, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketType), nil
	}
}

func (t ticketTypeDo) FindByPage(offset int, limit int) (result []*model.TicketType, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t ticketTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t ticketTypeDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t ticketTypeDo) Delete(models ...*model.TicketType) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *ticketTypeDo) withDO(do gen.Dao) *ticketTypeDo {
	t.DO = *do.(*gen.DO)
	return t
}
