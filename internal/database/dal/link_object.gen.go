// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newLinkObject(db *gorm.DB, opts ...gen.DOOption) linkObject {
	_linkObject := linkObject{}

	_linkObject.linkObjectDo.UseDB(db, opts...)
	_linkObject.linkObjectDo.UseModel(&model.LinkObject{})

	tableName := _linkObject.linkObjectDo.TableName()
	_linkObject.ALL = field.NewAsterisk(tableName)
	_linkObject.ID = field.NewInt32(tableName, "id")
	_linkObject.Name = field.NewString(tableName, "name")

	_linkObject.fillFieldMap()

	return _linkObject
}

type linkObject struct {
	linkObjectDo

	ALL  field.Asterisk
	ID   field.Int32
	Name field.String

	fieldMap map[string]field.Expr
}

func (l linkObject) Table(newTableName string) *linkObject {
	l.linkObjectDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l linkObject) As(alias string) *linkObject {
	l.linkObjectDo.DO = *(l.linkObjectDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *linkObject) updateTableName(table string) *linkObject {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt32(table, "id")
	l.Name = field.NewString(table, "name")

	l.fillFieldMap()

	return l
}

func (l *linkObject) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *linkObject) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 2)
	l.fieldMap["id"] = l.ID
	l.fieldMap["name"] = l.Name
}

func (l linkObject) clone(db *gorm.DB) linkObject {
	l.linkObjectDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l linkObject) replaceDB(db *gorm.DB) linkObject {
	l.linkObjectDo.ReplaceDB(db)
	return l
}

type linkObjectDo struct{ gen.DO }

type ILinkObjectDo interface {
	gen.SubQuery
	Debug() ILinkObjectDo
	WithContext(ctx context.Context) ILinkObjectDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILinkObjectDo
	WriteDB() ILinkObjectDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILinkObjectDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILinkObjectDo
	Not(conds ...gen.Condition) ILinkObjectDo
	Or(conds ...gen.Condition) ILinkObjectDo
	Select(conds ...field.Expr) ILinkObjectDo
	Where(conds ...gen.Condition) ILinkObjectDo
	Order(conds ...field.Expr) ILinkObjectDo
	Distinct(cols ...field.Expr) ILinkObjectDo
	Omit(cols ...field.Expr) ILinkObjectDo
	Join(table schema.Tabler, on ...field.Expr) ILinkObjectDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILinkObjectDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILinkObjectDo
	Group(cols ...field.Expr) ILinkObjectDo
	Having(conds ...gen.Condition) ILinkObjectDo
	Limit(limit int) ILinkObjectDo
	Offset(offset int) ILinkObjectDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILinkObjectDo
	Unscoped() ILinkObjectDo
	Create(values ...*model.LinkObject) error
	CreateInBatches(values []*model.LinkObject, batchSize int) error
	Save(values ...*model.LinkObject) error
	First() (*model.LinkObject, error)
	Take() (*model.LinkObject, error)
	Last() (*model.LinkObject, error)
	Find() ([]*model.LinkObject, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LinkObject, err error)
	FindInBatches(result *[]*model.LinkObject, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LinkObject) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILinkObjectDo
	Assign(attrs ...field.AssignExpr) ILinkObjectDo
	Joins(fields ...field.RelationField) ILinkObjectDo
	Preload(fields ...field.RelationField) ILinkObjectDo
	FirstOrInit() (*model.LinkObject, error)
	FirstOrCreate() (*model.LinkObject, error)
	FindByPage(offset int, limit int) (result []*model.LinkObject, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILinkObjectDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l linkObjectDo) Debug() ILinkObjectDo {
	return l.withDO(l.DO.Debug())
}

func (l linkObjectDo) WithContext(ctx context.Context) ILinkObjectDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l linkObjectDo) ReadDB() ILinkObjectDo {
	return l.Clauses(dbresolver.Read)
}

func (l linkObjectDo) WriteDB() ILinkObjectDo {
	return l.Clauses(dbresolver.Write)
}

func (l linkObjectDo) Session(config *gorm.Session) ILinkObjectDo {
	return l.withDO(l.DO.Session(config))
}

func (l linkObjectDo) Clauses(conds ...clause.Expression) ILinkObjectDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l linkObjectDo) Returning(value interface{}, columns ...string) ILinkObjectDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l linkObjectDo) Not(conds ...gen.Condition) ILinkObjectDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l linkObjectDo) Or(conds ...gen.Condition) ILinkObjectDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l linkObjectDo) Select(conds ...field.Expr) ILinkObjectDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l linkObjectDo) Where(conds ...gen.Condition) ILinkObjectDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l linkObjectDo) Order(conds ...field.Expr) ILinkObjectDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l linkObjectDo) Distinct(cols ...field.Expr) ILinkObjectDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l linkObjectDo) Omit(cols ...field.Expr) ILinkObjectDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l linkObjectDo) Join(table schema.Tabler, on ...field.Expr) ILinkObjectDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l linkObjectDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILinkObjectDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l linkObjectDo) RightJoin(table schema.Tabler, on ...field.Expr) ILinkObjectDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l linkObjectDo) Group(cols ...field.Expr) ILinkObjectDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l linkObjectDo) Having(conds ...gen.Condition) ILinkObjectDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l linkObjectDo) Limit(limit int) ILinkObjectDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l linkObjectDo) Offset(offset int) ILinkObjectDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l linkObjectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILinkObjectDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l linkObjectDo) Unscoped() ILinkObjectDo {
	return l.withDO(l.DO.Unscoped())
}

func (l linkObjectDo) Create(values ...*model.LinkObject) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l linkObjectDo) CreateInBatches(values []*model.LinkObject, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l linkObjectDo) Save(values ...*model.LinkObject) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l linkObjectDo) First() (*model.LinkObject, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LinkObject), nil
	}
}

func (l linkObjectDo) Take() (*model.LinkObject, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LinkObject), nil
	}
}

func (l linkObjectDo) Last() (*model.LinkObject, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LinkObject), nil
	}
}

func (l linkObjectDo) Find() ([]*model.LinkObject, error) {
	result, err := l.DO.Find()
	return result.([]*model.LinkObject), err
}

func (l linkObjectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LinkObject, err error) {
	buf := make([]*model.LinkObject, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l linkObjectDo) FindInBatches(result *[]*model.LinkObject, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l linkObjectDo) Attrs(attrs ...field.AssignExpr) ILinkObjectDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l linkObjectDo) Assign(attrs ...field.AssignExpr) ILinkObjectDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l linkObjectDo) Joins(fields ...field.RelationField) ILinkObjectDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l linkObjectDo) Preload(fields ...field.RelationField) ILinkObjectDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l linkObjectDo) FirstOrInit() (*model.LinkObject, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LinkObject), nil
	}
}

func (l linkObjectDo) FirstOrCreate() (*model.LinkObject, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LinkObject), nil
	}
}

func (l linkObjectDo) FindByPage(offset int, limit int) (result []*model.LinkObject, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l linkObjectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l linkObjectDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l linkObjectDo) Delete(models ...*model.LinkObject) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *linkObjectDo) withDO(do gen.Dao) *linkObjectDo {
	l.DO = *do.(*gen.DO)
	return l
}
