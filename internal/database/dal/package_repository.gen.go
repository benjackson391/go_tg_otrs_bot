// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newPackageRepository(db *gorm.DB, opts ...gen.DOOption) packageRepository {
	_packageRepository := packageRepository{}

	_packageRepository.packageRepositoryDo.UseDB(db, opts...)
	_packageRepository.packageRepositoryDo.UseModel(&model.PackageRepository{})

	tableName := _packageRepository.packageRepositoryDo.TableName()
	_packageRepository.ALL = field.NewAsterisk(tableName)
	_packageRepository.ID = field.NewInt32(tableName, "id")
	_packageRepository.Name = field.NewString(tableName, "name")
	_packageRepository.Version = field.NewString(tableName, "version")
	_packageRepository.Vendor = field.NewString(tableName, "vendor")
	_packageRepository.InstallStatus = field.NewString(tableName, "install_status")
	_packageRepository.Filename = field.NewString(tableName, "filename")
	_packageRepository.ContentType = field.NewString(tableName, "content_type")
	_packageRepository.Content = field.NewBytes(tableName, "content")
	_packageRepository.CreateTime = field.NewTime(tableName, "create_time")
	_packageRepository.CreateBy = field.NewInt32(tableName, "create_by")
	_packageRepository.ChangeTime = field.NewTime(tableName, "change_time")
	_packageRepository.ChangeBy = field.NewInt32(tableName, "change_by")

	_packageRepository.fillFieldMap()

	return _packageRepository
}

type packageRepository struct {
	packageRepositoryDo

	ALL           field.Asterisk
	ID            field.Int32
	Name          field.String
	Version       field.String
	Vendor        field.String
	InstallStatus field.String
	Filename      field.String
	ContentType   field.String
	Content       field.Bytes
	CreateTime    field.Time
	CreateBy      field.Int32
	ChangeTime    field.Time
	ChangeBy      field.Int32

	fieldMap map[string]field.Expr
}

func (p packageRepository) Table(newTableName string) *packageRepository {
	p.packageRepositoryDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p packageRepository) As(alias string) *packageRepository {
	p.packageRepositoryDo.DO = *(p.packageRepositoryDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *packageRepository) updateTableName(table string) *packageRepository {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.Name = field.NewString(table, "name")
	p.Version = field.NewString(table, "version")
	p.Vendor = field.NewString(table, "vendor")
	p.InstallStatus = field.NewString(table, "install_status")
	p.Filename = field.NewString(table, "filename")
	p.ContentType = field.NewString(table, "content_type")
	p.Content = field.NewBytes(table, "content")
	p.CreateTime = field.NewTime(table, "create_time")
	p.CreateBy = field.NewInt32(table, "create_by")
	p.ChangeTime = field.NewTime(table, "change_time")
	p.ChangeBy = field.NewInt32(table, "change_by")

	p.fillFieldMap()

	return p
}

func (p *packageRepository) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *packageRepository) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 12)
	p.fieldMap["id"] = p.ID
	p.fieldMap["name"] = p.Name
	p.fieldMap["version"] = p.Version
	p.fieldMap["vendor"] = p.Vendor
	p.fieldMap["install_status"] = p.InstallStatus
	p.fieldMap["filename"] = p.Filename
	p.fieldMap["content_type"] = p.ContentType
	p.fieldMap["content"] = p.Content
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["create_by"] = p.CreateBy
	p.fieldMap["change_time"] = p.ChangeTime
	p.fieldMap["change_by"] = p.ChangeBy
}

func (p packageRepository) clone(db *gorm.DB) packageRepository {
	p.packageRepositoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p packageRepository) replaceDB(db *gorm.DB) packageRepository {
	p.packageRepositoryDo.ReplaceDB(db)
	return p
}

type packageRepositoryDo struct{ gen.DO }

type IPackageRepositoryDo interface {
	gen.SubQuery
	Debug() IPackageRepositoryDo
	WithContext(ctx context.Context) IPackageRepositoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPackageRepositoryDo
	WriteDB() IPackageRepositoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPackageRepositoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPackageRepositoryDo
	Not(conds ...gen.Condition) IPackageRepositoryDo
	Or(conds ...gen.Condition) IPackageRepositoryDo
	Select(conds ...field.Expr) IPackageRepositoryDo
	Where(conds ...gen.Condition) IPackageRepositoryDo
	Order(conds ...field.Expr) IPackageRepositoryDo
	Distinct(cols ...field.Expr) IPackageRepositoryDo
	Omit(cols ...field.Expr) IPackageRepositoryDo
	Join(table schema.Tabler, on ...field.Expr) IPackageRepositoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPackageRepositoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPackageRepositoryDo
	Group(cols ...field.Expr) IPackageRepositoryDo
	Having(conds ...gen.Condition) IPackageRepositoryDo
	Limit(limit int) IPackageRepositoryDo
	Offset(offset int) IPackageRepositoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPackageRepositoryDo
	Unscoped() IPackageRepositoryDo
	Create(values ...*model.PackageRepository) error
	CreateInBatches(values []*model.PackageRepository, batchSize int) error
	Save(values ...*model.PackageRepository) error
	First() (*model.PackageRepository, error)
	Take() (*model.PackageRepository, error)
	Last() (*model.PackageRepository, error)
	Find() ([]*model.PackageRepository, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PackageRepository, err error)
	FindInBatches(result *[]*model.PackageRepository, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PackageRepository) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPackageRepositoryDo
	Assign(attrs ...field.AssignExpr) IPackageRepositoryDo
	Joins(fields ...field.RelationField) IPackageRepositoryDo
	Preload(fields ...field.RelationField) IPackageRepositoryDo
	FirstOrInit() (*model.PackageRepository, error)
	FirstOrCreate() (*model.PackageRepository, error)
	FindByPage(offset int, limit int) (result []*model.PackageRepository, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPackageRepositoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p packageRepositoryDo) Debug() IPackageRepositoryDo {
	return p.withDO(p.DO.Debug())
}

func (p packageRepositoryDo) WithContext(ctx context.Context) IPackageRepositoryDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p packageRepositoryDo) ReadDB() IPackageRepositoryDo {
	return p.Clauses(dbresolver.Read)
}

func (p packageRepositoryDo) WriteDB() IPackageRepositoryDo {
	return p.Clauses(dbresolver.Write)
}

func (p packageRepositoryDo) Session(config *gorm.Session) IPackageRepositoryDo {
	return p.withDO(p.DO.Session(config))
}

func (p packageRepositoryDo) Clauses(conds ...clause.Expression) IPackageRepositoryDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p packageRepositoryDo) Returning(value interface{}, columns ...string) IPackageRepositoryDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p packageRepositoryDo) Not(conds ...gen.Condition) IPackageRepositoryDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p packageRepositoryDo) Or(conds ...gen.Condition) IPackageRepositoryDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p packageRepositoryDo) Select(conds ...field.Expr) IPackageRepositoryDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p packageRepositoryDo) Where(conds ...gen.Condition) IPackageRepositoryDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p packageRepositoryDo) Order(conds ...field.Expr) IPackageRepositoryDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p packageRepositoryDo) Distinct(cols ...field.Expr) IPackageRepositoryDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p packageRepositoryDo) Omit(cols ...field.Expr) IPackageRepositoryDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p packageRepositoryDo) Join(table schema.Tabler, on ...field.Expr) IPackageRepositoryDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p packageRepositoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPackageRepositoryDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p packageRepositoryDo) RightJoin(table schema.Tabler, on ...field.Expr) IPackageRepositoryDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p packageRepositoryDo) Group(cols ...field.Expr) IPackageRepositoryDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p packageRepositoryDo) Having(conds ...gen.Condition) IPackageRepositoryDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p packageRepositoryDo) Limit(limit int) IPackageRepositoryDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p packageRepositoryDo) Offset(offset int) IPackageRepositoryDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p packageRepositoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPackageRepositoryDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p packageRepositoryDo) Unscoped() IPackageRepositoryDo {
	return p.withDO(p.DO.Unscoped())
}

func (p packageRepositoryDo) Create(values ...*model.PackageRepository) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p packageRepositoryDo) CreateInBatches(values []*model.PackageRepository, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p packageRepositoryDo) Save(values ...*model.PackageRepository) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p packageRepositoryDo) First() (*model.PackageRepository, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PackageRepository), nil
	}
}

func (p packageRepositoryDo) Take() (*model.PackageRepository, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PackageRepository), nil
	}
}

func (p packageRepositoryDo) Last() (*model.PackageRepository, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PackageRepository), nil
	}
}

func (p packageRepositoryDo) Find() ([]*model.PackageRepository, error) {
	result, err := p.DO.Find()
	return result.([]*model.PackageRepository), err
}

func (p packageRepositoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PackageRepository, err error) {
	buf := make([]*model.PackageRepository, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p packageRepositoryDo) FindInBatches(result *[]*model.PackageRepository, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p packageRepositoryDo) Attrs(attrs ...field.AssignExpr) IPackageRepositoryDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p packageRepositoryDo) Assign(attrs ...field.AssignExpr) IPackageRepositoryDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p packageRepositoryDo) Joins(fields ...field.RelationField) IPackageRepositoryDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p packageRepositoryDo) Preload(fields ...field.RelationField) IPackageRepositoryDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p packageRepositoryDo) FirstOrInit() (*model.PackageRepository, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PackageRepository), nil
	}
}

func (p packageRepositoryDo) FirstOrCreate() (*model.PackageRepository, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PackageRepository), nil
	}
}

func (p packageRepositoryDo) FindByPage(offset int, limit int) (result []*model.PackageRepository, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p packageRepositoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p packageRepositoryDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p packageRepositoryDo) Delete(models ...*model.PackageRepository) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *packageRepositoryDo) withDO(do gen.Dao) *packageRepositoryDo {
	p.DO = *do.(*gen.DO)
	return p
}
