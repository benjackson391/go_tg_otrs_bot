// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newMailAccount(db *gorm.DB, opts ...gen.DOOption) mailAccount {
	_mailAccount := mailAccount{}

	_mailAccount.mailAccountDo.UseDB(db, opts...)
	_mailAccount.mailAccountDo.UseModel(&model.MailAccount{})

	tableName := _mailAccount.mailAccountDo.TableName()
	_mailAccount.ALL = field.NewAsterisk(tableName)
	_mailAccount.ID = field.NewInt32(tableName, "id")
	_mailAccount.Login = field.NewString(tableName, "login")
	_mailAccount.Pw = field.NewString(tableName, "pw")
	_mailAccount.Host = field.NewString(tableName, "host")
	_mailAccount.AccountType = field.NewString(tableName, "account_type")
	_mailAccount.QueueID = field.NewInt32(tableName, "queue_id")
	_mailAccount.Trusted = field.NewInt32(tableName, "trusted")
	_mailAccount.ImapFolder = field.NewString(tableName, "imap_folder")
	_mailAccount.Comments = field.NewString(tableName, "comments")
	_mailAccount.ValidID = field.NewInt32(tableName, "valid_id")
	_mailAccount.CreateTime = field.NewTime(tableName, "create_time")
	_mailAccount.CreateBy = field.NewInt32(tableName, "create_by")
	_mailAccount.ChangeTime = field.NewTime(tableName, "change_time")
	_mailAccount.ChangeBy = field.NewInt32(tableName, "change_by")

	_mailAccount.fillFieldMap()

	return _mailAccount
}

type mailAccount struct {
	mailAccountDo

	ALL         field.Asterisk
	ID          field.Int32
	Login       field.String
	Pw          field.String
	Host        field.String
	AccountType field.String
	QueueID     field.Int32
	Trusted     field.Int32
	ImapFolder  field.String
	Comments    field.String
	ValidID     field.Int32
	CreateTime  field.Time
	CreateBy    field.Int32
	ChangeTime  field.Time
	ChangeBy    field.Int32

	fieldMap map[string]field.Expr
}

func (m mailAccount) Table(newTableName string) *mailAccount {
	m.mailAccountDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mailAccount) As(alias string) *mailAccount {
	m.mailAccountDo.DO = *(m.mailAccountDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mailAccount) updateTableName(table string) *mailAccount {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.Login = field.NewString(table, "login")
	m.Pw = field.NewString(table, "pw")
	m.Host = field.NewString(table, "host")
	m.AccountType = field.NewString(table, "account_type")
	m.QueueID = field.NewInt32(table, "queue_id")
	m.Trusted = field.NewInt32(table, "trusted")
	m.ImapFolder = field.NewString(table, "imap_folder")
	m.Comments = field.NewString(table, "comments")
	m.ValidID = field.NewInt32(table, "valid_id")
	m.CreateTime = field.NewTime(table, "create_time")
	m.CreateBy = field.NewInt32(table, "create_by")
	m.ChangeTime = field.NewTime(table, "change_time")
	m.ChangeBy = field.NewInt32(table, "change_by")

	m.fillFieldMap()

	return m
}

func (m *mailAccount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mailAccount) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 14)
	m.fieldMap["id"] = m.ID
	m.fieldMap["login"] = m.Login
	m.fieldMap["pw"] = m.Pw
	m.fieldMap["host"] = m.Host
	m.fieldMap["account_type"] = m.AccountType
	m.fieldMap["queue_id"] = m.QueueID
	m.fieldMap["trusted"] = m.Trusted
	m.fieldMap["imap_folder"] = m.ImapFolder
	m.fieldMap["comments"] = m.Comments
	m.fieldMap["valid_id"] = m.ValidID
	m.fieldMap["create_time"] = m.CreateTime
	m.fieldMap["create_by"] = m.CreateBy
	m.fieldMap["change_time"] = m.ChangeTime
	m.fieldMap["change_by"] = m.ChangeBy
}

func (m mailAccount) clone(db *gorm.DB) mailAccount {
	m.mailAccountDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mailAccount) replaceDB(db *gorm.DB) mailAccount {
	m.mailAccountDo.ReplaceDB(db)
	return m
}

type mailAccountDo struct{ gen.DO }

type IMailAccountDo interface {
	gen.SubQuery
	Debug() IMailAccountDo
	WithContext(ctx context.Context) IMailAccountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMailAccountDo
	WriteDB() IMailAccountDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMailAccountDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMailAccountDo
	Not(conds ...gen.Condition) IMailAccountDo
	Or(conds ...gen.Condition) IMailAccountDo
	Select(conds ...field.Expr) IMailAccountDo
	Where(conds ...gen.Condition) IMailAccountDo
	Order(conds ...field.Expr) IMailAccountDo
	Distinct(cols ...field.Expr) IMailAccountDo
	Omit(cols ...field.Expr) IMailAccountDo
	Join(table schema.Tabler, on ...field.Expr) IMailAccountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMailAccountDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMailAccountDo
	Group(cols ...field.Expr) IMailAccountDo
	Having(conds ...gen.Condition) IMailAccountDo
	Limit(limit int) IMailAccountDo
	Offset(offset int) IMailAccountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMailAccountDo
	Unscoped() IMailAccountDo
	Create(values ...*model.MailAccount) error
	CreateInBatches(values []*model.MailAccount, batchSize int) error
	Save(values ...*model.MailAccount) error
	First() (*model.MailAccount, error)
	Take() (*model.MailAccount, error)
	Last() (*model.MailAccount, error)
	Find() ([]*model.MailAccount, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MailAccount, err error)
	FindInBatches(result *[]*model.MailAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MailAccount) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMailAccountDo
	Assign(attrs ...field.AssignExpr) IMailAccountDo
	Joins(fields ...field.RelationField) IMailAccountDo
	Preload(fields ...field.RelationField) IMailAccountDo
	FirstOrInit() (*model.MailAccount, error)
	FirstOrCreate() (*model.MailAccount, error)
	FindByPage(offset int, limit int) (result []*model.MailAccount, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMailAccountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m mailAccountDo) Debug() IMailAccountDo {
	return m.withDO(m.DO.Debug())
}

func (m mailAccountDo) WithContext(ctx context.Context) IMailAccountDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mailAccountDo) ReadDB() IMailAccountDo {
	return m.Clauses(dbresolver.Read)
}

func (m mailAccountDo) WriteDB() IMailAccountDo {
	return m.Clauses(dbresolver.Write)
}

func (m mailAccountDo) Session(config *gorm.Session) IMailAccountDo {
	return m.withDO(m.DO.Session(config))
}

func (m mailAccountDo) Clauses(conds ...clause.Expression) IMailAccountDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mailAccountDo) Returning(value interface{}, columns ...string) IMailAccountDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mailAccountDo) Not(conds ...gen.Condition) IMailAccountDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mailAccountDo) Or(conds ...gen.Condition) IMailAccountDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mailAccountDo) Select(conds ...field.Expr) IMailAccountDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mailAccountDo) Where(conds ...gen.Condition) IMailAccountDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mailAccountDo) Order(conds ...field.Expr) IMailAccountDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mailAccountDo) Distinct(cols ...field.Expr) IMailAccountDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mailAccountDo) Omit(cols ...field.Expr) IMailAccountDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mailAccountDo) Join(table schema.Tabler, on ...field.Expr) IMailAccountDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mailAccountDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMailAccountDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mailAccountDo) RightJoin(table schema.Tabler, on ...field.Expr) IMailAccountDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mailAccountDo) Group(cols ...field.Expr) IMailAccountDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mailAccountDo) Having(conds ...gen.Condition) IMailAccountDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mailAccountDo) Limit(limit int) IMailAccountDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mailAccountDo) Offset(offset int) IMailAccountDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mailAccountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMailAccountDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mailAccountDo) Unscoped() IMailAccountDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mailAccountDo) Create(values ...*model.MailAccount) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mailAccountDo) CreateInBatches(values []*model.MailAccount, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mailAccountDo) Save(values ...*model.MailAccount) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mailAccountDo) First() (*model.MailAccount, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MailAccount), nil
	}
}

func (m mailAccountDo) Take() (*model.MailAccount, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MailAccount), nil
	}
}

func (m mailAccountDo) Last() (*model.MailAccount, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MailAccount), nil
	}
}

func (m mailAccountDo) Find() ([]*model.MailAccount, error) {
	result, err := m.DO.Find()
	return result.([]*model.MailAccount), err
}

func (m mailAccountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MailAccount, err error) {
	buf := make([]*model.MailAccount, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mailAccountDo) FindInBatches(result *[]*model.MailAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mailAccountDo) Attrs(attrs ...field.AssignExpr) IMailAccountDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mailAccountDo) Assign(attrs ...field.AssignExpr) IMailAccountDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mailAccountDo) Joins(fields ...field.RelationField) IMailAccountDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mailAccountDo) Preload(fields ...field.RelationField) IMailAccountDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mailAccountDo) FirstOrInit() (*model.MailAccount, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MailAccount), nil
	}
}

func (m mailAccountDo) FirstOrCreate() (*model.MailAccount, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MailAccount), nil
	}
}

func (m mailAccountDo) FindByPage(offset int, limit int) (result []*model.MailAccount, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mailAccountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mailAccountDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mailAccountDo) Delete(models ...*model.MailAccount) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mailAccountDo) withDO(do gen.Dao) *mailAccountDo {
	m.DO = *do.(*gen.DO)
	return m
}
