// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newFaqCategory(db *gorm.DB, opts ...gen.DOOption) faqCategory {
	_faqCategory := faqCategory{}

	_faqCategory.faqCategoryDo.UseDB(db, opts...)
	_faqCategory.faqCategoryDo.UseModel(&model.FaqCategory{})

	tableName := _faqCategory.faqCategoryDo.TableName()
	_faqCategory.ALL = field.NewAsterisk(tableName)
	_faqCategory.ID = field.NewInt32(tableName, "id")
	_faqCategory.ParentID = field.NewInt32(tableName, "parent_id")
	_faqCategory.Name = field.NewString(tableName, "name")
	_faqCategory.Comments = field.NewString(tableName, "comments")
	_faqCategory.ValidID = field.NewInt32(tableName, "valid_id")
	_faqCategory.Created = field.NewTime(tableName, "created")
	_faqCategory.CreatedBy = field.NewInt32(tableName, "created_by")
	_faqCategory.Changed = field.NewTime(tableName, "changed")
	_faqCategory.ChangedBy = field.NewInt32(tableName, "changed_by")

	_faqCategory.fillFieldMap()

	return _faqCategory
}

type faqCategory struct {
	faqCategoryDo

	ALL       field.Asterisk
	ID        field.Int32
	ParentID  field.Int32
	Name      field.String
	Comments  field.String
	ValidID   field.Int32
	Created   field.Time
	CreatedBy field.Int32
	Changed   field.Time
	ChangedBy field.Int32

	fieldMap map[string]field.Expr
}

func (f faqCategory) Table(newTableName string) *faqCategory {
	f.faqCategoryDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f faqCategory) As(alias string) *faqCategory {
	f.faqCategoryDo.DO = *(f.faqCategoryDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *faqCategory) updateTableName(table string) *faqCategory {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt32(table, "id")
	f.ParentID = field.NewInt32(table, "parent_id")
	f.Name = field.NewString(table, "name")
	f.Comments = field.NewString(table, "comments")
	f.ValidID = field.NewInt32(table, "valid_id")
	f.Created = field.NewTime(table, "created")
	f.CreatedBy = field.NewInt32(table, "created_by")
	f.Changed = field.NewTime(table, "changed")
	f.ChangedBy = field.NewInt32(table, "changed_by")

	f.fillFieldMap()

	return f
}

func (f *faqCategory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *faqCategory) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 9)
	f.fieldMap["id"] = f.ID
	f.fieldMap["parent_id"] = f.ParentID
	f.fieldMap["name"] = f.Name
	f.fieldMap["comments"] = f.Comments
	f.fieldMap["valid_id"] = f.ValidID
	f.fieldMap["created"] = f.Created
	f.fieldMap["created_by"] = f.CreatedBy
	f.fieldMap["changed"] = f.Changed
	f.fieldMap["changed_by"] = f.ChangedBy
}

func (f faqCategory) clone(db *gorm.DB) faqCategory {
	f.faqCategoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f faqCategory) replaceDB(db *gorm.DB) faqCategory {
	f.faqCategoryDo.ReplaceDB(db)
	return f
}

type faqCategoryDo struct{ gen.DO }

type IFaqCategoryDo interface {
	gen.SubQuery
	Debug() IFaqCategoryDo
	WithContext(ctx context.Context) IFaqCategoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFaqCategoryDo
	WriteDB() IFaqCategoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFaqCategoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFaqCategoryDo
	Not(conds ...gen.Condition) IFaqCategoryDo
	Or(conds ...gen.Condition) IFaqCategoryDo
	Select(conds ...field.Expr) IFaqCategoryDo
	Where(conds ...gen.Condition) IFaqCategoryDo
	Order(conds ...field.Expr) IFaqCategoryDo
	Distinct(cols ...field.Expr) IFaqCategoryDo
	Omit(cols ...field.Expr) IFaqCategoryDo
	Join(table schema.Tabler, on ...field.Expr) IFaqCategoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFaqCategoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFaqCategoryDo
	Group(cols ...field.Expr) IFaqCategoryDo
	Having(conds ...gen.Condition) IFaqCategoryDo
	Limit(limit int) IFaqCategoryDo
	Offset(offset int) IFaqCategoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFaqCategoryDo
	Unscoped() IFaqCategoryDo
	Create(values ...*model.FaqCategory) error
	CreateInBatches(values []*model.FaqCategory, batchSize int) error
	Save(values ...*model.FaqCategory) error
	First() (*model.FaqCategory, error)
	Take() (*model.FaqCategory, error)
	Last() (*model.FaqCategory, error)
	Find() ([]*model.FaqCategory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FaqCategory, err error)
	FindInBatches(result *[]*model.FaqCategory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FaqCategory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFaqCategoryDo
	Assign(attrs ...field.AssignExpr) IFaqCategoryDo
	Joins(fields ...field.RelationField) IFaqCategoryDo
	Preload(fields ...field.RelationField) IFaqCategoryDo
	FirstOrInit() (*model.FaqCategory, error)
	FirstOrCreate() (*model.FaqCategory, error)
	FindByPage(offset int, limit int) (result []*model.FaqCategory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFaqCategoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f faqCategoryDo) Debug() IFaqCategoryDo {
	return f.withDO(f.DO.Debug())
}

func (f faqCategoryDo) WithContext(ctx context.Context) IFaqCategoryDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f faqCategoryDo) ReadDB() IFaqCategoryDo {
	return f.Clauses(dbresolver.Read)
}

func (f faqCategoryDo) WriteDB() IFaqCategoryDo {
	return f.Clauses(dbresolver.Write)
}

func (f faqCategoryDo) Session(config *gorm.Session) IFaqCategoryDo {
	return f.withDO(f.DO.Session(config))
}

func (f faqCategoryDo) Clauses(conds ...clause.Expression) IFaqCategoryDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f faqCategoryDo) Returning(value interface{}, columns ...string) IFaqCategoryDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f faqCategoryDo) Not(conds ...gen.Condition) IFaqCategoryDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f faqCategoryDo) Or(conds ...gen.Condition) IFaqCategoryDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f faqCategoryDo) Select(conds ...field.Expr) IFaqCategoryDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f faqCategoryDo) Where(conds ...gen.Condition) IFaqCategoryDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f faqCategoryDo) Order(conds ...field.Expr) IFaqCategoryDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f faqCategoryDo) Distinct(cols ...field.Expr) IFaqCategoryDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f faqCategoryDo) Omit(cols ...field.Expr) IFaqCategoryDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f faqCategoryDo) Join(table schema.Tabler, on ...field.Expr) IFaqCategoryDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f faqCategoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFaqCategoryDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f faqCategoryDo) RightJoin(table schema.Tabler, on ...field.Expr) IFaqCategoryDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f faqCategoryDo) Group(cols ...field.Expr) IFaqCategoryDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f faqCategoryDo) Having(conds ...gen.Condition) IFaqCategoryDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f faqCategoryDo) Limit(limit int) IFaqCategoryDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f faqCategoryDo) Offset(offset int) IFaqCategoryDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f faqCategoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFaqCategoryDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f faqCategoryDo) Unscoped() IFaqCategoryDo {
	return f.withDO(f.DO.Unscoped())
}

func (f faqCategoryDo) Create(values ...*model.FaqCategory) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f faqCategoryDo) CreateInBatches(values []*model.FaqCategory, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f faqCategoryDo) Save(values ...*model.FaqCategory) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f faqCategoryDo) First() (*model.FaqCategory, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqCategory), nil
	}
}

func (f faqCategoryDo) Take() (*model.FaqCategory, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqCategory), nil
	}
}

func (f faqCategoryDo) Last() (*model.FaqCategory, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqCategory), nil
	}
}

func (f faqCategoryDo) Find() ([]*model.FaqCategory, error) {
	result, err := f.DO.Find()
	return result.([]*model.FaqCategory), err
}

func (f faqCategoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FaqCategory, err error) {
	buf := make([]*model.FaqCategory, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f faqCategoryDo) FindInBatches(result *[]*model.FaqCategory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f faqCategoryDo) Attrs(attrs ...field.AssignExpr) IFaqCategoryDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f faqCategoryDo) Assign(attrs ...field.AssignExpr) IFaqCategoryDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f faqCategoryDo) Joins(fields ...field.RelationField) IFaqCategoryDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f faqCategoryDo) Preload(fields ...field.RelationField) IFaqCategoryDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f faqCategoryDo) FirstOrInit() (*model.FaqCategory, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqCategory), nil
	}
}

func (f faqCategoryDo) FirstOrCreate() (*model.FaqCategory, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqCategory), nil
	}
}

func (f faqCategoryDo) FindByPage(offset int, limit int) (result []*model.FaqCategory, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f faqCategoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f faqCategoryDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f faqCategoryDo) Delete(models ...*model.FaqCategory) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *faqCategoryDo) withDO(do gen.Dao) *faqCategoryDo {
	f.DO = *do.(*gen.DO)
	return f
}
