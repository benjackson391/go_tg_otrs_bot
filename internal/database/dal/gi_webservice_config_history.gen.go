// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newGiWebserviceConfigHistory(db *gorm.DB, opts ...gen.DOOption) giWebserviceConfigHistory {
	_giWebserviceConfigHistory := giWebserviceConfigHistory{}

	_giWebserviceConfigHistory.giWebserviceConfigHistoryDo.UseDB(db, opts...)
	_giWebserviceConfigHistory.giWebserviceConfigHistoryDo.UseModel(&model.GiWebserviceConfigHistory{})

	tableName := _giWebserviceConfigHistory.giWebserviceConfigHistoryDo.TableName()
	_giWebserviceConfigHistory.ALL = field.NewAsterisk(tableName)
	_giWebserviceConfigHistory.ID = field.NewInt64(tableName, "id")
	_giWebserviceConfigHistory.ConfigID = field.NewInt32(tableName, "config_id")
	_giWebserviceConfigHistory.Config = field.NewBytes(tableName, "config")
	_giWebserviceConfigHistory.ConfigMd5 = field.NewString(tableName, "config_md5")
	_giWebserviceConfigHistory.CreateTime = field.NewTime(tableName, "create_time")
	_giWebserviceConfigHistory.CreateBy = field.NewInt32(tableName, "create_by")
	_giWebserviceConfigHistory.ChangeTime = field.NewTime(tableName, "change_time")
	_giWebserviceConfigHistory.ChangeBy = field.NewInt32(tableName, "change_by")

	_giWebserviceConfigHistory.fillFieldMap()

	return _giWebserviceConfigHistory
}

type giWebserviceConfigHistory struct {
	giWebserviceConfigHistoryDo

	ALL        field.Asterisk
	ID         field.Int64
	ConfigID   field.Int32
	Config     field.Bytes
	ConfigMd5  field.String
	CreateTime field.Time
	CreateBy   field.Int32
	ChangeTime field.Time
	ChangeBy   field.Int32

	fieldMap map[string]field.Expr
}

func (g giWebserviceConfigHistory) Table(newTableName string) *giWebserviceConfigHistory {
	g.giWebserviceConfigHistoryDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g giWebserviceConfigHistory) As(alias string) *giWebserviceConfigHistory {
	g.giWebserviceConfigHistoryDo.DO = *(g.giWebserviceConfigHistoryDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *giWebserviceConfigHistory) updateTableName(table string) *giWebserviceConfigHistory {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.ConfigID = field.NewInt32(table, "config_id")
	g.Config = field.NewBytes(table, "config")
	g.ConfigMd5 = field.NewString(table, "config_md5")
	g.CreateTime = field.NewTime(table, "create_time")
	g.CreateBy = field.NewInt32(table, "create_by")
	g.ChangeTime = field.NewTime(table, "change_time")
	g.ChangeBy = field.NewInt32(table, "change_by")

	g.fillFieldMap()

	return g
}

func (g *giWebserviceConfigHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *giWebserviceConfigHistory) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 8)
	g.fieldMap["id"] = g.ID
	g.fieldMap["config_id"] = g.ConfigID
	g.fieldMap["config"] = g.Config
	g.fieldMap["config_md5"] = g.ConfigMd5
	g.fieldMap["create_time"] = g.CreateTime
	g.fieldMap["create_by"] = g.CreateBy
	g.fieldMap["change_time"] = g.ChangeTime
	g.fieldMap["change_by"] = g.ChangeBy
}

func (g giWebserviceConfigHistory) clone(db *gorm.DB) giWebserviceConfigHistory {
	g.giWebserviceConfigHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g giWebserviceConfigHistory) replaceDB(db *gorm.DB) giWebserviceConfigHistory {
	g.giWebserviceConfigHistoryDo.ReplaceDB(db)
	return g
}

type giWebserviceConfigHistoryDo struct{ gen.DO }

type IGiWebserviceConfigHistoryDo interface {
	gen.SubQuery
	Debug() IGiWebserviceConfigHistoryDo
	WithContext(ctx context.Context) IGiWebserviceConfigHistoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGiWebserviceConfigHistoryDo
	WriteDB() IGiWebserviceConfigHistoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGiWebserviceConfigHistoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGiWebserviceConfigHistoryDo
	Not(conds ...gen.Condition) IGiWebserviceConfigHistoryDo
	Or(conds ...gen.Condition) IGiWebserviceConfigHistoryDo
	Select(conds ...field.Expr) IGiWebserviceConfigHistoryDo
	Where(conds ...gen.Condition) IGiWebserviceConfigHistoryDo
	Order(conds ...field.Expr) IGiWebserviceConfigHistoryDo
	Distinct(cols ...field.Expr) IGiWebserviceConfigHistoryDo
	Omit(cols ...field.Expr) IGiWebserviceConfigHistoryDo
	Join(table schema.Tabler, on ...field.Expr) IGiWebserviceConfigHistoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGiWebserviceConfigHistoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGiWebserviceConfigHistoryDo
	Group(cols ...field.Expr) IGiWebserviceConfigHistoryDo
	Having(conds ...gen.Condition) IGiWebserviceConfigHistoryDo
	Limit(limit int) IGiWebserviceConfigHistoryDo
	Offset(offset int) IGiWebserviceConfigHistoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGiWebserviceConfigHistoryDo
	Unscoped() IGiWebserviceConfigHistoryDo
	Create(values ...*model.GiWebserviceConfigHistory) error
	CreateInBatches(values []*model.GiWebserviceConfigHistory, batchSize int) error
	Save(values ...*model.GiWebserviceConfigHistory) error
	First() (*model.GiWebserviceConfigHistory, error)
	Take() (*model.GiWebserviceConfigHistory, error)
	Last() (*model.GiWebserviceConfigHistory, error)
	Find() ([]*model.GiWebserviceConfigHistory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GiWebserviceConfigHistory, err error)
	FindInBatches(result *[]*model.GiWebserviceConfigHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GiWebserviceConfigHistory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGiWebserviceConfigHistoryDo
	Assign(attrs ...field.AssignExpr) IGiWebserviceConfigHistoryDo
	Joins(fields ...field.RelationField) IGiWebserviceConfigHistoryDo
	Preload(fields ...field.RelationField) IGiWebserviceConfigHistoryDo
	FirstOrInit() (*model.GiWebserviceConfigHistory, error)
	FirstOrCreate() (*model.GiWebserviceConfigHistory, error)
	FindByPage(offset int, limit int) (result []*model.GiWebserviceConfigHistory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGiWebserviceConfigHistoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g giWebserviceConfigHistoryDo) Debug() IGiWebserviceConfigHistoryDo {
	return g.withDO(g.DO.Debug())
}

func (g giWebserviceConfigHistoryDo) WithContext(ctx context.Context) IGiWebserviceConfigHistoryDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g giWebserviceConfigHistoryDo) ReadDB() IGiWebserviceConfigHistoryDo {
	return g.Clauses(dbresolver.Read)
}

func (g giWebserviceConfigHistoryDo) WriteDB() IGiWebserviceConfigHistoryDo {
	return g.Clauses(dbresolver.Write)
}

func (g giWebserviceConfigHistoryDo) Session(config *gorm.Session) IGiWebserviceConfigHistoryDo {
	return g.withDO(g.DO.Session(config))
}

func (g giWebserviceConfigHistoryDo) Clauses(conds ...clause.Expression) IGiWebserviceConfigHistoryDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g giWebserviceConfigHistoryDo) Returning(value interface{}, columns ...string) IGiWebserviceConfigHistoryDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g giWebserviceConfigHistoryDo) Not(conds ...gen.Condition) IGiWebserviceConfigHistoryDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g giWebserviceConfigHistoryDo) Or(conds ...gen.Condition) IGiWebserviceConfigHistoryDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g giWebserviceConfigHistoryDo) Select(conds ...field.Expr) IGiWebserviceConfigHistoryDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g giWebserviceConfigHistoryDo) Where(conds ...gen.Condition) IGiWebserviceConfigHistoryDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g giWebserviceConfigHistoryDo) Order(conds ...field.Expr) IGiWebserviceConfigHistoryDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g giWebserviceConfigHistoryDo) Distinct(cols ...field.Expr) IGiWebserviceConfigHistoryDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g giWebserviceConfigHistoryDo) Omit(cols ...field.Expr) IGiWebserviceConfigHistoryDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g giWebserviceConfigHistoryDo) Join(table schema.Tabler, on ...field.Expr) IGiWebserviceConfigHistoryDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g giWebserviceConfigHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGiWebserviceConfigHistoryDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g giWebserviceConfigHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) IGiWebserviceConfigHistoryDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g giWebserviceConfigHistoryDo) Group(cols ...field.Expr) IGiWebserviceConfigHistoryDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g giWebserviceConfigHistoryDo) Having(conds ...gen.Condition) IGiWebserviceConfigHistoryDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g giWebserviceConfigHistoryDo) Limit(limit int) IGiWebserviceConfigHistoryDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g giWebserviceConfigHistoryDo) Offset(offset int) IGiWebserviceConfigHistoryDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g giWebserviceConfigHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGiWebserviceConfigHistoryDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g giWebserviceConfigHistoryDo) Unscoped() IGiWebserviceConfigHistoryDo {
	return g.withDO(g.DO.Unscoped())
}

func (g giWebserviceConfigHistoryDo) Create(values ...*model.GiWebserviceConfigHistory) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g giWebserviceConfigHistoryDo) CreateInBatches(values []*model.GiWebserviceConfigHistory, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g giWebserviceConfigHistoryDo) Save(values ...*model.GiWebserviceConfigHistory) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g giWebserviceConfigHistoryDo) First() (*model.GiWebserviceConfigHistory, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GiWebserviceConfigHistory), nil
	}
}

func (g giWebserviceConfigHistoryDo) Take() (*model.GiWebserviceConfigHistory, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GiWebserviceConfigHistory), nil
	}
}

func (g giWebserviceConfigHistoryDo) Last() (*model.GiWebserviceConfigHistory, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GiWebserviceConfigHistory), nil
	}
}

func (g giWebserviceConfigHistoryDo) Find() ([]*model.GiWebserviceConfigHistory, error) {
	result, err := g.DO.Find()
	return result.([]*model.GiWebserviceConfigHistory), err
}

func (g giWebserviceConfigHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GiWebserviceConfigHistory, err error) {
	buf := make([]*model.GiWebserviceConfigHistory, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g giWebserviceConfigHistoryDo) FindInBatches(result *[]*model.GiWebserviceConfigHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g giWebserviceConfigHistoryDo) Attrs(attrs ...field.AssignExpr) IGiWebserviceConfigHistoryDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g giWebserviceConfigHistoryDo) Assign(attrs ...field.AssignExpr) IGiWebserviceConfigHistoryDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g giWebserviceConfigHistoryDo) Joins(fields ...field.RelationField) IGiWebserviceConfigHistoryDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g giWebserviceConfigHistoryDo) Preload(fields ...field.RelationField) IGiWebserviceConfigHistoryDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g giWebserviceConfigHistoryDo) FirstOrInit() (*model.GiWebserviceConfigHistory, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GiWebserviceConfigHistory), nil
	}
}

func (g giWebserviceConfigHistoryDo) FirstOrCreate() (*model.GiWebserviceConfigHistory, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GiWebserviceConfigHistory), nil
	}
}

func (g giWebserviceConfigHistoryDo) FindByPage(offset int, limit int) (result []*model.GiWebserviceConfigHistory, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g giWebserviceConfigHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g giWebserviceConfigHistoryDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g giWebserviceConfigHistoryDo) Delete(models ...*model.GiWebserviceConfigHistory) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *giWebserviceConfigHistoryDo) withDO(do gen.Dao) *giWebserviceConfigHistoryDo {
	g.DO = *do.(*gen.DO)
	return g
}
