// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newQueuePreference(db *gorm.DB, opts ...gen.DOOption) queuePreference {
	_queuePreference := queuePreference{}

	_queuePreference.queuePreferenceDo.UseDB(db, opts...)
	_queuePreference.queuePreferenceDo.UseModel(&model.QueuePreference{})

	tableName := _queuePreference.queuePreferenceDo.TableName()
	_queuePreference.ALL = field.NewAsterisk(tableName)
	_queuePreference.QueueID = field.NewInt32(tableName, "queue_id")
	_queuePreference.PreferencesKey = field.NewString(tableName, "preferences_key")
	_queuePreference.PreferencesValue = field.NewString(tableName, "preferences_value")

	_queuePreference.fillFieldMap()

	return _queuePreference
}

type queuePreference struct {
	queuePreferenceDo

	ALL              field.Asterisk
	QueueID          field.Int32
	PreferencesKey   field.String
	PreferencesValue field.String

	fieldMap map[string]field.Expr
}

func (q queuePreference) Table(newTableName string) *queuePreference {
	q.queuePreferenceDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q queuePreference) As(alias string) *queuePreference {
	q.queuePreferenceDo.DO = *(q.queuePreferenceDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *queuePreference) updateTableName(table string) *queuePreference {
	q.ALL = field.NewAsterisk(table)
	q.QueueID = field.NewInt32(table, "queue_id")
	q.PreferencesKey = field.NewString(table, "preferences_key")
	q.PreferencesValue = field.NewString(table, "preferences_value")

	q.fillFieldMap()

	return q
}

func (q *queuePreference) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *queuePreference) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 3)
	q.fieldMap["queue_id"] = q.QueueID
	q.fieldMap["preferences_key"] = q.PreferencesKey
	q.fieldMap["preferences_value"] = q.PreferencesValue
}

func (q queuePreference) clone(db *gorm.DB) queuePreference {
	q.queuePreferenceDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q queuePreference) replaceDB(db *gorm.DB) queuePreference {
	q.queuePreferenceDo.ReplaceDB(db)
	return q
}

type queuePreferenceDo struct{ gen.DO }

type IQueuePreferenceDo interface {
	gen.SubQuery
	Debug() IQueuePreferenceDo
	WithContext(ctx context.Context) IQueuePreferenceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQueuePreferenceDo
	WriteDB() IQueuePreferenceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQueuePreferenceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQueuePreferenceDo
	Not(conds ...gen.Condition) IQueuePreferenceDo
	Or(conds ...gen.Condition) IQueuePreferenceDo
	Select(conds ...field.Expr) IQueuePreferenceDo
	Where(conds ...gen.Condition) IQueuePreferenceDo
	Order(conds ...field.Expr) IQueuePreferenceDo
	Distinct(cols ...field.Expr) IQueuePreferenceDo
	Omit(cols ...field.Expr) IQueuePreferenceDo
	Join(table schema.Tabler, on ...field.Expr) IQueuePreferenceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQueuePreferenceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQueuePreferenceDo
	Group(cols ...field.Expr) IQueuePreferenceDo
	Having(conds ...gen.Condition) IQueuePreferenceDo
	Limit(limit int) IQueuePreferenceDo
	Offset(offset int) IQueuePreferenceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQueuePreferenceDo
	Unscoped() IQueuePreferenceDo
	Create(values ...*model.QueuePreference) error
	CreateInBatches(values []*model.QueuePreference, batchSize int) error
	Save(values ...*model.QueuePreference) error
	First() (*model.QueuePreference, error)
	Take() (*model.QueuePreference, error)
	Last() (*model.QueuePreference, error)
	Find() ([]*model.QueuePreference, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QueuePreference, err error)
	FindInBatches(result *[]*model.QueuePreference, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QueuePreference) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQueuePreferenceDo
	Assign(attrs ...field.AssignExpr) IQueuePreferenceDo
	Joins(fields ...field.RelationField) IQueuePreferenceDo
	Preload(fields ...field.RelationField) IQueuePreferenceDo
	FirstOrInit() (*model.QueuePreference, error)
	FirstOrCreate() (*model.QueuePreference, error)
	FindByPage(offset int, limit int) (result []*model.QueuePreference, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQueuePreferenceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q queuePreferenceDo) Debug() IQueuePreferenceDo {
	return q.withDO(q.DO.Debug())
}

func (q queuePreferenceDo) WithContext(ctx context.Context) IQueuePreferenceDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q queuePreferenceDo) ReadDB() IQueuePreferenceDo {
	return q.Clauses(dbresolver.Read)
}

func (q queuePreferenceDo) WriteDB() IQueuePreferenceDo {
	return q.Clauses(dbresolver.Write)
}

func (q queuePreferenceDo) Session(config *gorm.Session) IQueuePreferenceDo {
	return q.withDO(q.DO.Session(config))
}

func (q queuePreferenceDo) Clauses(conds ...clause.Expression) IQueuePreferenceDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q queuePreferenceDo) Returning(value interface{}, columns ...string) IQueuePreferenceDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q queuePreferenceDo) Not(conds ...gen.Condition) IQueuePreferenceDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q queuePreferenceDo) Or(conds ...gen.Condition) IQueuePreferenceDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q queuePreferenceDo) Select(conds ...field.Expr) IQueuePreferenceDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q queuePreferenceDo) Where(conds ...gen.Condition) IQueuePreferenceDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q queuePreferenceDo) Order(conds ...field.Expr) IQueuePreferenceDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q queuePreferenceDo) Distinct(cols ...field.Expr) IQueuePreferenceDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q queuePreferenceDo) Omit(cols ...field.Expr) IQueuePreferenceDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q queuePreferenceDo) Join(table schema.Tabler, on ...field.Expr) IQueuePreferenceDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q queuePreferenceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQueuePreferenceDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q queuePreferenceDo) RightJoin(table schema.Tabler, on ...field.Expr) IQueuePreferenceDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q queuePreferenceDo) Group(cols ...field.Expr) IQueuePreferenceDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q queuePreferenceDo) Having(conds ...gen.Condition) IQueuePreferenceDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q queuePreferenceDo) Limit(limit int) IQueuePreferenceDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q queuePreferenceDo) Offset(offset int) IQueuePreferenceDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q queuePreferenceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQueuePreferenceDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q queuePreferenceDo) Unscoped() IQueuePreferenceDo {
	return q.withDO(q.DO.Unscoped())
}

func (q queuePreferenceDo) Create(values ...*model.QueuePreference) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q queuePreferenceDo) CreateInBatches(values []*model.QueuePreference, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q queuePreferenceDo) Save(values ...*model.QueuePreference) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q queuePreferenceDo) First() (*model.QueuePreference, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QueuePreference), nil
	}
}

func (q queuePreferenceDo) Take() (*model.QueuePreference, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QueuePreference), nil
	}
}

func (q queuePreferenceDo) Last() (*model.QueuePreference, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QueuePreference), nil
	}
}

func (q queuePreferenceDo) Find() ([]*model.QueuePreference, error) {
	result, err := q.DO.Find()
	return result.([]*model.QueuePreference), err
}

func (q queuePreferenceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QueuePreference, err error) {
	buf := make([]*model.QueuePreference, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q queuePreferenceDo) FindInBatches(result *[]*model.QueuePreference, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q queuePreferenceDo) Attrs(attrs ...field.AssignExpr) IQueuePreferenceDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q queuePreferenceDo) Assign(attrs ...field.AssignExpr) IQueuePreferenceDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q queuePreferenceDo) Joins(fields ...field.RelationField) IQueuePreferenceDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q queuePreferenceDo) Preload(fields ...field.RelationField) IQueuePreferenceDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q queuePreferenceDo) FirstOrInit() (*model.QueuePreference, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QueuePreference), nil
	}
}

func (q queuePreferenceDo) FirstOrCreate() (*model.QueuePreference, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QueuePreference), nil
	}
}

func (q queuePreferenceDo) FindByPage(offset int, limit int) (result []*model.QueuePreference, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q queuePreferenceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q queuePreferenceDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q queuePreferenceDo) Delete(models ...*model.QueuePreference) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *queuePreferenceDo) withDO(do gen.Dao) *queuePreferenceDo {
	q.DO = *do.(*gen.DO)
	return q
}
