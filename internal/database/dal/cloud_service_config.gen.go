// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newCloudServiceConfig(db *gorm.DB, opts ...gen.DOOption) cloudServiceConfig {
	_cloudServiceConfig := cloudServiceConfig{}

	_cloudServiceConfig.cloudServiceConfigDo.UseDB(db, opts...)
	_cloudServiceConfig.cloudServiceConfigDo.UseModel(&model.CloudServiceConfig{})

	tableName := _cloudServiceConfig.cloudServiceConfigDo.TableName()
	_cloudServiceConfig.ALL = field.NewAsterisk(tableName)
	_cloudServiceConfig.ID = field.NewInt32(tableName, "id")
	_cloudServiceConfig.Name = field.NewString(tableName, "name")
	_cloudServiceConfig.Config = field.NewBytes(tableName, "config")
	_cloudServiceConfig.ValidID = field.NewInt32(tableName, "valid_id")
	_cloudServiceConfig.CreateTime = field.NewTime(tableName, "create_time")
	_cloudServiceConfig.CreateBy = field.NewInt32(tableName, "create_by")
	_cloudServiceConfig.ChangeTime = field.NewTime(tableName, "change_time")
	_cloudServiceConfig.ChangeBy = field.NewInt32(tableName, "change_by")

	_cloudServiceConfig.fillFieldMap()

	return _cloudServiceConfig
}

type cloudServiceConfig struct {
	cloudServiceConfigDo

	ALL        field.Asterisk
	ID         field.Int32
	Name       field.String
	Config     field.Bytes
	ValidID    field.Int32
	CreateTime field.Time
	CreateBy   field.Int32
	ChangeTime field.Time
	ChangeBy   field.Int32

	fieldMap map[string]field.Expr
}

func (c cloudServiceConfig) Table(newTableName string) *cloudServiceConfig {
	c.cloudServiceConfigDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cloudServiceConfig) As(alias string) *cloudServiceConfig {
	c.cloudServiceConfigDo.DO = *(c.cloudServiceConfigDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cloudServiceConfig) updateTableName(table string) *cloudServiceConfig {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.Name = field.NewString(table, "name")
	c.Config = field.NewBytes(table, "config")
	c.ValidID = field.NewInt32(table, "valid_id")
	c.CreateTime = field.NewTime(table, "create_time")
	c.CreateBy = field.NewInt32(table, "create_by")
	c.ChangeTime = field.NewTime(table, "change_time")
	c.ChangeBy = field.NewInt32(table, "change_by")

	c.fillFieldMap()

	return c
}

func (c *cloudServiceConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cloudServiceConfig) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 8)
	c.fieldMap["id"] = c.ID
	c.fieldMap["name"] = c.Name
	c.fieldMap["config"] = c.Config
	c.fieldMap["valid_id"] = c.ValidID
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["create_by"] = c.CreateBy
	c.fieldMap["change_time"] = c.ChangeTime
	c.fieldMap["change_by"] = c.ChangeBy
}

func (c cloudServiceConfig) clone(db *gorm.DB) cloudServiceConfig {
	c.cloudServiceConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cloudServiceConfig) replaceDB(db *gorm.DB) cloudServiceConfig {
	c.cloudServiceConfigDo.ReplaceDB(db)
	return c
}

type cloudServiceConfigDo struct{ gen.DO }

type ICloudServiceConfigDo interface {
	gen.SubQuery
	Debug() ICloudServiceConfigDo
	WithContext(ctx context.Context) ICloudServiceConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICloudServiceConfigDo
	WriteDB() ICloudServiceConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICloudServiceConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICloudServiceConfigDo
	Not(conds ...gen.Condition) ICloudServiceConfigDo
	Or(conds ...gen.Condition) ICloudServiceConfigDo
	Select(conds ...field.Expr) ICloudServiceConfigDo
	Where(conds ...gen.Condition) ICloudServiceConfigDo
	Order(conds ...field.Expr) ICloudServiceConfigDo
	Distinct(cols ...field.Expr) ICloudServiceConfigDo
	Omit(cols ...field.Expr) ICloudServiceConfigDo
	Join(table schema.Tabler, on ...field.Expr) ICloudServiceConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICloudServiceConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICloudServiceConfigDo
	Group(cols ...field.Expr) ICloudServiceConfigDo
	Having(conds ...gen.Condition) ICloudServiceConfigDo
	Limit(limit int) ICloudServiceConfigDo
	Offset(offset int) ICloudServiceConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICloudServiceConfigDo
	Unscoped() ICloudServiceConfigDo
	Create(values ...*model.CloudServiceConfig) error
	CreateInBatches(values []*model.CloudServiceConfig, batchSize int) error
	Save(values ...*model.CloudServiceConfig) error
	First() (*model.CloudServiceConfig, error)
	Take() (*model.CloudServiceConfig, error)
	Last() (*model.CloudServiceConfig, error)
	Find() ([]*model.CloudServiceConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CloudServiceConfig, err error)
	FindInBatches(result *[]*model.CloudServiceConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CloudServiceConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICloudServiceConfigDo
	Assign(attrs ...field.AssignExpr) ICloudServiceConfigDo
	Joins(fields ...field.RelationField) ICloudServiceConfigDo
	Preload(fields ...field.RelationField) ICloudServiceConfigDo
	FirstOrInit() (*model.CloudServiceConfig, error)
	FirstOrCreate() (*model.CloudServiceConfig, error)
	FindByPage(offset int, limit int) (result []*model.CloudServiceConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICloudServiceConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cloudServiceConfigDo) Debug() ICloudServiceConfigDo {
	return c.withDO(c.DO.Debug())
}

func (c cloudServiceConfigDo) WithContext(ctx context.Context) ICloudServiceConfigDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cloudServiceConfigDo) ReadDB() ICloudServiceConfigDo {
	return c.Clauses(dbresolver.Read)
}

func (c cloudServiceConfigDo) WriteDB() ICloudServiceConfigDo {
	return c.Clauses(dbresolver.Write)
}

func (c cloudServiceConfigDo) Session(config *gorm.Session) ICloudServiceConfigDo {
	return c.withDO(c.DO.Session(config))
}

func (c cloudServiceConfigDo) Clauses(conds ...clause.Expression) ICloudServiceConfigDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cloudServiceConfigDo) Returning(value interface{}, columns ...string) ICloudServiceConfigDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cloudServiceConfigDo) Not(conds ...gen.Condition) ICloudServiceConfigDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cloudServiceConfigDo) Or(conds ...gen.Condition) ICloudServiceConfigDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cloudServiceConfigDo) Select(conds ...field.Expr) ICloudServiceConfigDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cloudServiceConfigDo) Where(conds ...gen.Condition) ICloudServiceConfigDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cloudServiceConfigDo) Order(conds ...field.Expr) ICloudServiceConfigDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cloudServiceConfigDo) Distinct(cols ...field.Expr) ICloudServiceConfigDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cloudServiceConfigDo) Omit(cols ...field.Expr) ICloudServiceConfigDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cloudServiceConfigDo) Join(table schema.Tabler, on ...field.Expr) ICloudServiceConfigDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cloudServiceConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICloudServiceConfigDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cloudServiceConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) ICloudServiceConfigDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cloudServiceConfigDo) Group(cols ...field.Expr) ICloudServiceConfigDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cloudServiceConfigDo) Having(conds ...gen.Condition) ICloudServiceConfigDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cloudServiceConfigDo) Limit(limit int) ICloudServiceConfigDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cloudServiceConfigDo) Offset(offset int) ICloudServiceConfigDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cloudServiceConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICloudServiceConfigDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cloudServiceConfigDo) Unscoped() ICloudServiceConfigDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cloudServiceConfigDo) Create(values ...*model.CloudServiceConfig) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cloudServiceConfigDo) CreateInBatches(values []*model.CloudServiceConfig, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cloudServiceConfigDo) Save(values ...*model.CloudServiceConfig) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cloudServiceConfigDo) First() (*model.CloudServiceConfig, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CloudServiceConfig), nil
	}
}

func (c cloudServiceConfigDo) Take() (*model.CloudServiceConfig, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CloudServiceConfig), nil
	}
}

func (c cloudServiceConfigDo) Last() (*model.CloudServiceConfig, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CloudServiceConfig), nil
	}
}

func (c cloudServiceConfigDo) Find() ([]*model.CloudServiceConfig, error) {
	result, err := c.DO.Find()
	return result.([]*model.CloudServiceConfig), err
}

func (c cloudServiceConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CloudServiceConfig, err error) {
	buf := make([]*model.CloudServiceConfig, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cloudServiceConfigDo) FindInBatches(result *[]*model.CloudServiceConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cloudServiceConfigDo) Attrs(attrs ...field.AssignExpr) ICloudServiceConfigDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cloudServiceConfigDo) Assign(attrs ...field.AssignExpr) ICloudServiceConfigDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cloudServiceConfigDo) Joins(fields ...field.RelationField) ICloudServiceConfigDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cloudServiceConfigDo) Preload(fields ...field.RelationField) ICloudServiceConfigDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cloudServiceConfigDo) FirstOrInit() (*model.CloudServiceConfig, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CloudServiceConfig), nil
	}
}

func (c cloudServiceConfigDo) FirstOrCreate() (*model.CloudServiceConfig, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CloudServiceConfig), nil
	}
}

func (c cloudServiceConfigDo) FindByPage(offset int, limit int) (result []*model.CloudServiceConfig, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cloudServiceConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cloudServiceConfigDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cloudServiceConfigDo) Delete(models ...*model.CloudServiceConfig) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cloudServiceConfigDo) withDO(do gen.Dao) *cloudServiceConfigDo {
	c.DO = *do.(*gen.DO)
	return c
}
