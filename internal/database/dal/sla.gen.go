// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newSLA(db *gorm.DB, opts ...gen.DOOption) sLA {
	_sLA := sLA{}

	_sLA.sLADo.UseDB(db, opts...)
	_sLA.sLADo.UseModel(&model.SLA{})

	tableName := _sLA.sLADo.TableName()
	_sLA.ALL = field.NewAsterisk(tableName)
	_sLA.ID = field.NewInt32(tableName, "id")
	_sLA.Name = field.NewString(tableName, "name")
	_sLA.CalendarName = field.NewString(tableName, "calendar_name")
	_sLA.FirstResponseTime = field.NewInt32(tableName, "first_response_time")
	_sLA.FirstResponseNotify = field.NewInt32(tableName, "first_response_notify")
	_sLA.UpdateTime = field.NewInt32(tableName, "update_time")
	_sLA.UpdateNotify = field.NewInt32(tableName, "update_notify")
	_sLA.SolutionTime = field.NewInt32(tableName, "solution_time")
	_sLA.SolutionNotify = field.NewInt32(tableName, "solution_notify")
	_sLA.ValidID = field.NewInt32(tableName, "valid_id")
	_sLA.Comments = field.NewString(tableName, "comments")
	_sLA.CreateTime = field.NewTime(tableName, "create_time")
	_sLA.CreateBy = field.NewInt32(tableName, "create_by")
	_sLA.ChangeTime = field.NewTime(tableName, "change_time")
	_sLA.ChangeBy = field.NewInt32(tableName, "change_by")

	_sLA.fillFieldMap()

	return _sLA
}

type sLA struct {
	sLADo

	ALL                 field.Asterisk
	ID                  field.Int32
	Name                field.String
	CalendarName        field.String
	FirstResponseTime   field.Int32
	FirstResponseNotify field.Int32
	UpdateTime          field.Int32
	UpdateNotify        field.Int32
	SolutionTime        field.Int32
	SolutionNotify      field.Int32
	ValidID             field.Int32
	Comments            field.String
	CreateTime          field.Time
	CreateBy            field.Int32
	ChangeTime          field.Time
	ChangeBy            field.Int32

	fieldMap map[string]field.Expr
}

func (s sLA) Table(newTableName string) *sLA {
	s.sLADo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sLA) As(alias string) *sLA {
	s.sLADo.DO = *(s.sLADo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sLA) updateTableName(table string) *sLA {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.Name = field.NewString(table, "name")
	s.CalendarName = field.NewString(table, "calendar_name")
	s.FirstResponseTime = field.NewInt32(table, "first_response_time")
	s.FirstResponseNotify = field.NewInt32(table, "first_response_notify")
	s.UpdateTime = field.NewInt32(table, "update_time")
	s.UpdateNotify = field.NewInt32(table, "update_notify")
	s.SolutionTime = field.NewInt32(table, "solution_time")
	s.SolutionNotify = field.NewInt32(table, "solution_notify")
	s.ValidID = field.NewInt32(table, "valid_id")
	s.Comments = field.NewString(table, "comments")
	s.CreateTime = field.NewTime(table, "create_time")
	s.CreateBy = field.NewInt32(table, "create_by")
	s.ChangeTime = field.NewTime(table, "change_time")
	s.ChangeBy = field.NewInt32(table, "change_by")

	s.fillFieldMap()

	return s
}

func (s *sLA) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sLA) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 15)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["calendar_name"] = s.CalendarName
	s.fieldMap["first_response_time"] = s.FirstResponseTime
	s.fieldMap["first_response_notify"] = s.FirstResponseNotify
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["update_notify"] = s.UpdateNotify
	s.fieldMap["solution_time"] = s.SolutionTime
	s.fieldMap["solution_notify"] = s.SolutionNotify
	s.fieldMap["valid_id"] = s.ValidID
	s.fieldMap["comments"] = s.Comments
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["change_time"] = s.ChangeTime
	s.fieldMap["change_by"] = s.ChangeBy
}

func (s sLA) clone(db *gorm.DB) sLA {
	s.sLADo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sLA) replaceDB(db *gorm.DB) sLA {
	s.sLADo.ReplaceDB(db)
	return s
}

type sLADo struct{ gen.DO }

type ISLADo interface {
	gen.SubQuery
	Debug() ISLADo
	WithContext(ctx context.Context) ISLADo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISLADo
	WriteDB() ISLADo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISLADo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISLADo
	Not(conds ...gen.Condition) ISLADo
	Or(conds ...gen.Condition) ISLADo
	Select(conds ...field.Expr) ISLADo
	Where(conds ...gen.Condition) ISLADo
	Order(conds ...field.Expr) ISLADo
	Distinct(cols ...field.Expr) ISLADo
	Omit(cols ...field.Expr) ISLADo
	Join(table schema.Tabler, on ...field.Expr) ISLADo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISLADo
	RightJoin(table schema.Tabler, on ...field.Expr) ISLADo
	Group(cols ...field.Expr) ISLADo
	Having(conds ...gen.Condition) ISLADo
	Limit(limit int) ISLADo
	Offset(offset int) ISLADo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISLADo
	Unscoped() ISLADo
	Create(values ...*model.SLA) error
	CreateInBatches(values []*model.SLA, batchSize int) error
	Save(values ...*model.SLA) error
	First() (*model.SLA, error)
	Take() (*model.SLA, error)
	Last() (*model.SLA, error)
	Find() ([]*model.SLA, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SLA, err error)
	FindInBatches(result *[]*model.SLA, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SLA) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISLADo
	Assign(attrs ...field.AssignExpr) ISLADo
	Joins(fields ...field.RelationField) ISLADo
	Preload(fields ...field.RelationField) ISLADo
	FirstOrInit() (*model.SLA, error)
	FirstOrCreate() (*model.SLA, error)
	FindByPage(offset int, limit int) (result []*model.SLA, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISLADo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sLADo) Debug() ISLADo {
	return s.withDO(s.DO.Debug())
}

func (s sLADo) WithContext(ctx context.Context) ISLADo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sLADo) ReadDB() ISLADo {
	return s.Clauses(dbresolver.Read)
}

func (s sLADo) WriteDB() ISLADo {
	return s.Clauses(dbresolver.Write)
}

func (s sLADo) Session(config *gorm.Session) ISLADo {
	return s.withDO(s.DO.Session(config))
}

func (s sLADo) Clauses(conds ...clause.Expression) ISLADo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sLADo) Returning(value interface{}, columns ...string) ISLADo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sLADo) Not(conds ...gen.Condition) ISLADo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sLADo) Or(conds ...gen.Condition) ISLADo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sLADo) Select(conds ...field.Expr) ISLADo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sLADo) Where(conds ...gen.Condition) ISLADo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sLADo) Order(conds ...field.Expr) ISLADo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sLADo) Distinct(cols ...field.Expr) ISLADo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sLADo) Omit(cols ...field.Expr) ISLADo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sLADo) Join(table schema.Tabler, on ...field.Expr) ISLADo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sLADo) LeftJoin(table schema.Tabler, on ...field.Expr) ISLADo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sLADo) RightJoin(table schema.Tabler, on ...field.Expr) ISLADo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sLADo) Group(cols ...field.Expr) ISLADo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sLADo) Having(conds ...gen.Condition) ISLADo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sLADo) Limit(limit int) ISLADo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sLADo) Offset(offset int) ISLADo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sLADo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISLADo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sLADo) Unscoped() ISLADo {
	return s.withDO(s.DO.Unscoped())
}

func (s sLADo) Create(values ...*model.SLA) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sLADo) CreateInBatches(values []*model.SLA, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sLADo) Save(values ...*model.SLA) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sLADo) First() (*model.SLA, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SLA), nil
	}
}

func (s sLADo) Take() (*model.SLA, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SLA), nil
	}
}

func (s sLADo) Last() (*model.SLA, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SLA), nil
	}
}

func (s sLADo) Find() ([]*model.SLA, error) {
	result, err := s.DO.Find()
	return result.([]*model.SLA), err
}

func (s sLADo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SLA, err error) {
	buf := make([]*model.SLA, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sLADo) FindInBatches(result *[]*model.SLA, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sLADo) Attrs(attrs ...field.AssignExpr) ISLADo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sLADo) Assign(attrs ...field.AssignExpr) ISLADo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sLADo) Joins(fields ...field.RelationField) ISLADo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sLADo) Preload(fields ...field.RelationField) ISLADo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sLADo) FirstOrInit() (*model.SLA, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SLA), nil
	}
}

func (s sLADo) FirstOrCreate() (*model.SLA, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SLA), nil
	}
}

func (s sLADo) FindByPage(offset int, limit int) (result []*model.SLA, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sLADo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sLADo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sLADo) Delete(models ...*model.SLA) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sLADo) withDO(do gen.Dao) *sLADo {
	s.DO = *do.(*gen.DO)
	return s
}
