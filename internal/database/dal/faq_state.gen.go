// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newFaqState(db *gorm.DB, opts ...gen.DOOption) faqState {
	_faqState := faqState{}

	_faqState.faqStateDo.UseDB(db, opts...)
	_faqState.faqStateDo.UseModel(&model.FaqState{})

	tableName := _faqState.faqStateDo.TableName()
	_faqState.ALL = field.NewAsterisk(tableName)
	_faqState.ID = field.NewInt32(tableName, "id")
	_faqState.Name = field.NewString(tableName, "name")
	_faqState.TypeID = field.NewInt32(tableName, "type_id")

	_faqState.fillFieldMap()

	return _faqState
}

type faqState struct {
	faqStateDo

	ALL    field.Asterisk
	ID     field.Int32
	Name   field.String
	TypeID field.Int32

	fieldMap map[string]field.Expr
}

func (f faqState) Table(newTableName string) *faqState {
	f.faqStateDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f faqState) As(alias string) *faqState {
	f.faqStateDo.DO = *(f.faqStateDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *faqState) updateTableName(table string) *faqState {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt32(table, "id")
	f.Name = field.NewString(table, "name")
	f.TypeID = field.NewInt32(table, "type_id")

	f.fillFieldMap()

	return f
}

func (f *faqState) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *faqState) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 3)
	f.fieldMap["id"] = f.ID
	f.fieldMap["name"] = f.Name
	f.fieldMap["type_id"] = f.TypeID
}

func (f faqState) clone(db *gorm.DB) faqState {
	f.faqStateDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f faqState) replaceDB(db *gorm.DB) faqState {
	f.faqStateDo.ReplaceDB(db)
	return f
}

type faqStateDo struct{ gen.DO }

type IFaqStateDo interface {
	gen.SubQuery
	Debug() IFaqStateDo
	WithContext(ctx context.Context) IFaqStateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFaqStateDo
	WriteDB() IFaqStateDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFaqStateDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFaqStateDo
	Not(conds ...gen.Condition) IFaqStateDo
	Or(conds ...gen.Condition) IFaqStateDo
	Select(conds ...field.Expr) IFaqStateDo
	Where(conds ...gen.Condition) IFaqStateDo
	Order(conds ...field.Expr) IFaqStateDo
	Distinct(cols ...field.Expr) IFaqStateDo
	Omit(cols ...field.Expr) IFaqStateDo
	Join(table schema.Tabler, on ...field.Expr) IFaqStateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFaqStateDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFaqStateDo
	Group(cols ...field.Expr) IFaqStateDo
	Having(conds ...gen.Condition) IFaqStateDo
	Limit(limit int) IFaqStateDo
	Offset(offset int) IFaqStateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFaqStateDo
	Unscoped() IFaqStateDo
	Create(values ...*model.FaqState) error
	CreateInBatches(values []*model.FaqState, batchSize int) error
	Save(values ...*model.FaqState) error
	First() (*model.FaqState, error)
	Take() (*model.FaqState, error)
	Last() (*model.FaqState, error)
	Find() ([]*model.FaqState, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FaqState, err error)
	FindInBatches(result *[]*model.FaqState, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FaqState) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFaqStateDo
	Assign(attrs ...field.AssignExpr) IFaqStateDo
	Joins(fields ...field.RelationField) IFaqStateDo
	Preload(fields ...field.RelationField) IFaqStateDo
	FirstOrInit() (*model.FaqState, error)
	FirstOrCreate() (*model.FaqState, error)
	FindByPage(offset int, limit int) (result []*model.FaqState, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFaqStateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f faqStateDo) Debug() IFaqStateDo {
	return f.withDO(f.DO.Debug())
}

func (f faqStateDo) WithContext(ctx context.Context) IFaqStateDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f faqStateDo) ReadDB() IFaqStateDo {
	return f.Clauses(dbresolver.Read)
}

func (f faqStateDo) WriteDB() IFaqStateDo {
	return f.Clauses(dbresolver.Write)
}

func (f faqStateDo) Session(config *gorm.Session) IFaqStateDo {
	return f.withDO(f.DO.Session(config))
}

func (f faqStateDo) Clauses(conds ...clause.Expression) IFaqStateDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f faqStateDo) Returning(value interface{}, columns ...string) IFaqStateDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f faqStateDo) Not(conds ...gen.Condition) IFaqStateDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f faqStateDo) Or(conds ...gen.Condition) IFaqStateDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f faqStateDo) Select(conds ...field.Expr) IFaqStateDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f faqStateDo) Where(conds ...gen.Condition) IFaqStateDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f faqStateDo) Order(conds ...field.Expr) IFaqStateDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f faqStateDo) Distinct(cols ...field.Expr) IFaqStateDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f faqStateDo) Omit(cols ...field.Expr) IFaqStateDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f faqStateDo) Join(table schema.Tabler, on ...field.Expr) IFaqStateDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f faqStateDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFaqStateDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f faqStateDo) RightJoin(table schema.Tabler, on ...field.Expr) IFaqStateDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f faqStateDo) Group(cols ...field.Expr) IFaqStateDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f faqStateDo) Having(conds ...gen.Condition) IFaqStateDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f faqStateDo) Limit(limit int) IFaqStateDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f faqStateDo) Offset(offset int) IFaqStateDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f faqStateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFaqStateDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f faqStateDo) Unscoped() IFaqStateDo {
	return f.withDO(f.DO.Unscoped())
}

func (f faqStateDo) Create(values ...*model.FaqState) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f faqStateDo) CreateInBatches(values []*model.FaqState, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f faqStateDo) Save(values ...*model.FaqState) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f faqStateDo) First() (*model.FaqState, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqState), nil
	}
}

func (f faqStateDo) Take() (*model.FaqState, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqState), nil
	}
}

func (f faqStateDo) Last() (*model.FaqState, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqState), nil
	}
}

func (f faqStateDo) Find() ([]*model.FaqState, error) {
	result, err := f.DO.Find()
	return result.([]*model.FaqState), err
}

func (f faqStateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FaqState, err error) {
	buf := make([]*model.FaqState, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f faqStateDo) FindInBatches(result *[]*model.FaqState, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f faqStateDo) Attrs(attrs ...field.AssignExpr) IFaqStateDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f faqStateDo) Assign(attrs ...field.AssignExpr) IFaqStateDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f faqStateDo) Joins(fields ...field.RelationField) IFaqStateDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f faqStateDo) Preload(fields ...field.RelationField) IFaqStateDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f faqStateDo) FirstOrInit() (*model.FaqState, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqState), nil
	}
}

func (f faqStateDo) FirstOrCreate() (*model.FaqState, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqState), nil
	}
}

func (f faqStateDo) FindByPage(offset int, limit int) (result []*model.FaqState, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f faqStateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f faqStateDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f faqStateDo) Delete(models ...*model.FaqState) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *faqStateDo) withDO(do gen.Dao) *faqStateDo {
	f.DO = *do.(*gen.DO)
	return f
}
