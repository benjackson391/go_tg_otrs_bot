// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newPmTransitionAction(db *gorm.DB, opts ...gen.DOOption) pmTransitionAction {
	_pmTransitionAction := pmTransitionAction{}

	_pmTransitionAction.pmTransitionActionDo.UseDB(db, opts...)
	_pmTransitionAction.pmTransitionActionDo.UseModel(&model.PmTransitionAction{})

	tableName := _pmTransitionAction.pmTransitionActionDo.TableName()
	_pmTransitionAction.ALL = field.NewAsterisk(tableName)
	_pmTransitionAction.ID = field.NewInt32(tableName, "id")
	_pmTransitionAction.EntityID = field.NewString(tableName, "entity_id")
	_pmTransitionAction.Name = field.NewString(tableName, "name")
	_pmTransitionAction.Config = field.NewBytes(tableName, "config")
	_pmTransitionAction.CreateTime = field.NewTime(tableName, "create_time")
	_pmTransitionAction.CreateBy = field.NewInt32(tableName, "create_by")
	_pmTransitionAction.ChangeTime = field.NewTime(tableName, "change_time")
	_pmTransitionAction.ChangeBy = field.NewInt32(tableName, "change_by")

	_pmTransitionAction.fillFieldMap()

	return _pmTransitionAction
}

type pmTransitionAction struct {
	pmTransitionActionDo

	ALL        field.Asterisk
	ID         field.Int32
	EntityID   field.String
	Name       field.String
	Config     field.Bytes
	CreateTime field.Time
	CreateBy   field.Int32
	ChangeTime field.Time
	ChangeBy   field.Int32

	fieldMap map[string]field.Expr
}

func (p pmTransitionAction) Table(newTableName string) *pmTransitionAction {
	p.pmTransitionActionDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmTransitionAction) As(alias string) *pmTransitionAction {
	p.pmTransitionActionDo.DO = *(p.pmTransitionActionDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmTransitionAction) updateTableName(table string) *pmTransitionAction {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.EntityID = field.NewString(table, "entity_id")
	p.Name = field.NewString(table, "name")
	p.Config = field.NewBytes(table, "config")
	p.CreateTime = field.NewTime(table, "create_time")
	p.CreateBy = field.NewInt32(table, "create_by")
	p.ChangeTime = field.NewTime(table, "change_time")
	p.ChangeBy = field.NewInt32(table, "change_by")

	p.fillFieldMap()

	return p
}

func (p *pmTransitionAction) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmTransitionAction) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.ID
	p.fieldMap["entity_id"] = p.EntityID
	p.fieldMap["name"] = p.Name
	p.fieldMap["config"] = p.Config
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["create_by"] = p.CreateBy
	p.fieldMap["change_time"] = p.ChangeTime
	p.fieldMap["change_by"] = p.ChangeBy
}

func (p pmTransitionAction) clone(db *gorm.DB) pmTransitionAction {
	p.pmTransitionActionDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmTransitionAction) replaceDB(db *gorm.DB) pmTransitionAction {
	p.pmTransitionActionDo.ReplaceDB(db)
	return p
}

type pmTransitionActionDo struct{ gen.DO }

type IPmTransitionActionDo interface {
	gen.SubQuery
	Debug() IPmTransitionActionDo
	WithContext(ctx context.Context) IPmTransitionActionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPmTransitionActionDo
	WriteDB() IPmTransitionActionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPmTransitionActionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPmTransitionActionDo
	Not(conds ...gen.Condition) IPmTransitionActionDo
	Or(conds ...gen.Condition) IPmTransitionActionDo
	Select(conds ...field.Expr) IPmTransitionActionDo
	Where(conds ...gen.Condition) IPmTransitionActionDo
	Order(conds ...field.Expr) IPmTransitionActionDo
	Distinct(cols ...field.Expr) IPmTransitionActionDo
	Omit(cols ...field.Expr) IPmTransitionActionDo
	Join(table schema.Tabler, on ...field.Expr) IPmTransitionActionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPmTransitionActionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPmTransitionActionDo
	Group(cols ...field.Expr) IPmTransitionActionDo
	Having(conds ...gen.Condition) IPmTransitionActionDo
	Limit(limit int) IPmTransitionActionDo
	Offset(offset int) IPmTransitionActionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPmTransitionActionDo
	Unscoped() IPmTransitionActionDo
	Create(values ...*model.PmTransitionAction) error
	CreateInBatches(values []*model.PmTransitionAction, batchSize int) error
	Save(values ...*model.PmTransitionAction) error
	First() (*model.PmTransitionAction, error)
	Take() (*model.PmTransitionAction, error)
	Last() (*model.PmTransitionAction, error)
	Find() ([]*model.PmTransitionAction, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmTransitionAction, err error)
	FindInBatches(result *[]*model.PmTransitionAction, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PmTransitionAction) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPmTransitionActionDo
	Assign(attrs ...field.AssignExpr) IPmTransitionActionDo
	Joins(fields ...field.RelationField) IPmTransitionActionDo
	Preload(fields ...field.RelationField) IPmTransitionActionDo
	FirstOrInit() (*model.PmTransitionAction, error)
	FirstOrCreate() (*model.PmTransitionAction, error)
	FindByPage(offset int, limit int) (result []*model.PmTransitionAction, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPmTransitionActionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pmTransitionActionDo) Debug() IPmTransitionActionDo {
	return p.withDO(p.DO.Debug())
}

func (p pmTransitionActionDo) WithContext(ctx context.Context) IPmTransitionActionDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmTransitionActionDo) ReadDB() IPmTransitionActionDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmTransitionActionDo) WriteDB() IPmTransitionActionDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmTransitionActionDo) Session(config *gorm.Session) IPmTransitionActionDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmTransitionActionDo) Clauses(conds ...clause.Expression) IPmTransitionActionDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmTransitionActionDo) Returning(value interface{}, columns ...string) IPmTransitionActionDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmTransitionActionDo) Not(conds ...gen.Condition) IPmTransitionActionDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmTransitionActionDo) Or(conds ...gen.Condition) IPmTransitionActionDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmTransitionActionDo) Select(conds ...field.Expr) IPmTransitionActionDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmTransitionActionDo) Where(conds ...gen.Condition) IPmTransitionActionDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmTransitionActionDo) Order(conds ...field.Expr) IPmTransitionActionDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmTransitionActionDo) Distinct(cols ...field.Expr) IPmTransitionActionDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmTransitionActionDo) Omit(cols ...field.Expr) IPmTransitionActionDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmTransitionActionDo) Join(table schema.Tabler, on ...field.Expr) IPmTransitionActionDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmTransitionActionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPmTransitionActionDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmTransitionActionDo) RightJoin(table schema.Tabler, on ...field.Expr) IPmTransitionActionDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmTransitionActionDo) Group(cols ...field.Expr) IPmTransitionActionDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmTransitionActionDo) Having(conds ...gen.Condition) IPmTransitionActionDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmTransitionActionDo) Limit(limit int) IPmTransitionActionDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmTransitionActionDo) Offset(offset int) IPmTransitionActionDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmTransitionActionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPmTransitionActionDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmTransitionActionDo) Unscoped() IPmTransitionActionDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmTransitionActionDo) Create(values ...*model.PmTransitionAction) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmTransitionActionDo) CreateInBatches(values []*model.PmTransitionAction, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmTransitionActionDo) Save(values ...*model.PmTransitionAction) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmTransitionActionDo) First() (*model.PmTransitionAction, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmTransitionAction), nil
	}
}

func (p pmTransitionActionDo) Take() (*model.PmTransitionAction, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmTransitionAction), nil
	}
}

func (p pmTransitionActionDo) Last() (*model.PmTransitionAction, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmTransitionAction), nil
	}
}

func (p pmTransitionActionDo) Find() ([]*model.PmTransitionAction, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmTransitionAction), err
}

func (p pmTransitionActionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmTransitionAction, err error) {
	buf := make([]*model.PmTransitionAction, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmTransitionActionDo) FindInBatches(result *[]*model.PmTransitionAction, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmTransitionActionDo) Attrs(attrs ...field.AssignExpr) IPmTransitionActionDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmTransitionActionDo) Assign(attrs ...field.AssignExpr) IPmTransitionActionDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmTransitionActionDo) Joins(fields ...field.RelationField) IPmTransitionActionDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmTransitionActionDo) Preload(fields ...field.RelationField) IPmTransitionActionDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmTransitionActionDo) FirstOrInit() (*model.PmTransitionAction, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmTransitionAction), nil
	}
}

func (p pmTransitionActionDo) FirstOrCreate() (*model.PmTransitionAction, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmTransitionAction), nil
	}
}

func (p pmTransitionActionDo) FindByPage(offset int, limit int) (result []*model.PmTransitionAction, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmTransitionActionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmTransitionActionDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmTransitionActionDo) Delete(models ...*model.PmTransitionAction) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmTransitionActionDo) withDO(do gen.Dao) *pmTransitionActionDo {
	p.DO = *do.(*gen.DO)
	return p
}
