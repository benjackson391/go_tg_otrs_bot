// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newVirtualFsDb(db *gorm.DB, opts ...gen.DOOption) virtualFsDb {
	_virtualFsDb := virtualFsDb{}

	_virtualFsDb.virtualFsDbDo.UseDB(db, opts...)
	_virtualFsDb.virtualFsDbDo.UseModel(&model.VirtualFsDb{})

	tableName := _virtualFsDb.virtualFsDbDo.TableName()
	_virtualFsDb.ALL = field.NewAsterisk(tableName)
	_virtualFsDb.ID = field.NewInt64(tableName, "id")
	_virtualFsDb.Filename = field.NewString(tableName, "filename")
	_virtualFsDb.Content = field.NewBytes(tableName, "content")
	_virtualFsDb.CreateTime = field.NewTime(tableName, "create_time")

	_virtualFsDb.fillFieldMap()

	return _virtualFsDb
}

type virtualFsDb struct {
	virtualFsDbDo

	ALL        field.Asterisk
	ID         field.Int64
	Filename   field.String
	Content    field.Bytes
	CreateTime field.Time

	fieldMap map[string]field.Expr
}

func (v virtualFsDb) Table(newTableName string) *virtualFsDb {
	v.virtualFsDbDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v virtualFsDb) As(alias string) *virtualFsDb {
	v.virtualFsDbDo.DO = *(v.virtualFsDbDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *virtualFsDb) updateTableName(table string) *virtualFsDb {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewInt64(table, "id")
	v.Filename = field.NewString(table, "filename")
	v.Content = field.NewBytes(table, "content")
	v.CreateTime = field.NewTime(table, "create_time")

	v.fillFieldMap()

	return v
}

func (v *virtualFsDb) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *virtualFsDb) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 4)
	v.fieldMap["id"] = v.ID
	v.fieldMap["filename"] = v.Filename
	v.fieldMap["content"] = v.Content
	v.fieldMap["create_time"] = v.CreateTime
}

func (v virtualFsDb) clone(db *gorm.DB) virtualFsDb {
	v.virtualFsDbDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v virtualFsDb) replaceDB(db *gorm.DB) virtualFsDb {
	v.virtualFsDbDo.ReplaceDB(db)
	return v
}

type virtualFsDbDo struct{ gen.DO }

type IVirtualFsDbDo interface {
	gen.SubQuery
	Debug() IVirtualFsDbDo
	WithContext(ctx context.Context) IVirtualFsDbDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVirtualFsDbDo
	WriteDB() IVirtualFsDbDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVirtualFsDbDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVirtualFsDbDo
	Not(conds ...gen.Condition) IVirtualFsDbDo
	Or(conds ...gen.Condition) IVirtualFsDbDo
	Select(conds ...field.Expr) IVirtualFsDbDo
	Where(conds ...gen.Condition) IVirtualFsDbDo
	Order(conds ...field.Expr) IVirtualFsDbDo
	Distinct(cols ...field.Expr) IVirtualFsDbDo
	Omit(cols ...field.Expr) IVirtualFsDbDo
	Join(table schema.Tabler, on ...field.Expr) IVirtualFsDbDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVirtualFsDbDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVirtualFsDbDo
	Group(cols ...field.Expr) IVirtualFsDbDo
	Having(conds ...gen.Condition) IVirtualFsDbDo
	Limit(limit int) IVirtualFsDbDo
	Offset(offset int) IVirtualFsDbDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVirtualFsDbDo
	Unscoped() IVirtualFsDbDo
	Create(values ...*model.VirtualFsDb) error
	CreateInBatches(values []*model.VirtualFsDb, batchSize int) error
	Save(values ...*model.VirtualFsDb) error
	First() (*model.VirtualFsDb, error)
	Take() (*model.VirtualFsDb, error)
	Last() (*model.VirtualFsDb, error)
	Find() ([]*model.VirtualFsDb, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VirtualFsDb, err error)
	FindInBatches(result *[]*model.VirtualFsDb, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.VirtualFsDb) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVirtualFsDbDo
	Assign(attrs ...field.AssignExpr) IVirtualFsDbDo
	Joins(fields ...field.RelationField) IVirtualFsDbDo
	Preload(fields ...field.RelationField) IVirtualFsDbDo
	FirstOrInit() (*model.VirtualFsDb, error)
	FirstOrCreate() (*model.VirtualFsDb, error)
	FindByPage(offset int, limit int) (result []*model.VirtualFsDb, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVirtualFsDbDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v virtualFsDbDo) Debug() IVirtualFsDbDo {
	return v.withDO(v.DO.Debug())
}

func (v virtualFsDbDo) WithContext(ctx context.Context) IVirtualFsDbDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v virtualFsDbDo) ReadDB() IVirtualFsDbDo {
	return v.Clauses(dbresolver.Read)
}

func (v virtualFsDbDo) WriteDB() IVirtualFsDbDo {
	return v.Clauses(dbresolver.Write)
}

func (v virtualFsDbDo) Session(config *gorm.Session) IVirtualFsDbDo {
	return v.withDO(v.DO.Session(config))
}

func (v virtualFsDbDo) Clauses(conds ...clause.Expression) IVirtualFsDbDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v virtualFsDbDo) Returning(value interface{}, columns ...string) IVirtualFsDbDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v virtualFsDbDo) Not(conds ...gen.Condition) IVirtualFsDbDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v virtualFsDbDo) Or(conds ...gen.Condition) IVirtualFsDbDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v virtualFsDbDo) Select(conds ...field.Expr) IVirtualFsDbDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v virtualFsDbDo) Where(conds ...gen.Condition) IVirtualFsDbDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v virtualFsDbDo) Order(conds ...field.Expr) IVirtualFsDbDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v virtualFsDbDo) Distinct(cols ...field.Expr) IVirtualFsDbDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v virtualFsDbDo) Omit(cols ...field.Expr) IVirtualFsDbDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v virtualFsDbDo) Join(table schema.Tabler, on ...field.Expr) IVirtualFsDbDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v virtualFsDbDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVirtualFsDbDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v virtualFsDbDo) RightJoin(table schema.Tabler, on ...field.Expr) IVirtualFsDbDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v virtualFsDbDo) Group(cols ...field.Expr) IVirtualFsDbDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v virtualFsDbDo) Having(conds ...gen.Condition) IVirtualFsDbDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v virtualFsDbDo) Limit(limit int) IVirtualFsDbDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v virtualFsDbDo) Offset(offset int) IVirtualFsDbDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v virtualFsDbDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVirtualFsDbDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v virtualFsDbDo) Unscoped() IVirtualFsDbDo {
	return v.withDO(v.DO.Unscoped())
}

func (v virtualFsDbDo) Create(values ...*model.VirtualFsDb) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v virtualFsDbDo) CreateInBatches(values []*model.VirtualFsDb, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v virtualFsDbDo) Save(values ...*model.VirtualFsDb) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v virtualFsDbDo) First() (*model.VirtualFsDb, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VirtualFsDb), nil
	}
}

func (v virtualFsDbDo) Take() (*model.VirtualFsDb, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VirtualFsDb), nil
	}
}

func (v virtualFsDbDo) Last() (*model.VirtualFsDb, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VirtualFsDb), nil
	}
}

func (v virtualFsDbDo) Find() ([]*model.VirtualFsDb, error) {
	result, err := v.DO.Find()
	return result.([]*model.VirtualFsDb), err
}

func (v virtualFsDbDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VirtualFsDb, err error) {
	buf := make([]*model.VirtualFsDb, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v virtualFsDbDo) FindInBatches(result *[]*model.VirtualFsDb, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v virtualFsDbDo) Attrs(attrs ...field.AssignExpr) IVirtualFsDbDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v virtualFsDbDo) Assign(attrs ...field.AssignExpr) IVirtualFsDbDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v virtualFsDbDo) Joins(fields ...field.RelationField) IVirtualFsDbDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v virtualFsDbDo) Preload(fields ...field.RelationField) IVirtualFsDbDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v virtualFsDbDo) FirstOrInit() (*model.VirtualFsDb, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VirtualFsDb), nil
	}
}

func (v virtualFsDbDo) FirstOrCreate() (*model.VirtualFsDb, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VirtualFsDb), nil
	}
}

func (v virtualFsDbDo) FindByPage(offset int, limit int) (result []*model.VirtualFsDb, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v virtualFsDbDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v virtualFsDbDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v virtualFsDbDo) Delete(models ...*model.VirtualFsDb) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *virtualFsDbDo) withDO(do gen.Dao) *virtualFsDbDo {
	v.DO = *do.(*gen.DO)
	return v
}
