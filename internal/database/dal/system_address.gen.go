// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newSystemAddress(db *gorm.DB, opts ...gen.DOOption) systemAddress {
	_systemAddress := systemAddress{}

	_systemAddress.systemAddressDo.UseDB(db, opts...)
	_systemAddress.systemAddressDo.UseModel(&model.SystemAddress{})

	tableName := _systemAddress.systemAddressDo.TableName()
	_systemAddress.ALL = field.NewAsterisk(tableName)
	_systemAddress.ID = field.NewInt32(tableName, "id")
	_systemAddress.Value0 = field.NewString(tableName, "value0")
	_systemAddress.Value1 = field.NewString(tableName, "value1")
	_systemAddress.Value2 = field.NewString(tableName, "value2")
	_systemAddress.Value3 = field.NewString(tableName, "value3")
	_systemAddress.QueueID = field.NewInt32(tableName, "queue_id")
	_systemAddress.Comments = field.NewString(tableName, "comments")
	_systemAddress.ValidID = field.NewInt32(tableName, "valid_id")
	_systemAddress.CreateTime = field.NewTime(tableName, "create_time")
	_systemAddress.CreateBy = field.NewInt32(tableName, "create_by")
	_systemAddress.ChangeTime = field.NewTime(tableName, "change_time")
	_systemAddress.ChangeBy = field.NewInt32(tableName, "change_by")

	_systemAddress.fillFieldMap()

	return _systemAddress
}

type systemAddress struct {
	systemAddressDo

	ALL        field.Asterisk
	ID         field.Int32
	Value0     field.String
	Value1     field.String
	Value2     field.String
	Value3     field.String
	QueueID    field.Int32
	Comments   field.String
	ValidID    field.Int32
	CreateTime field.Time
	CreateBy   field.Int32
	ChangeTime field.Time
	ChangeBy   field.Int32

	fieldMap map[string]field.Expr
}

func (s systemAddress) Table(newTableName string) *systemAddress {
	s.systemAddressDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systemAddress) As(alias string) *systemAddress {
	s.systemAddressDo.DO = *(s.systemAddressDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systemAddress) updateTableName(table string) *systemAddress {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.Value0 = field.NewString(table, "value0")
	s.Value1 = field.NewString(table, "value1")
	s.Value2 = field.NewString(table, "value2")
	s.Value3 = field.NewString(table, "value3")
	s.QueueID = field.NewInt32(table, "queue_id")
	s.Comments = field.NewString(table, "comments")
	s.ValidID = field.NewInt32(table, "valid_id")
	s.CreateTime = field.NewTime(table, "create_time")
	s.CreateBy = field.NewInt32(table, "create_by")
	s.ChangeTime = field.NewTime(table, "change_time")
	s.ChangeBy = field.NewInt32(table, "change_by")

	s.fillFieldMap()

	return s
}

func (s *systemAddress) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systemAddress) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["id"] = s.ID
	s.fieldMap["value0"] = s.Value0
	s.fieldMap["value1"] = s.Value1
	s.fieldMap["value2"] = s.Value2
	s.fieldMap["value3"] = s.Value3
	s.fieldMap["queue_id"] = s.QueueID
	s.fieldMap["comments"] = s.Comments
	s.fieldMap["valid_id"] = s.ValidID
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["change_time"] = s.ChangeTime
	s.fieldMap["change_by"] = s.ChangeBy
}

func (s systemAddress) clone(db *gorm.DB) systemAddress {
	s.systemAddressDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s systemAddress) replaceDB(db *gorm.DB) systemAddress {
	s.systemAddressDo.ReplaceDB(db)
	return s
}

type systemAddressDo struct{ gen.DO }

type ISystemAddressDo interface {
	gen.SubQuery
	Debug() ISystemAddressDo
	WithContext(ctx context.Context) ISystemAddressDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISystemAddressDo
	WriteDB() ISystemAddressDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISystemAddressDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISystemAddressDo
	Not(conds ...gen.Condition) ISystemAddressDo
	Or(conds ...gen.Condition) ISystemAddressDo
	Select(conds ...field.Expr) ISystemAddressDo
	Where(conds ...gen.Condition) ISystemAddressDo
	Order(conds ...field.Expr) ISystemAddressDo
	Distinct(cols ...field.Expr) ISystemAddressDo
	Omit(cols ...field.Expr) ISystemAddressDo
	Join(table schema.Tabler, on ...field.Expr) ISystemAddressDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISystemAddressDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISystemAddressDo
	Group(cols ...field.Expr) ISystemAddressDo
	Having(conds ...gen.Condition) ISystemAddressDo
	Limit(limit int) ISystemAddressDo
	Offset(offset int) ISystemAddressDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemAddressDo
	Unscoped() ISystemAddressDo
	Create(values ...*model.SystemAddress) error
	CreateInBatches(values []*model.SystemAddress, batchSize int) error
	Save(values ...*model.SystemAddress) error
	First() (*model.SystemAddress, error)
	Take() (*model.SystemAddress, error)
	Last() (*model.SystemAddress, error)
	Find() ([]*model.SystemAddress, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemAddress, err error)
	FindInBatches(result *[]*model.SystemAddress, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SystemAddress) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISystemAddressDo
	Assign(attrs ...field.AssignExpr) ISystemAddressDo
	Joins(fields ...field.RelationField) ISystemAddressDo
	Preload(fields ...field.RelationField) ISystemAddressDo
	FirstOrInit() (*model.SystemAddress, error)
	FirstOrCreate() (*model.SystemAddress, error)
	FindByPage(offset int, limit int) (result []*model.SystemAddress, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISystemAddressDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s systemAddressDo) Debug() ISystemAddressDo {
	return s.withDO(s.DO.Debug())
}

func (s systemAddressDo) WithContext(ctx context.Context) ISystemAddressDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systemAddressDo) ReadDB() ISystemAddressDo {
	return s.Clauses(dbresolver.Read)
}

func (s systemAddressDo) WriteDB() ISystemAddressDo {
	return s.Clauses(dbresolver.Write)
}

func (s systemAddressDo) Session(config *gorm.Session) ISystemAddressDo {
	return s.withDO(s.DO.Session(config))
}

func (s systemAddressDo) Clauses(conds ...clause.Expression) ISystemAddressDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systemAddressDo) Returning(value interface{}, columns ...string) ISystemAddressDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systemAddressDo) Not(conds ...gen.Condition) ISystemAddressDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systemAddressDo) Or(conds ...gen.Condition) ISystemAddressDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systemAddressDo) Select(conds ...field.Expr) ISystemAddressDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systemAddressDo) Where(conds ...gen.Condition) ISystemAddressDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systemAddressDo) Order(conds ...field.Expr) ISystemAddressDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systemAddressDo) Distinct(cols ...field.Expr) ISystemAddressDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systemAddressDo) Omit(cols ...field.Expr) ISystemAddressDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systemAddressDo) Join(table schema.Tabler, on ...field.Expr) ISystemAddressDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systemAddressDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISystemAddressDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systemAddressDo) RightJoin(table schema.Tabler, on ...field.Expr) ISystemAddressDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systemAddressDo) Group(cols ...field.Expr) ISystemAddressDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systemAddressDo) Having(conds ...gen.Condition) ISystemAddressDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systemAddressDo) Limit(limit int) ISystemAddressDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systemAddressDo) Offset(offset int) ISystemAddressDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systemAddressDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemAddressDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systemAddressDo) Unscoped() ISystemAddressDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systemAddressDo) Create(values ...*model.SystemAddress) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systemAddressDo) CreateInBatches(values []*model.SystemAddress, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systemAddressDo) Save(values ...*model.SystemAddress) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systemAddressDo) First() (*model.SystemAddress, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemAddress), nil
	}
}

func (s systemAddressDo) Take() (*model.SystemAddress, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemAddress), nil
	}
}

func (s systemAddressDo) Last() (*model.SystemAddress, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemAddress), nil
	}
}

func (s systemAddressDo) Find() ([]*model.SystemAddress, error) {
	result, err := s.DO.Find()
	return result.([]*model.SystemAddress), err
}

func (s systemAddressDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemAddress, err error) {
	buf := make([]*model.SystemAddress, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systemAddressDo) FindInBatches(result *[]*model.SystemAddress, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systemAddressDo) Attrs(attrs ...field.AssignExpr) ISystemAddressDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systemAddressDo) Assign(attrs ...field.AssignExpr) ISystemAddressDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systemAddressDo) Joins(fields ...field.RelationField) ISystemAddressDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systemAddressDo) Preload(fields ...field.RelationField) ISystemAddressDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systemAddressDo) FirstOrInit() (*model.SystemAddress, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemAddress), nil
	}
}

func (s systemAddressDo) FirstOrCreate() (*model.SystemAddress, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemAddress), nil
	}
}

func (s systemAddressDo) FindByPage(offset int, limit int) (result []*model.SystemAddress, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systemAddressDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systemAddressDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systemAddressDo) Delete(models ...*model.SystemAddress) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systemAddressDo) withDO(do gen.Dao) *systemAddressDo {
	s.DO = *do.(*gen.DO)
	return s
}
