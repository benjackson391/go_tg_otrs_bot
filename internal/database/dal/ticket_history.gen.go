// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newTicketHistory(db *gorm.DB, opts ...gen.DOOption) ticketHistory {
	_ticketHistory := ticketHistory{}

	_ticketHistory.ticketHistoryDo.UseDB(db, opts...)
	_ticketHistory.ticketHistoryDo.UseModel(&model.TicketHistory{})

	tableName := _ticketHistory.ticketHistoryDo.TableName()
	_ticketHistory.ALL = field.NewAsterisk(tableName)
	_ticketHistory.ID = field.NewInt64(tableName, "id")
	_ticketHistory.Name = field.NewString(tableName, "name")
	_ticketHistory.HistoryTypeID = field.NewInt32(tableName, "history_type_id")
	_ticketHistory.TicketID = field.NewInt64(tableName, "ticket_id")
	_ticketHistory.ArticleID = field.NewInt64(tableName, "article_id")
	_ticketHistory.TypeID = field.NewInt32(tableName, "type_id")
	_ticketHistory.QueueID = field.NewInt32(tableName, "queue_id")
	_ticketHistory.OwnerID = field.NewInt32(tableName, "owner_id")
	_ticketHistory.PriorityID = field.NewInt32(tableName, "priority_id")
	_ticketHistory.StateID = field.NewInt32(tableName, "state_id")
	_ticketHistory.CreateTime = field.NewTime(tableName, "create_time")
	_ticketHistory.CreateBy = field.NewInt32(tableName, "create_by")
	_ticketHistory.ChangeTime = field.NewTime(tableName, "change_time")
	_ticketHistory.ChangeBy = field.NewInt32(tableName, "change_by")

	_ticketHistory.fillFieldMap()

	return _ticketHistory
}

type ticketHistory struct {
	ticketHistoryDo

	ALL           field.Asterisk
	ID            field.Int64
	Name          field.String
	HistoryTypeID field.Int32
	TicketID      field.Int64
	ArticleID     field.Int64
	TypeID        field.Int32
	QueueID       field.Int32
	OwnerID       field.Int32
	PriorityID    field.Int32
	StateID       field.Int32
	CreateTime    field.Time
	CreateBy      field.Int32
	ChangeTime    field.Time
	ChangeBy      field.Int32

	fieldMap map[string]field.Expr
}

func (t ticketHistory) Table(newTableName string) *ticketHistory {
	t.ticketHistoryDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t ticketHistory) As(alias string) *ticketHistory {
	t.ticketHistoryDo.DO = *(t.ticketHistoryDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *ticketHistory) updateTableName(table string) *ticketHistory {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.Name = field.NewString(table, "name")
	t.HistoryTypeID = field.NewInt32(table, "history_type_id")
	t.TicketID = field.NewInt64(table, "ticket_id")
	t.ArticleID = field.NewInt64(table, "article_id")
	t.TypeID = field.NewInt32(table, "type_id")
	t.QueueID = field.NewInt32(table, "queue_id")
	t.OwnerID = field.NewInt32(table, "owner_id")
	t.PriorityID = field.NewInt32(table, "priority_id")
	t.StateID = field.NewInt32(table, "state_id")
	t.CreateTime = field.NewTime(table, "create_time")
	t.CreateBy = field.NewInt32(table, "create_by")
	t.ChangeTime = field.NewTime(table, "change_time")
	t.ChangeBy = field.NewInt32(table, "change_by")

	t.fillFieldMap()

	return t
}

func (t *ticketHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *ticketHistory) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 14)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["history_type_id"] = t.HistoryTypeID
	t.fieldMap["ticket_id"] = t.TicketID
	t.fieldMap["article_id"] = t.ArticleID
	t.fieldMap["type_id"] = t.TypeID
	t.fieldMap["queue_id"] = t.QueueID
	t.fieldMap["owner_id"] = t.OwnerID
	t.fieldMap["priority_id"] = t.PriorityID
	t.fieldMap["state_id"] = t.StateID
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["create_by"] = t.CreateBy
	t.fieldMap["change_time"] = t.ChangeTime
	t.fieldMap["change_by"] = t.ChangeBy
}

func (t ticketHistory) clone(db *gorm.DB) ticketHistory {
	t.ticketHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t ticketHistory) replaceDB(db *gorm.DB) ticketHistory {
	t.ticketHistoryDo.ReplaceDB(db)
	return t
}

type ticketHistoryDo struct{ gen.DO }

type ITicketHistoryDo interface {
	gen.SubQuery
	Debug() ITicketHistoryDo
	WithContext(ctx context.Context) ITicketHistoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITicketHistoryDo
	WriteDB() ITicketHistoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITicketHistoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITicketHistoryDo
	Not(conds ...gen.Condition) ITicketHistoryDo
	Or(conds ...gen.Condition) ITicketHistoryDo
	Select(conds ...field.Expr) ITicketHistoryDo
	Where(conds ...gen.Condition) ITicketHistoryDo
	Order(conds ...field.Expr) ITicketHistoryDo
	Distinct(cols ...field.Expr) ITicketHistoryDo
	Omit(cols ...field.Expr) ITicketHistoryDo
	Join(table schema.Tabler, on ...field.Expr) ITicketHistoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITicketHistoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITicketHistoryDo
	Group(cols ...field.Expr) ITicketHistoryDo
	Having(conds ...gen.Condition) ITicketHistoryDo
	Limit(limit int) ITicketHistoryDo
	Offset(offset int) ITicketHistoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITicketHistoryDo
	Unscoped() ITicketHistoryDo
	Create(values ...*model.TicketHistory) error
	CreateInBatches(values []*model.TicketHistory, batchSize int) error
	Save(values ...*model.TicketHistory) error
	First() (*model.TicketHistory, error)
	Take() (*model.TicketHistory, error)
	Last() (*model.TicketHistory, error)
	Find() ([]*model.TicketHistory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TicketHistory, err error)
	FindInBatches(result *[]*model.TicketHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TicketHistory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITicketHistoryDo
	Assign(attrs ...field.AssignExpr) ITicketHistoryDo
	Joins(fields ...field.RelationField) ITicketHistoryDo
	Preload(fields ...field.RelationField) ITicketHistoryDo
	FirstOrInit() (*model.TicketHistory, error)
	FirstOrCreate() (*model.TicketHistory, error)
	FindByPage(offset int, limit int) (result []*model.TicketHistory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITicketHistoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t ticketHistoryDo) Debug() ITicketHistoryDo {
	return t.withDO(t.DO.Debug())
}

func (t ticketHistoryDo) WithContext(ctx context.Context) ITicketHistoryDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t ticketHistoryDo) ReadDB() ITicketHistoryDo {
	return t.Clauses(dbresolver.Read)
}

func (t ticketHistoryDo) WriteDB() ITicketHistoryDo {
	return t.Clauses(dbresolver.Write)
}

func (t ticketHistoryDo) Session(config *gorm.Session) ITicketHistoryDo {
	return t.withDO(t.DO.Session(config))
}

func (t ticketHistoryDo) Clauses(conds ...clause.Expression) ITicketHistoryDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t ticketHistoryDo) Returning(value interface{}, columns ...string) ITicketHistoryDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t ticketHistoryDo) Not(conds ...gen.Condition) ITicketHistoryDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t ticketHistoryDo) Or(conds ...gen.Condition) ITicketHistoryDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t ticketHistoryDo) Select(conds ...field.Expr) ITicketHistoryDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t ticketHistoryDo) Where(conds ...gen.Condition) ITicketHistoryDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t ticketHistoryDo) Order(conds ...field.Expr) ITicketHistoryDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t ticketHistoryDo) Distinct(cols ...field.Expr) ITicketHistoryDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t ticketHistoryDo) Omit(cols ...field.Expr) ITicketHistoryDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t ticketHistoryDo) Join(table schema.Tabler, on ...field.Expr) ITicketHistoryDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t ticketHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITicketHistoryDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t ticketHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) ITicketHistoryDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t ticketHistoryDo) Group(cols ...field.Expr) ITicketHistoryDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t ticketHistoryDo) Having(conds ...gen.Condition) ITicketHistoryDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t ticketHistoryDo) Limit(limit int) ITicketHistoryDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t ticketHistoryDo) Offset(offset int) ITicketHistoryDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t ticketHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITicketHistoryDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t ticketHistoryDo) Unscoped() ITicketHistoryDo {
	return t.withDO(t.DO.Unscoped())
}

func (t ticketHistoryDo) Create(values ...*model.TicketHistory) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t ticketHistoryDo) CreateInBatches(values []*model.TicketHistory, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t ticketHistoryDo) Save(values ...*model.TicketHistory) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t ticketHistoryDo) First() (*model.TicketHistory, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketHistory), nil
	}
}

func (t ticketHistoryDo) Take() (*model.TicketHistory, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketHistory), nil
	}
}

func (t ticketHistoryDo) Last() (*model.TicketHistory, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketHistory), nil
	}
}

func (t ticketHistoryDo) Find() ([]*model.TicketHistory, error) {
	result, err := t.DO.Find()
	return result.([]*model.TicketHistory), err
}

func (t ticketHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TicketHistory, err error) {
	buf := make([]*model.TicketHistory, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t ticketHistoryDo) FindInBatches(result *[]*model.TicketHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t ticketHistoryDo) Attrs(attrs ...field.AssignExpr) ITicketHistoryDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t ticketHistoryDo) Assign(attrs ...field.AssignExpr) ITicketHistoryDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t ticketHistoryDo) Joins(fields ...field.RelationField) ITicketHistoryDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t ticketHistoryDo) Preload(fields ...field.RelationField) ITicketHistoryDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t ticketHistoryDo) FirstOrInit() (*model.TicketHistory, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketHistory), nil
	}
}

func (t ticketHistoryDo) FirstOrCreate() (*model.TicketHistory, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketHistory), nil
	}
}

func (t ticketHistoryDo) FindByPage(offset int, limit int) (result []*model.TicketHistory, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t ticketHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t ticketHistoryDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t ticketHistoryDo) Delete(models ...*model.TicketHistory) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *ticketHistoryDo) withDO(do gen.Dao) *ticketHistoryDo {
	t.DO = *do.(*gen.DO)
	return t
}
