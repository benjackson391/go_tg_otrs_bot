// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newCustomerUser(db *gorm.DB, opts ...gen.DOOption) customerUser {
	_customerUser := customerUser{}

	_customerUser.customerUserDo.UseDB(db, opts...)
	_customerUser.customerUserDo.UseModel(&model.CustomerUser{})

	tableName := _customerUser.customerUserDo.TableName()
	_customerUser.ALL = field.NewAsterisk(tableName)
	_customerUser.ID = field.NewInt32(tableName, "id")
	_customerUser.Login = field.NewString(tableName, "login")
	_customerUser.Email = field.NewString(tableName, "email")
	_customerUser.CustomerID = field.NewString(tableName, "customer_id")
	_customerUser.Pw = field.NewString(tableName, "pw")
	_customerUser.Title = field.NewString(tableName, "title")
	_customerUser.FirstName = field.NewString(tableName, "first_name")
	_customerUser.LastName = field.NewString(tableName, "last_name")
	_customerUser.Phone = field.NewString(tableName, "phone")
	_customerUser.Fax = field.NewString(tableName, "fax")
	_customerUser.Mobile = field.NewString(tableName, "mobile")
	_customerUser.Street = field.NewString(tableName, "street")
	_customerUser.Zip = field.NewString(tableName, "zip")
	_customerUser.City = field.NewString(tableName, "city")
	_customerUser.Country = field.NewString(tableName, "country")
	_customerUser.Comments = field.NewString(tableName, "comments")
	_customerUser.ValidID = field.NewInt32(tableName, "valid_id")
	_customerUser.CreateTime = field.NewTime(tableName, "create_time")
	_customerUser.CreateBy = field.NewInt32(tableName, "create_by")
	_customerUser.ChangeTime = field.NewTime(tableName, "change_time")
	_customerUser.ChangeBy = field.NewInt32(tableName, "change_by")

	_customerUser.fillFieldMap()

	return _customerUser
}

type customerUser struct {
	customerUserDo

	ALL        field.Asterisk
	ID         field.Int32
	Login      field.String
	Email      field.String
	CustomerID field.String
	Pw         field.String
	Title      field.String
	FirstName  field.String
	LastName   field.String
	Phone      field.String
	Fax        field.String
	Mobile     field.String
	Street     field.String
	Zip        field.String
	City       field.String
	Country    field.String
	Comments   field.String
	ValidID    field.Int32
	CreateTime field.Time
	CreateBy   field.Int32
	ChangeTime field.Time
	ChangeBy   field.Int32

	fieldMap map[string]field.Expr
}

func (c customerUser) Table(newTableName string) *customerUser {
	c.customerUserDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c customerUser) As(alias string) *customerUser {
	c.customerUserDo.DO = *(c.customerUserDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *customerUser) updateTableName(table string) *customerUser {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.Login = field.NewString(table, "login")
	c.Email = field.NewString(table, "email")
	c.CustomerID = field.NewString(table, "customer_id")
	c.Pw = field.NewString(table, "pw")
	c.Title = field.NewString(table, "title")
	c.FirstName = field.NewString(table, "first_name")
	c.LastName = field.NewString(table, "last_name")
	c.Phone = field.NewString(table, "phone")
	c.Fax = field.NewString(table, "fax")
	c.Mobile = field.NewString(table, "mobile")
	c.Street = field.NewString(table, "street")
	c.Zip = field.NewString(table, "zip")
	c.City = field.NewString(table, "city")
	c.Country = field.NewString(table, "country")
	c.Comments = field.NewString(table, "comments")
	c.ValidID = field.NewInt32(table, "valid_id")
	c.CreateTime = field.NewTime(table, "create_time")
	c.CreateBy = field.NewInt32(table, "create_by")
	c.ChangeTime = field.NewTime(table, "change_time")
	c.ChangeBy = field.NewInt32(table, "change_by")

	c.fillFieldMap()

	return c
}

func (c *customerUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *customerUser) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 21)
	c.fieldMap["id"] = c.ID
	c.fieldMap["login"] = c.Login
	c.fieldMap["email"] = c.Email
	c.fieldMap["customer_id"] = c.CustomerID
	c.fieldMap["pw"] = c.Pw
	c.fieldMap["title"] = c.Title
	c.fieldMap["first_name"] = c.FirstName
	c.fieldMap["last_name"] = c.LastName
	c.fieldMap["phone"] = c.Phone
	c.fieldMap["fax"] = c.Fax
	c.fieldMap["mobile"] = c.Mobile
	c.fieldMap["street"] = c.Street
	c.fieldMap["zip"] = c.Zip
	c.fieldMap["city"] = c.City
	c.fieldMap["country"] = c.Country
	c.fieldMap["comments"] = c.Comments
	c.fieldMap["valid_id"] = c.ValidID
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["create_by"] = c.CreateBy
	c.fieldMap["change_time"] = c.ChangeTime
	c.fieldMap["change_by"] = c.ChangeBy
}

func (c customerUser) clone(db *gorm.DB) customerUser {
	c.customerUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c customerUser) replaceDB(db *gorm.DB) customerUser {
	c.customerUserDo.ReplaceDB(db)
	return c
}

type customerUserDo struct{ gen.DO }

type ICustomerUserDo interface {
	gen.SubQuery
	Debug() ICustomerUserDo
	WithContext(ctx context.Context) ICustomerUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICustomerUserDo
	WriteDB() ICustomerUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICustomerUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICustomerUserDo
	Not(conds ...gen.Condition) ICustomerUserDo
	Or(conds ...gen.Condition) ICustomerUserDo
	Select(conds ...field.Expr) ICustomerUserDo
	Where(conds ...gen.Condition) ICustomerUserDo
	Order(conds ...field.Expr) ICustomerUserDo
	Distinct(cols ...field.Expr) ICustomerUserDo
	Omit(cols ...field.Expr) ICustomerUserDo
	Join(table schema.Tabler, on ...field.Expr) ICustomerUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICustomerUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICustomerUserDo
	Group(cols ...field.Expr) ICustomerUserDo
	Having(conds ...gen.Condition) ICustomerUserDo
	Limit(limit int) ICustomerUserDo
	Offset(offset int) ICustomerUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICustomerUserDo
	Unscoped() ICustomerUserDo
	Create(values ...*model.CustomerUser) error
	CreateInBatches(values []*model.CustomerUser, batchSize int) error
	Save(values ...*model.CustomerUser) error
	First() (*model.CustomerUser, error)
	Take() (*model.CustomerUser, error)
	Last() (*model.CustomerUser, error)
	Find() ([]*model.CustomerUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CustomerUser, err error)
	FindInBatches(result *[]*model.CustomerUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CustomerUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICustomerUserDo
	Assign(attrs ...field.AssignExpr) ICustomerUserDo
	Joins(fields ...field.RelationField) ICustomerUserDo
	Preload(fields ...field.RelationField) ICustomerUserDo
	FirstOrInit() (*model.CustomerUser, error)
	FirstOrCreate() (*model.CustomerUser, error)
	FindByPage(offset int, limit int) (result []*model.CustomerUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICustomerUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c customerUserDo) Debug() ICustomerUserDo {
	return c.withDO(c.DO.Debug())
}

func (c customerUserDo) WithContext(ctx context.Context) ICustomerUserDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c customerUserDo) ReadDB() ICustomerUserDo {
	return c.Clauses(dbresolver.Read)
}

func (c customerUserDo) WriteDB() ICustomerUserDo {
	return c.Clauses(dbresolver.Write)
}

func (c customerUserDo) Session(config *gorm.Session) ICustomerUserDo {
	return c.withDO(c.DO.Session(config))
}

func (c customerUserDo) Clauses(conds ...clause.Expression) ICustomerUserDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c customerUserDo) Returning(value interface{}, columns ...string) ICustomerUserDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c customerUserDo) Not(conds ...gen.Condition) ICustomerUserDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c customerUserDo) Or(conds ...gen.Condition) ICustomerUserDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c customerUserDo) Select(conds ...field.Expr) ICustomerUserDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c customerUserDo) Where(conds ...gen.Condition) ICustomerUserDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c customerUserDo) Order(conds ...field.Expr) ICustomerUserDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c customerUserDo) Distinct(cols ...field.Expr) ICustomerUserDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c customerUserDo) Omit(cols ...field.Expr) ICustomerUserDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c customerUserDo) Join(table schema.Tabler, on ...field.Expr) ICustomerUserDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c customerUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICustomerUserDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c customerUserDo) RightJoin(table schema.Tabler, on ...field.Expr) ICustomerUserDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c customerUserDo) Group(cols ...field.Expr) ICustomerUserDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c customerUserDo) Having(conds ...gen.Condition) ICustomerUserDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c customerUserDo) Limit(limit int) ICustomerUserDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c customerUserDo) Offset(offset int) ICustomerUserDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c customerUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICustomerUserDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c customerUserDo) Unscoped() ICustomerUserDo {
	return c.withDO(c.DO.Unscoped())
}

func (c customerUserDo) Create(values ...*model.CustomerUser) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c customerUserDo) CreateInBatches(values []*model.CustomerUser, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c customerUserDo) Save(values ...*model.CustomerUser) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c customerUserDo) First() (*model.CustomerUser, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerUser), nil
	}
}

func (c customerUserDo) Take() (*model.CustomerUser, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerUser), nil
	}
}

func (c customerUserDo) Last() (*model.CustomerUser, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerUser), nil
	}
}

func (c customerUserDo) Find() ([]*model.CustomerUser, error) {
	result, err := c.DO.Find()
	return result.([]*model.CustomerUser), err
}

func (c customerUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CustomerUser, err error) {
	buf := make([]*model.CustomerUser, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c customerUserDo) FindInBatches(result *[]*model.CustomerUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c customerUserDo) Attrs(attrs ...field.AssignExpr) ICustomerUserDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c customerUserDo) Assign(attrs ...field.AssignExpr) ICustomerUserDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c customerUserDo) Joins(fields ...field.RelationField) ICustomerUserDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c customerUserDo) Preload(fields ...field.RelationField) ICustomerUserDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c customerUserDo) FirstOrInit() (*model.CustomerUser, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerUser), nil
	}
}

func (c customerUserDo) FirstOrCreate() (*model.CustomerUser, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerUser), nil
	}
}

func (c customerUserDo) FindByPage(offset int, limit int) (result []*model.CustomerUser, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c customerUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c customerUserDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c customerUserDo) Delete(models ...*model.CustomerUser) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *customerUserDo) withDO(do gen.Dao) *customerUserDo {
	c.DO = *do.(*gen.DO)
	return c
}
