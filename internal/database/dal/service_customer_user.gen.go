// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newServiceCustomerUser(db *gorm.DB, opts ...gen.DOOption) serviceCustomerUser {
	_serviceCustomerUser := serviceCustomerUser{}

	_serviceCustomerUser.serviceCustomerUserDo.UseDB(db, opts...)
	_serviceCustomerUser.serviceCustomerUserDo.UseModel(&model.ServiceCustomerUser{})

	tableName := _serviceCustomerUser.serviceCustomerUserDo.TableName()
	_serviceCustomerUser.ALL = field.NewAsterisk(tableName)
	_serviceCustomerUser.CustomerUserLogin = field.NewString(tableName, "customer_user_login")
	_serviceCustomerUser.ServiceID = field.NewInt32(tableName, "service_id")
	_serviceCustomerUser.CreateTime = field.NewTime(tableName, "create_time")
	_serviceCustomerUser.CreateBy = field.NewInt32(tableName, "create_by")

	_serviceCustomerUser.fillFieldMap()

	return _serviceCustomerUser
}

type serviceCustomerUser struct {
	serviceCustomerUserDo

	ALL               field.Asterisk
	CustomerUserLogin field.String
	ServiceID         field.Int32
	CreateTime        field.Time
	CreateBy          field.Int32

	fieldMap map[string]field.Expr
}

func (s serviceCustomerUser) Table(newTableName string) *serviceCustomerUser {
	s.serviceCustomerUserDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serviceCustomerUser) As(alias string) *serviceCustomerUser {
	s.serviceCustomerUserDo.DO = *(s.serviceCustomerUserDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serviceCustomerUser) updateTableName(table string) *serviceCustomerUser {
	s.ALL = field.NewAsterisk(table)
	s.CustomerUserLogin = field.NewString(table, "customer_user_login")
	s.ServiceID = field.NewInt32(table, "service_id")
	s.CreateTime = field.NewTime(table, "create_time")
	s.CreateBy = field.NewInt32(table, "create_by")

	s.fillFieldMap()

	return s
}

func (s *serviceCustomerUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serviceCustomerUser) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["customer_user_login"] = s.CustomerUserLogin
	s.fieldMap["service_id"] = s.ServiceID
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["create_by"] = s.CreateBy
}

func (s serviceCustomerUser) clone(db *gorm.DB) serviceCustomerUser {
	s.serviceCustomerUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serviceCustomerUser) replaceDB(db *gorm.DB) serviceCustomerUser {
	s.serviceCustomerUserDo.ReplaceDB(db)
	return s
}

type serviceCustomerUserDo struct{ gen.DO }

type IServiceCustomerUserDo interface {
	gen.SubQuery
	Debug() IServiceCustomerUserDo
	WithContext(ctx context.Context) IServiceCustomerUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServiceCustomerUserDo
	WriteDB() IServiceCustomerUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServiceCustomerUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServiceCustomerUserDo
	Not(conds ...gen.Condition) IServiceCustomerUserDo
	Or(conds ...gen.Condition) IServiceCustomerUserDo
	Select(conds ...field.Expr) IServiceCustomerUserDo
	Where(conds ...gen.Condition) IServiceCustomerUserDo
	Order(conds ...field.Expr) IServiceCustomerUserDo
	Distinct(cols ...field.Expr) IServiceCustomerUserDo
	Omit(cols ...field.Expr) IServiceCustomerUserDo
	Join(table schema.Tabler, on ...field.Expr) IServiceCustomerUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServiceCustomerUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServiceCustomerUserDo
	Group(cols ...field.Expr) IServiceCustomerUserDo
	Having(conds ...gen.Condition) IServiceCustomerUserDo
	Limit(limit int) IServiceCustomerUserDo
	Offset(offset int) IServiceCustomerUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServiceCustomerUserDo
	Unscoped() IServiceCustomerUserDo
	Create(values ...*model.ServiceCustomerUser) error
	CreateInBatches(values []*model.ServiceCustomerUser, batchSize int) error
	Save(values ...*model.ServiceCustomerUser) error
	First() (*model.ServiceCustomerUser, error)
	Take() (*model.ServiceCustomerUser, error)
	Last() (*model.ServiceCustomerUser, error)
	Find() ([]*model.ServiceCustomerUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServiceCustomerUser, err error)
	FindInBatches(result *[]*model.ServiceCustomerUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ServiceCustomerUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServiceCustomerUserDo
	Assign(attrs ...field.AssignExpr) IServiceCustomerUserDo
	Joins(fields ...field.RelationField) IServiceCustomerUserDo
	Preload(fields ...field.RelationField) IServiceCustomerUserDo
	FirstOrInit() (*model.ServiceCustomerUser, error)
	FirstOrCreate() (*model.ServiceCustomerUser, error)
	FindByPage(offset int, limit int) (result []*model.ServiceCustomerUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServiceCustomerUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serviceCustomerUserDo) Debug() IServiceCustomerUserDo {
	return s.withDO(s.DO.Debug())
}

func (s serviceCustomerUserDo) WithContext(ctx context.Context) IServiceCustomerUserDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serviceCustomerUserDo) ReadDB() IServiceCustomerUserDo {
	return s.Clauses(dbresolver.Read)
}

func (s serviceCustomerUserDo) WriteDB() IServiceCustomerUserDo {
	return s.Clauses(dbresolver.Write)
}

func (s serviceCustomerUserDo) Session(config *gorm.Session) IServiceCustomerUserDo {
	return s.withDO(s.DO.Session(config))
}

func (s serviceCustomerUserDo) Clauses(conds ...clause.Expression) IServiceCustomerUserDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serviceCustomerUserDo) Returning(value interface{}, columns ...string) IServiceCustomerUserDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serviceCustomerUserDo) Not(conds ...gen.Condition) IServiceCustomerUserDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serviceCustomerUserDo) Or(conds ...gen.Condition) IServiceCustomerUserDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serviceCustomerUserDo) Select(conds ...field.Expr) IServiceCustomerUserDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serviceCustomerUserDo) Where(conds ...gen.Condition) IServiceCustomerUserDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serviceCustomerUserDo) Order(conds ...field.Expr) IServiceCustomerUserDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serviceCustomerUserDo) Distinct(cols ...field.Expr) IServiceCustomerUserDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serviceCustomerUserDo) Omit(cols ...field.Expr) IServiceCustomerUserDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serviceCustomerUserDo) Join(table schema.Tabler, on ...field.Expr) IServiceCustomerUserDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serviceCustomerUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServiceCustomerUserDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serviceCustomerUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IServiceCustomerUserDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serviceCustomerUserDo) Group(cols ...field.Expr) IServiceCustomerUserDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serviceCustomerUserDo) Having(conds ...gen.Condition) IServiceCustomerUserDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serviceCustomerUserDo) Limit(limit int) IServiceCustomerUserDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serviceCustomerUserDo) Offset(offset int) IServiceCustomerUserDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serviceCustomerUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServiceCustomerUserDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serviceCustomerUserDo) Unscoped() IServiceCustomerUserDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serviceCustomerUserDo) Create(values ...*model.ServiceCustomerUser) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serviceCustomerUserDo) CreateInBatches(values []*model.ServiceCustomerUser, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serviceCustomerUserDo) Save(values ...*model.ServiceCustomerUser) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serviceCustomerUserDo) First() (*model.ServiceCustomerUser, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceCustomerUser), nil
	}
}

func (s serviceCustomerUserDo) Take() (*model.ServiceCustomerUser, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceCustomerUser), nil
	}
}

func (s serviceCustomerUserDo) Last() (*model.ServiceCustomerUser, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceCustomerUser), nil
	}
}

func (s serviceCustomerUserDo) Find() ([]*model.ServiceCustomerUser, error) {
	result, err := s.DO.Find()
	return result.([]*model.ServiceCustomerUser), err
}

func (s serviceCustomerUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServiceCustomerUser, err error) {
	buf := make([]*model.ServiceCustomerUser, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serviceCustomerUserDo) FindInBatches(result *[]*model.ServiceCustomerUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serviceCustomerUserDo) Attrs(attrs ...field.AssignExpr) IServiceCustomerUserDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serviceCustomerUserDo) Assign(attrs ...field.AssignExpr) IServiceCustomerUserDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serviceCustomerUserDo) Joins(fields ...field.RelationField) IServiceCustomerUserDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serviceCustomerUserDo) Preload(fields ...field.RelationField) IServiceCustomerUserDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serviceCustomerUserDo) FirstOrInit() (*model.ServiceCustomerUser, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceCustomerUser), nil
	}
}

func (s serviceCustomerUserDo) FirstOrCreate() (*model.ServiceCustomerUser, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceCustomerUser), nil
	}
}

func (s serviceCustomerUserDo) FindByPage(offset int, limit int) (result []*model.ServiceCustomerUser, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serviceCustomerUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serviceCustomerUserDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serviceCustomerUserDo) Delete(models ...*model.ServiceCustomerUser) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serviceCustomerUserDo) withDO(do gen.Dao) *serviceCustomerUserDo {
	s.DO = *do.(*gen.DO)
	return s
}
