// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newCalendarAppointmentTicket(db *gorm.DB, opts ...gen.DOOption) calendarAppointmentTicket {
	_calendarAppointmentTicket := calendarAppointmentTicket{}

	_calendarAppointmentTicket.calendarAppointmentTicketDo.UseDB(db, opts...)
	_calendarAppointmentTicket.calendarAppointmentTicketDo.UseModel(&model.CalendarAppointmentTicket{})

	tableName := _calendarAppointmentTicket.calendarAppointmentTicketDo.TableName()
	_calendarAppointmentTicket.ALL = field.NewAsterisk(tableName)
	_calendarAppointmentTicket.CalendarID = field.NewInt64(tableName, "calendar_id")
	_calendarAppointmentTicket.TicketID = field.NewInt64(tableName, "ticket_id")
	_calendarAppointmentTicket.RuleID = field.NewString(tableName, "rule_id")
	_calendarAppointmentTicket.AppointmentID = field.NewInt64(tableName, "appointment_id")

	_calendarAppointmentTicket.fillFieldMap()

	return _calendarAppointmentTicket
}

type calendarAppointmentTicket struct {
	calendarAppointmentTicketDo

	ALL           field.Asterisk
	CalendarID    field.Int64
	TicketID      field.Int64
	RuleID        field.String
	AppointmentID field.Int64

	fieldMap map[string]field.Expr
}

func (c calendarAppointmentTicket) Table(newTableName string) *calendarAppointmentTicket {
	c.calendarAppointmentTicketDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c calendarAppointmentTicket) As(alias string) *calendarAppointmentTicket {
	c.calendarAppointmentTicketDo.DO = *(c.calendarAppointmentTicketDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *calendarAppointmentTicket) updateTableName(table string) *calendarAppointmentTicket {
	c.ALL = field.NewAsterisk(table)
	c.CalendarID = field.NewInt64(table, "calendar_id")
	c.TicketID = field.NewInt64(table, "ticket_id")
	c.RuleID = field.NewString(table, "rule_id")
	c.AppointmentID = field.NewInt64(table, "appointment_id")

	c.fillFieldMap()

	return c
}

func (c *calendarAppointmentTicket) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *calendarAppointmentTicket) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 4)
	c.fieldMap["calendar_id"] = c.CalendarID
	c.fieldMap["ticket_id"] = c.TicketID
	c.fieldMap["rule_id"] = c.RuleID
	c.fieldMap["appointment_id"] = c.AppointmentID
}

func (c calendarAppointmentTicket) clone(db *gorm.DB) calendarAppointmentTicket {
	c.calendarAppointmentTicketDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c calendarAppointmentTicket) replaceDB(db *gorm.DB) calendarAppointmentTicket {
	c.calendarAppointmentTicketDo.ReplaceDB(db)
	return c
}

type calendarAppointmentTicketDo struct{ gen.DO }

type ICalendarAppointmentTicketDo interface {
	gen.SubQuery
	Debug() ICalendarAppointmentTicketDo
	WithContext(ctx context.Context) ICalendarAppointmentTicketDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICalendarAppointmentTicketDo
	WriteDB() ICalendarAppointmentTicketDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICalendarAppointmentTicketDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICalendarAppointmentTicketDo
	Not(conds ...gen.Condition) ICalendarAppointmentTicketDo
	Or(conds ...gen.Condition) ICalendarAppointmentTicketDo
	Select(conds ...field.Expr) ICalendarAppointmentTicketDo
	Where(conds ...gen.Condition) ICalendarAppointmentTicketDo
	Order(conds ...field.Expr) ICalendarAppointmentTicketDo
	Distinct(cols ...field.Expr) ICalendarAppointmentTicketDo
	Omit(cols ...field.Expr) ICalendarAppointmentTicketDo
	Join(table schema.Tabler, on ...field.Expr) ICalendarAppointmentTicketDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICalendarAppointmentTicketDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICalendarAppointmentTicketDo
	Group(cols ...field.Expr) ICalendarAppointmentTicketDo
	Having(conds ...gen.Condition) ICalendarAppointmentTicketDo
	Limit(limit int) ICalendarAppointmentTicketDo
	Offset(offset int) ICalendarAppointmentTicketDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICalendarAppointmentTicketDo
	Unscoped() ICalendarAppointmentTicketDo
	Create(values ...*model.CalendarAppointmentTicket) error
	CreateInBatches(values []*model.CalendarAppointmentTicket, batchSize int) error
	Save(values ...*model.CalendarAppointmentTicket) error
	First() (*model.CalendarAppointmentTicket, error)
	Take() (*model.CalendarAppointmentTicket, error)
	Last() (*model.CalendarAppointmentTicket, error)
	Find() ([]*model.CalendarAppointmentTicket, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CalendarAppointmentTicket, err error)
	FindInBatches(result *[]*model.CalendarAppointmentTicket, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CalendarAppointmentTicket) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICalendarAppointmentTicketDo
	Assign(attrs ...field.AssignExpr) ICalendarAppointmentTicketDo
	Joins(fields ...field.RelationField) ICalendarAppointmentTicketDo
	Preload(fields ...field.RelationField) ICalendarAppointmentTicketDo
	FirstOrInit() (*model.CalendarAppointmentTicket, error)
	FirstOrCreate() (*model.CalendarAppointmentTicket, error)
	FindByPage(offset int, limit int) (result []*model.CalendarAppointmentTicket, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICalendarAppointmentTicketDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c calendarAppointmentTicketDo) Debug() ICalendarAppointmentTicketDo {
	return c.withDO(c.DO.Debug())
}

func (c calendarAppointmentTicketDo) WithContext(ctx context.Context) ICalendarAppointmentTicketDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c calendarAppointmentTicketDo) ReadDB() ICalendarAppointmentTicketDo {
	return c.Clauses(dbresolver.Read)
}

func (c calendarAppointmentTicketDo) WriteDB() ICalendarAppointmentTicketDo {
	return c.Clauses(dbresolver.Write)
}

func (c calendarAppointmentTicketDo) Session(config *gorm.Session) ICalendarAppointmentTicketDo {
	return c.withDO(c.DO.Session(config))
}

func (c calendarAppointmentTicketDo) Clauses(conds ...clause.Expression) ICalendarAppointmentTicketDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c calendarAppointmentTicketDo) Returning(value interface{}, columns ...string) ICalendarAppointmentTicketDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c calendarAppointmentTicketDo) Not(conds ...gen.Condition) ICalendarAppointmentTicketDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c calendarAppointmentTicketDo) Or(conds ...gen.Condition) ICalendarAppointmentTicketDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c calendarAppointmentTicketDo) Select(conds ...field.Expr) ICalendarAppointmentTicketDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c calendarAppointmentTicketDo) Where(conds ...gen.Condition) ICalendarAppointmentTicketDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c calendarAppointmentTicketDo) Order(conds ...field.Expr) ICalendarAppointmentTicketDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c calendarAppointmentTicketDo) Distinct(cols ...field.Expr) ICalendarAppointmentTicketDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c calendarAppointmentTicketDo) Omit(cols ...field.Expr) ICalendarAppointmentTicketDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c calendarAppointmentTicketDo) Join(table schema.Tabler, on ...field.Expr) ICalendarAppointmentTicketDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c calendarAppointmentTicketDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICalendarAppointmentTicketDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c calendarAppointmentTicketDo) RightJoin(table schema.Tabler, on ...field.Expr) ICalendarAppointmentTicketDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c calendarAppointmentTicketDo) Group(cols ...field.Expr) ICalendarAppointmentTicketDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c calendarAppointmentTicketDo) Having(conds ...gen.Condition) ICalendarAppointmentTicketDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c calendarAppointmentTicketDo) Limit(limit int) ICalendarAppointmentTicketDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c calendarAppointmentTicketDo) Offset(offset int) ICalendarAppointmentTicketDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c calendarAppointmentTicketDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICalendarAppointmentTicketDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c calendarAppointmentTicketDo) Unscoped() ICalendarAppointmentTicketDo {
	return c.withDO(c.DO.Unscoped())
}

func (c calendarAppointmentTicketDo) Create(values ...*model.CalendarAppointmentTicket) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c calendarAppointmentTicketDo) CreateInBatches(values []*model.CalendarAppointmentTicket, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c calendarAppointmentTicketDo) Save(values ...*model.CalendarAppointmentTicket) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c calendarAppointmentTicketDo) First() (*model.CalendarAppointmentTicket, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CalendarAppointmentTicket), nil
	}
}

func (c calendarAppointmentTicketDo) Take() (*model.CalendarAppointmentTicket, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CalendarAppointmentTicket), nil
	}
}

func (c calendarAppointmentTicketDo) Last() (*model.CalendarAppointmentTicket, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CalendarAppointmentTicket), nil
	}
}

func (c calendarAppointmentTicketDo) Find() ([]*model.CalendarAppointmentTicket, error) {
	result, err := c.DO.Find()
	return result.([]*model.CalendarAppointmentTicket), err
}

func (c calendarAppointmentTicketDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CalendarAppointmentTicket, err error) {
	buf := make([]*model.CalendarAppointmentTicket, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c calendarAppointmentTicketDo) FindInBatches(result *[]*model.CalendarAppointmentTicket, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c calendarAppointmentTicketDo) Attrs(attrs ...field.AssignExpr) ICalendarAppointmentTicketDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c calendarAppointmentTicketDo) Assign(attrs ...field.AssignExpr) ICalendarAppointmentTicketDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c calendarAppointmentTicketDo) Joins(fields ...field.RelationField) ICalendarAppointmentTicketDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c calendarAppointmentTicketDo) Preload(fields ...field.RelationField) ICalendarAppointmentTicketDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c calendarAppointmentTicketDo) FirstOrInit() (*model.CalendarAppointmentTicket, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CalendarAppointmentTicket), nil
	}
}

func (c calendarAppointmentTicketDo) FirstOrCreate() (*model.CalendarAppointmentTicket, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CalendarAppointmentTicket), nil
	}
}

func (c calendarAppointmentTicketDo) FindByPage(offset int, limit int) (result []*model.CalendarAppointmentTicket, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c calendarAppointmentTicketDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c calendarAppointmentTicketDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c calendarAppointmentTicketDo) Delete(models ...*model.CalendarAppointmentTicket) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *calendarAppointmentTicketDo) withDO(do gen.Dao) *calendarAppointmentTicketDo {
	c.DO = *do.(*gen.DO)
	return c
}
