// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newXMLStorage(db *gorm.DB, opts ...gen.DOOption) xMLStorage {
	_xMLStorage := xMLStorage{}

	_xMLStorage.xMLStorageDo.UseDB(db, opts...)
	_xMLStorage.xMLStorageDo.UseModel(&model.XMLStorage{})

	tableName := _xMLStorage.xMLStorageDo.TableName()
	_xMLStorage.ALL = field.NewAsterisk(tableName)
	_xMLStorage.XMLType = field.NewString(tableName, "xml_type")
	_xMLStorage.XMLKey = field.NewString(tableName, "xml_key")
	_xMLStorage.XMLContentKey = field.NewString(tableName, "xml_content_key")
	_xMLStorage.XMLContentValue = field.NewString(tableName, "xml_content_value")

	_xMLStorage.fillFieldMap()

	return _xMLStorage
}

type xMLStorage struct {
	xMLStorageDo

	ALL             field.Asterisk
	XMLType         field.String
	XMLKey          field.String
	XMLContentKey   field.String
	XMLContentValue field.String

	fieldMap map[string]field.Expr
}

func (x xMLStorage) Table(newTableName string) *xMLStorage {
	x.xMLStorageDo.UseTable(newTableName)
	return x.updateTableName(newTableName)
}

func (x xMLStorage) As(alias string) *xMLStorage {
	x.xMLStorageDo.DO = *(x.xMLStorageDo.As(alias).(*gen.DO))
	return x.updateTableName(alias)
}

func (x *xMLStorage) updateTableName(table string) *xMLStorage {
	x.ALL = field.NewAsterisk(table)
	x.XMLType = field.NewString(table, "xml_type")
	x.XMLKey = field.NewString(table, "xml_key")
	x.XMLContentKey = field.NewString(table, "xml_content_key")
	x.XMLContentValue = field.NewString(table, "xml_content_value")

	x.fillFieldMap()

	return x
}

func (x *xMLStorage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := x.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (x *xMLStorage) fillFieldMap() {
	x.fieldMap = make(map[string]field.Expr, 4)
	x.fieldMap["xml_type"] = x.XMLType
	x.fieldMap["xml_key"] = x.XMLKey
	x.fieldMap["xml_content_key"] = x.XMLContentKey
	x.fieldMap["xml_content_value"] = x.XMLContentValue
}

func (x xMLStorage) clone(db *gorm.DB) xMLStorage {
	x.xMLStorageDo.ReplaceConnPool(db.Statement.ConnPool)
	return x
}

func (x xMLStorage) replaceDB(db *gorm.DB) xMLStorage {
	x.xMLStorageDo.ReplaceDB(db)
	return x
}

type xMLStorageDo struct{ gen.DO }

type IXMLStorageDo interface {
	gen.SubQuery
	Debug() IXMLStorageDo
	WithContext(ctx context.Context) IXMLStorageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IXMLStorageDo
	WriteDB() IXMLStorageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IXMLStorageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IXMLStorageDo
	Not(conds ...gen.Condition) IXMLStorageDo
	Or(conds ...gen.Condition) IXMLStorageDo
	Select(conds ...field.Expr) IXMLStorageDo
	Where(conds ...gen.Condition) IXMLStorageDo
	Order(conds ...field.Expr) IXMLStorageDo
	Distinct(cols ...field.Expr) IXMLStorageDo
	Omit(cols ...field.Expr) IXMLStorageDo
	Join(table schema.Tabler, on ...field.Expr) IXMLStorageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IXMLStorageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IXMLStorageDo
	Group(cols ...field.Expr) IXMLStorageDo
	Having(conds ...gen.Condition) IXMLStorageDo
	Limit(limit int) IXMLStorageDo
	Offset(offset int) IXMLStorageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IXMLStorageDo
	Unscoped() IXMLStorageDo
	Create(values ...*model.XMLStorage) error
	CreateInBatches(values []*model.XMLStorage, batchSize int) error
	Save(values ...*model.XMLStorage) error
	First() (*model.XMLStorage, error)
	Take() (*model.XMLStorage, error)
	Last() (*model.XMLStorage, error)
	Find() ([]*model.XMLStorage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.XMLStorage, err error)
	FindInBatches(result *[]*model.XMLStorage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.XMLStorage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IXMLStorageDo
	Assign(attrs ...field.AssignExpr) IXMLStorageDo
	Joins(fields ...field.RelationField) IXMLStorageDo
	Preload(fields ...field.RelationField) IXMLStorageDo
	FirstOrInit() (*model.XMLStorage, error)
	FirstOrCreate() (*model.XMLStorage, error)
	FindByPage(offset int, limit int) (result []*model.XMLStorage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IXMLStorageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (x xMLStorageDo) Debug() IXMLStorageDo {
	return x.withDO(x.DO.Debug())
}

func (x xMLStorageDo) WithContext(ctx context.Context) IXMLStorageDo {
	return x.withDO(x.DO.WithContext(ctx))
}

func (x xMLStorageDo) ReadDB() IXMLStorageDo {
	return x.Clauses(dbresolver.Read)
}

func (x xMLStorageDo) WriteDB() IXMLStorageDo {
	return x.Clauses(dbresolver.Write)
}

func (x xMLStorageDo) Session(config *gorm.Session) IXMLStorageDo {
	return x.withDO(x.DO.Session(config))
}

func (x xMLStorageDo) Clauses(conds ...clause.Expression) IXMLStorageDo {
	return x.withDO(x.DO.Clauses(conds...))
}

func (x xMLStorageDo) Returning(value interface{}, columns ...string) IXMLStorageDo {
	return x.withDO(x.DO.Returning(value, columns...))
}

func (x xMLStorageDo) Not(conds ...gen.Condition) IXMLStorageDo {
	return x.withDO(x.DO.Not(conds...))
}

func (x xMLStorageDo) Or(conds ...gen.Condition) IXMLStorageDo {
	return x.withDO(x.DO.Or(conds...))
}

func (x xMLStorageDo) Select(conds ...field.Expr) IXMLStorageDo {
	return x.withDO(x.DO.Select(conds...))
}

func (x xMLStorageDo) Where(conds ...gen.Condition) IXMLStorageDo {
	return x.withDO(x.DO.Where(conds...))
}

func (x xMLStorageDo) Order(conds ...field.Expr) IXMLStorageDo {
	return x.withDO(x.DO.Order(conds...))
}

func (x xMLStorageDo) Distinct(cols ...field.Expr) IXMLStorageDo {
	return x.withDO(x.DO.Distinct(cols...))
}

func (x xMLStorageDo) Omit(cols ...field.Expr) IXMLStorageDo {
	return x.withDO(x.DO.Omit(cols...))
}

func (x xMLStorageDo) Join(table schema.Tabler, on ...field.Expr) IXMLStorageDo {
	return x.withDO(x.DO.Join(table, on...))
}

func (x xMLStorageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IXMLStorageDo {
	return x.withDO(x.DO.LeftJoin(table, on...))
}

func (x xMLStorageDo) RightJoin(table schema.Tabler, on ...field.Expr) IXMLStorageDo {
	return x.withDO(x.DO.RightJoin(table, on...))
}

func (x xMLStorageDo) Group(cols ...field.Expr) IXMLStorageDo {
	return x.withDO(x.DO.Group(cols...))
}

func (x xMLStorageDo) Having(conds ...gen.Condition) IXMLStorageDo {
	return x.withDO(x.DO.Having(conds...))
}

func (x xMLStorageDo) Limit(limit int) IXMLStorageDo {
	return x.withDO(x.DO.Limit(limit))
}

func (x xMLStorageDo) Offset(offset int) IXMLStorageDo {
	return x.withDO(x.DO.Offset(offset))
}

func (x xMLStorageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IXMLStorageDo {
	return x.withDO(x.DO.Scopes(funcs...))
}

func (x xMLStorageDo) Unscoped() IXMLStorageDo {
	return x.withDO(x.DO.Unscoped())
}

func (x xMLStorageDo) Create(values ...*model.XMLStorage) error {
	if len(values) == 0 {
		return nil
	}
	return x.DO.Create(values)
}

func (x xMLStorageDo) CreateInBatches(values []*model.XMLStorage, batchSize int) error {
	return x.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (x xMLStorageDo) Save(values ...*model.XMLStorage) error {
	if len(values) == 0 {
		return nil
	}
	return x.DO.Save(values)
}

func (x xMLStorageDo) First() (*model.XMLStorage, error) {
	if result, err := x.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.XMLStorage), nil
	}
}

func (x xMLStorageDo) Take() (*model.XMLStorage, error) {
	if result, err := x.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.XMLStorage), nil
	}
}

func (x xMLStorageDo) Last() (*model.XMLStorage, error) {
	if result, err := x.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.XMLStorage), nil
	}
}

func (x xMLStorageDo) Find() ([]*model.XMLStorage, error) {
	result, err := x.DO.Find()
	return result.([]*model.XMLStorage), err
}

func (x xMLStorageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.XMLStorage, err error) {
	buf := make([]*model.XMLStorage, 0, batchSize)
	err = x.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (x xMLStorageDo) FindInBatches(result *[]*model.XMLStorage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return x.DO.FindInBatches(result, batchSize, fc)
}

func (x xMLStorageDo) Attrs(attrs ...field.AssignExpr) IXMLStorageDo {
	return x.withDO(x.DO.Attrs(attrs...))
}

func (x xMLStorageDo) Assign(attrs ...field.AssignExpr) IXMLStorageDo {
	return x.withDO(x.DO.Assign(attrs...))
}

func (x xMLStorageDo) Joins(fields ...field.RelationField) IXMLStorageDo {
	for _, _f := range fields {
		x = *x.withDO(x.DO.Joins(_f))
	}
	return &x
}

func (x xMLStorageDo) Preload(fields ...field.RelationField) IXMLStorageDo {
	for _, _f := range fields {
		x = *x.withDO(x.DO.Preload(_f))
	}
	return &x
}

func (x xMLStorageDo) FirstOrInit() (*model.XMLStorage, error) {
	if result, err := x.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.XMLStorage), nil
	}
}

func (x xMLStorageDo) FirstOrCreate() (*model.XMLStorage, error) {
	if result, err := x.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.XMLStorage), nil
	}
}

func (x xMLStorageDo) FindByPage(offset int, limit int) (result []*model.XMLStorage, count int64, err error) {
	result, err = x.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = x.Offset(-1).Limit(-1).Count()
	return
}

func (x xMLStorageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = x.Count()
	if err != nil {
		return
	}

	err = x.Offset(offset).Limit(limit).Scan(result)
	return
}

func (x xMLStorageDo) Scan(result interface{}) (err error) {
	return x.DO.Scan(result)
}

func (x xMLStorageDo) Delete(models ...*model.XMLStorage) (result gen.ResultInfo, err error) {
	return x.DO.Delete(models)
}

func (x *xMLStorageDo) withDO(do gen.Dao) *xMLStorageDo {
	x.DO = *do.(*gen.DO)
	return x
}
