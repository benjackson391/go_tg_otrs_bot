// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newSystemDatum(db *gorm.DB, opts ...gen.DOOption) systemDatum {
	_systemDatum := systemDatum{}

	_systemDatum.systemDatumDo.UseDB(db, opts...)
	_systemDatum.systemDatumDo.UseModel(&model.SystemDatum{})

	tableName := _systemDatum.systemDatumDo.TableName()
	_systemDatum.ALL = field.NewAsterisk(tableName)
	_systemDatum.DataKey = field.NewString(tableName, "data_key")
	_systemDatum.DataValue = field.NewBytes(tableName, "data_value")
	_systemDatum.CreateTime = field.NewTime(tableName, "create_time")
	_systemDatum.CreateBy = field.NewInt32(tableName, "create_by")
	_systemDatum.ChangeTime = field.NewTime(tableName, "change_time")
	_systemDatum.ChangeBy = field.NewInt32(tableName, "change_by")

	_systemDatum.fillFieldMap()

	return _systemDatum
}

type systemDatum struct {
	systemDatumDo

	ALL        field.Asterisk
	DataKey    field.String
	DataValue  field.Bytes
	CreateTime field.Time
	CreateBy   field.Int32
	ChangeTime field.Time
	ChangeBy   field.Int32

	fieldMap map[string]field.Expr
}

func (s systemDatum) Table(newTableName string) *systemDatum {
	s.systemDatumDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systemDatum) As(alias string) *systemDatum {
	s.systemDatumDo.DO = *(s.systemDatumDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systemDatum) updateTableName(table string) *systemDatum {
	s.ALL = field.NewAsterisk(table)
	s.DataKey = field.NewString(table, "data_key")
	s.DataValue = field.NewBytes(table, "data_value")
	s.CreateTime = field.NewTime(table, "create_time")
	s.CreateBy = field.NewInt32(table, "create_by")
	s.ChangeTime = field.NewTime(table, "change_time")
	s.ChangeBy = field.NewInt32(table, "change_by")

	s.fillFieldMap()

	return s
}

func (s *systemDatum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systemDatum) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["data_key"] = s.DataKey
	s.fieldMap["data_value"] = s.DataValue
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["change_time"] = s.ChangeTime
	s.fieldMap["change_by"] = s.ChangeBy
}

func (s systemDatum) clone(db *gorm.DB) systemDatum {
	s.systemDatumDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s systemDatum) replaceDB(db *gorm.DB) systemDatum {
	s.systemDatumDo.ReplaceDB(db)
	return s
}

type systemDatumDo struct{ gen.DO }

type ISystemDatumDo interface {
	gen.SubQuery
	Debug() ISystemDatumDo
	WithContext(ctx context.Context) ISystemDatumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISystemDatumDo
	WriteDB() ISystemDatumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISystemDatumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISystemDatumDo
	Not(conds ...gen.Condition) ISystemDatumDo
	Or(conds ...gen.Condition) ISystemDatumDo
	Select(conds ...field.Expr) ISystemDatumDo
	Where(conds ...gen.Condition) ISystemDatumDo
	Order(conds ...field.Expr) ISystemDatumDo
	Distinct(cols ...field.Expr) ISystemDatumDo
	Omit(cols ...field.Expr) ISystemDatumDo
	Join(table schema.Tabler, on ...field.Expr) ISystemDatumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISystemDatumDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISystemDatumDo
	Group(cols ...field.Expr) ISystemDatumDo
	Having(conds ...gen.Condition) ISystemDatumDo
	Limit(limit int) ISystemDatumDo
	Offset(offset int) ISystemDatumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemDatumDo
	Unscoped() ISystemDatumDo
	Create(values ...*model.SystemDatum) error
	CreateInBatches(values []*model.SystemDatum, batchSize int) error
	Save(values ...*model.SystemDatum) error
	First() (*model.SystemDatum, error)
	Take() (*model.SystemDatum, error)
	Last() (*model.SystemDatum, error)
	Find() ([]*model.SystemDatum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemDatum, err error)
	FindInBatches(result *[]*model.SystemDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SystemDatum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISystemDatumDo
	Assign(attrs ...field.AssignExpr) ISystemDatumDo
	Joins(fields ...field.RelationField) ISystemDatumDo
	Preload(fields ...field.RelationField) ISystemDatumDo
	FirstOrInit() (*model.SystemDatum, error)
	FirstOrCreate() (*model.SystemDatum, error)
	FindByPage(offset int, limit int) (result []*model.SystemDatum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISystemDatumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s systemDatumDo) Debug() ISystemDatumDo {
	return s.withDO(s.DO.Debug())
}

func (s systemDatumDo) WithContext(ctx context.Context) ISystemDatumDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systemDatumDo) ReadDB() ISystemDatumDo {
	return s.Clauses(dbresolver.Read)
}

func (s systemDatumDo) WriteDB() ISystemDatumDo {
	return s.Clauses(dbresolver.Write)
}

func (s systemDatumDo) Session(config *gorm.Session) ISystemDatumDo {
	return s.withDO(s.DO.Session(config))
}

func (s systemDatumDo) Clauses(conds ...clause.Expression) ISystemDatumDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systemDatumDo) Returning(value interface{}, columns ...string) ISystemDatumDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systemDatumDo) Not(conds ...gen.Condition) ISystemDatumDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systemDatumDo) Or(conds ...gen.Condition) ISystemDatumDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systemDatumDo) Select(conds ...field.Expr) ISystemDatumDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systemDatumDo) Where(conds ...gen.Condition) ISystemDatumDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systemDatumDo) Order(conds ...field.Expr) ISystemDatumDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systemDatumDo) Distinct(cols ...field.Expr) ISystemDatumDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systemDatumDo) Omit(cols ...field.Expr) ISystemDatumDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systemDatumDo) Join(table schema.Tabler, on ...field.Expr) ISystemDatumDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systemDatumDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISystemDatumDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systemDatumDo) RightJoin(table schema.Tabler, on ...field.Expr) ISystemDatumDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systemDatumDo) Group(cols ...field.Expr) ISystemDatumDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systemDatumDo) Having(conds ...gen.Condition) ISystemDatumDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systemDatumDo) Limit(limit int) ISystemDatumDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systemDatumDo) Offset(offset int) ISystemDatumDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systemDatumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemDatumDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systemDatumDo) Unscoped() ISystemDatumDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systemDatumDo) Create(values ...*model.SystemDatum) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systemDatumDo) CreateInBatches(values []*model.SystemDatum, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systemDatumDo) Save(values ...*model.SystemDatum) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systemDatumDo) First() (*model.SystemDatum, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemDatum), nil
	}
}

func (s systemDatumDo) Take() (*model.SystemDatum, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemDatum), nil
	}
}

func (s systemDatumDo) Last() (*model.SystemDatum, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemDatum), nil
	}
}

func (s systemDatumDo) Find() ([]*model.SystemDatum, error) {
	result, err := s.DO.Find()
	return result.([]*model.SystemDatum), err
}

func (s systemDatumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemDatum, err error) {
	buf := make([]*model.SystemDatum, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systemDatumDo) FindInBatches(result *[]*model.SystemDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systemDatumDo) Attrs(attrs ...field.AssignExpr) ISystemDatumDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systemDatumDo) Assign(attrs ...field.AssignExpr) ISystemDatumDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systemDatumDo) Joins(fields ...field.RelationField) ISystemDatumDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systemDatumDo) Preload(fields ...field.RelationField) ISystemDatumDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systemDatumDo) FirstOrInit() (*model.SystemDatum, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemDatum), nil
	}
}

func (s systemDatumDo) FirstOrCreate() (*model.SystemDatum, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemDatum), nil
	}
}

func (s systemDatumDo) FindByPage(offset int, limit int) (result []*model.SystemDatum, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systemDatumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systemDatumDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systemDatumDo) Delete(models ...*model.SystemDatum) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systemDatumDo) withDO(do gen.Dao) *systemDatumDo {
	s.DO = *do.(*gen.DO)
	return s
}
