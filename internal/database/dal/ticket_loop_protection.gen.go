// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newTicketLoopProtection(db *gorm.DB, opts ...gen.DOOption) ticketLoopProtection {
	_ticketLoopProtection := ticketLoopProtection{}

	_ticketLoopProtection.ticketLoopProtectionDo.UseDB(db, opts...)
	_ticketLoopProtection.ticketLoopProtectionDo.UseModel(&model.TicketLoopProtection{})

	tableName := _ticketLoopProtection.ticketLoopProtectionDo.TableName()
	_ticketLoopProtection.ALL = field.NewAsterisk(tableName)
	_ticketLoopProtection.SentTo = field.NewString(tableName, "sent_to")
	_ticketLoopProtection.SentDate = field.NewString(tableName, "sent_date")

	_ticketLoopProtection.fillFieldMap()

	return _ticketLoopProtection
}

type ticketLoopProtection struct {
	ticketLoopProtectionDo

	ALL      field.Asterisk
	SentTo   field.String
	SentDate field.String

	fieldMap map[string]field.Expr
}

func (t ticketLoopProtection) Table(newTableName string) *ticketLoopProtection {
	t.ticketLoopProtectionDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t ticketLoopProtection) As(alias string) *ticketLoopProtection {
	t.ticketLoopProtectionDo.DO = *(t.ticketLoopProtectionDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *ticketLoopProtection) updateTableName(table string) *ticketLoopProtection {
	t.ALL = field.NewAsterisk(table)
	t.SentTo = field.NewString(table, "sent_to")
	t.SentDate = field.NewString(table, "sent_date")

	t.fillFieldMap()

	return t
}

func (t *ticketLoopProtection) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *ticketLoopProtection) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 2)
	t.fieldMap["sent_to"] = t.SentTo
	t.fieldMap["sent_date"] = t.SentDate
}

func (t ticketLoopProtection) clone(db *gorm.DB) ticketLoopProtection {
	t.ticketLoopProtectionDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t ticketLoopProtection) replaceDB(db *gorm.DB) ticketLoopProtection {
	t.ticketLoopProtectionDo.ReplaceDB(db)
	return t
}

type ticketLoopProtectionDo struct{ gen.DO }

type ITicketLoopProtectionDo interface {
	gen.SubQuery
	Debug() ITicketLoopProtectionDo
	WithContext(ctx context.Context) ITicketLoopProtectionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITicketLoopProtectionDo
	WriteDB() ITicketLoopProtectionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITicketLoopProtectionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITicketLoopProtectionDo
	Not(conds ...gen.Condition) ITicketLoopProtectionDo
	Or(conds ...gen.Condition) ITicketLoopProtectionDo
	Select(conds ...field.Expr) ITicketLoopProtectionDo
	Where(conds ...gen.Condition) ITicketLoopProtectionDo
	Order(conds ...field.Expr) ITicketLoopProtectionDo
	Distinct(cols ...field.Expr) ITicketLoopProtectionDo
	Omit(cols ...field.Expr) ITicketLoopProtectionDo
	Join(table schema.Tabler, on ...field.Expr) ITicketLoopProtectionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITicketLoopProtectionDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITicketLoopProtectionDo
	Group(cols ...field.Expr) ITicketLoopProtectionDo
	Having(conds ...gen.Condition) ITicketLoopProtectionDo
	Limit(limit int) ITicketLoopProtectionDo
	Offset(offset int) ITicketLoopProtectionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITicketLoopProtectionDo
	Unscoped() ITicketLoopProtectionDo
	Create(values ...*model.TicketLoopProtection) error
	CreateInBatches(values []*model.TicketLoopProtection, batchSize int) error
	Save(values ...*model.TicketLoopProtection) error
	First() (*model.TicketLoopProtection, error)
	Take() (*model.TicketLoopProtection, error)
	Last() (*model.TicketLoopProtection, error)
	Find() ([]*model.TicketLoopProtection, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TicketLoopProtection, err error)
	FindInBatches(result *[]*model.TicketLoopProtection, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TicketLoopProtection) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITicketLoopProtectionDo
	Assign(attrs ...field.AssignExpr) ITicketLoopProtectionDo
	Joins(fields ...field.RelationField) ITicketLoopProtectionDo
	Preload(fields ...field.RelationField) ITicketLoopProtectionDo
	FirstOrInit() (*model.TicketLoopProtection, error)
	FirstOrCreate() (*model.TicketLoopProtection, error)
	FindByPage(offset int, limit int) (result []*model.TicketLoopProtection, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITicketLoopProtectionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t ticketLoopProtectionDo) Debug() ITicketLoopProtectionDo {
	return t.withDO(t.DO.Debug())
}

func (t ticketLoopProtectionDo) WithContext(ctx context.Context) ITicketLoopProtectionDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t ticketLoopProtectionDo) ReadDB() ITicketLoopProtectionDo {
	return t.Clauses(dbresolver.Read)
}

func (t ticketLoopProtectionDo) WriteDB() ITicketLoopProtectionDo {
	return t.Clauses(dbresolver.Write)
}

func (t ticketLoopProtectionDo) Session(config *gorm.Session) ITicketLoopProtectionDo {
	return t.withDO(t.DO.Session(config))
}

func (t ticketLoopProtectionDo) Clauses(conds ...clause.Expression) ITicketLoopProtectionDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t ticketLoopProtectionDo) Returning(value interface{}, columns ...string) ITicketLoopProtectionDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t ticketLoopProtectionDo) Not(conds ...gen.Condition) ITicketLoopProtectionDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t ticketLoopProtectionDo) Or(conds ...gen.Condition) ITicketLoopProtectionDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t ticketLoopProtectionDo) Select(conds ...field.Expr) ITicketLoopProtectionDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t ticketLoopProtectionDo) Where(conds ...gen.Condition) ITicketLoopProtectionDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t ticketLoopProtectionDo) Order(conds ...field.Expr) ITicketLoopProtectionDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t ticketLoopProtectionDo) Distinct(cols ...field.Expr) ITicketLoopProtectionDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t ticketLoopProtectionDo) Omit(cols ...field.Expr) ITicketLoopProtectionDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t ticketLoopProtectionDo) Join(table schema.Tabler, on ...field.Expr) ITicketLoopProtectionDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t ticketLoopProtectionDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITicketLoopProtectionDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t ticketLoopProtectionDo) RightJoin(table schema.Tabler, on ...field.Expr) ITicketLoopProtectionDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t ticketLoopProtectionDo) Group(cols ...field.Expr) ITicketLoopProtectionDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t ticketLoopProtectionDo) Having(conds ...gen.Condition) ITicketLoopProtectionDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t ticketLoopProtectionDo) Limit(limit int) ITicketLoopProtectionDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t ticketLoopProtectionDo) Offset(offset int) ITicketLoopProtectionDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t ticketLoopProtectionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITicketLoopProtectionDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t ticketLoopProtectionDo) Unscoped() ITicketLoopProtectionDo {
	return t.withDO(t.DO.Unscoped())
}

func (t ticketLoopProtectionDo) Create(values ...*model.TicketLoopProtection) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t ticketLoopProtectionDo) CreateInBatches(values []*model.TicketLoopProtection, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t ticketLoopProtectionDo) Save(values ...*model.TicketLoopProtection) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t ticketLoopProtectionDo) First() (*model.TicketLoopProtection, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketLoopProtection), nil
	}
}

func (t ticketLoopProtectionDo) Take() (*model.TicketLoopProtection, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketLoopProtection), nil
	}
}

func (t ticketLoopProtectionDo) Last() (*model.TicketLoopProtection, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketLoopProtection), nil
	}
}

func (t ticketLoopProtectionDo) Find() ([]*model.TicketLoopProtection, error) {
	result, err := t.DO.Find()
	return result.([]*model.TicketLoopProtection), err
}

func (t ticketLoopProtectionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TicketLoopProtection, err error) {
	buf := make([]*model.TicketLoopProtection, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t ticketLoopProtectionDo) FindInBatches(result *[]*model.TicketLoopProtection, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t ticketLoopProtectionDo) Attrs(attrs ...field.AssignExpr) ITicketLoopProtectionDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t ticketLoopProtectionDo) Assign(attrs ...field.AssignExpr) ITicketLoopProtectionDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t ticketLoopProtectionDo) Joins(fields ...field.RelationField) ITicketLoopProtectionDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t ticketLoopProtectionDo) Preload(fields ...field.RelationField) ITicketLoopProtectionDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t ticketLoopProtectionDo) FirstOrInit() (*model.TicketLoopProtection, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketLoopProtection), nil
	}
}

func (t ticketLoopProtectionDo) FirstOrCreate() (*model.TicketLoopProtection, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketLoopProtection), nil
	}
}

func (t ticketLoopProtectionDo) FindByPage(offset int, limit int) (result []*model.TicketLoopProtection, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t ticketLoopProtectionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t ticketLoopProtectionDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t ticketLoopProtectionDo) Delete(models ...*model.TicketLoopProtection) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *ticketLoopProtectionDo) withDO(do gen.Dao) *ticketLoopProtectionDo {
	t.DO = *do.(*gen.DO)
	return t
}
