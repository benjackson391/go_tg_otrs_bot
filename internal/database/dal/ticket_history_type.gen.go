// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newTicketHistoryType(db *gorm.DB, opts ...gen.DOOption) ticketHistoryType {
	_ticketHistoryType := ticketHistoryType{}

	_ticketHistoryType.ticketHistoryTypeDo.UseDB(db, opts...)
	_ticketHistoryType.ticketHistoryTypeDo.UseModel(&model.TicketHistoryType{})

	tableName := _ticketHistoryType.ticketHistoryTypeDo.TableName()
	_ticketHistoryType.ALL = field.NewAsterisk(tableName)
	_ticketHistoryType.ID = field.NewInt32(tableName, "id")
	_ticketHistoryType.Name = field.NewString(tableName, "name")
	_ticketHistoryType.Comments = field.NewString(tableName, "comments")
	_ticketHistoryType.ValidID = field.NewInt32(tableName, "valid_id")
	_ticketHistoryType.CreateTime = field.NewTime(tableName, "create_time")
	_ticketHistoryType.CreateBy = field.NewInt32(tableName, "create_by")
	_ticketHistoryType.ChangeTime = field.NewTime(tableName, "change_time")
	_ticketHistoryType.ChangeBy = field.NewInt32(tableName, "change_by")

	_ticketHistoryType.fillFieldMap()

	return _ticketHistoryType
}

type ticketHistoryType struct {
	ticketHistoryTypeDo

	ALL        field.Asterisk
	ID         field.Int32
	Name       field.String
	Comments   field.String
	ValidID    field.Int32
	CreateTime field.Time
	CreateBy   field.Int32
	ChangeTime field.Time
	ChangeBy   field.Int32

	fieldMap map[string]field.Expr
}

func (t ticketHistoryType) Table(newTableName string) *ticketHistoryType {
	t.ticketHistoryTypeDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t ticketHistoryType) As(alias string) *ticketHistoryType {
	t.ticketHistoryTypeDo.DO = *(t.ticketHistoryTypeDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *ticketHistoryType) updateTableName(table string) *ticketHistoryType {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.Name = field.NewString(table, "name")
	t.Comments = field.NewString(table, "comments")
	t.ValidID = field.NewInt32(table, "valid_id")
	t.CreateTime = field.NewTime(table, "create_time")
	t.CreateBy = field.NewInt32(table, "create_by")
	t.ChangeTime = field.NewTime(table, "change_time")
	t.ChangeBy = field.NewInt32(table, "change_by")

	t.fillFieldMap()

	return t
}

func (t *ticketHistoryType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *ticketHistoryType) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["comments"] = t.Comments
	t.fieldMap["valid_id"] = t.ValidID
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["create_by"] = t.CreateBy
	t.fieldMap["change_time"] = t.ChangeTime
	t.fieldMap["change_by"] = t.ChangeBy
}

func (t ticketHistoryType) clone(db *gorm.DB) ticketHistoryType {
	t.ticketHistoryTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t ticketHistoryType) replaceDB(db *gorm.DB) ticketHistoryType {
	t.ticketHistoryTypeDo.ReplaceDB(db)
	return t
}

type ticketHistoryTypeDo struct{ gen.DO }

type ITicketHistoryTypeDo interface {
	gen.SubQuery
	Debug() ITicketHistoryTypeDo
	WithContext(ctx context.Context) ITicketHistoryTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITicketHistoryTypeDo
	WriteDB() ITicketHistoryTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITicketHistoryTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITicketHistoryTypeDo
	Not(conds ...gen.Condition) ITicketHistoryTypeDo
	Or(conds ...gen.Condition) ITicketHistoryTypeDo
	Select(conds ...field.Expr) ITicketHistoryTypeDo
	Where(conds ...gen.Condition) ITicketHistoryTypeDo
	Order(conds ...field.Expr) ITicketHistoryTypeDo
	Distinct(cols ...field.Expr) ITicketHistoryTypeDo
	Omit(cols ...field.Expr) ITicketHistoryTypeDo
	Join(table schema.Tabler, on ...field.Expr) ITicketHistoryTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITicketHistoryTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITicketHistoryTypeDo
	Group(cols ...field.Expr) ITicketHistoryTypeDo
	Having(conds ...gen.Condition) ITicketHistoryTypeDo
	Limit(limit int) ITicketHistoryTypeDo
	Offset(offset int) ITicketHistoryTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITicketHistoryTypeDo
	Unscoped() ITicketHistoryTypeDo
	Create(values ...*model.TicketHistoryType) error
	CreateInBatches(values []*model.TicketHistoryType, batchSize int) error
	Save(values ...*model.TicketHistoryType) error
	First() (*model.TicketHistoryType, error)
	Take() (*model.TicketHistoryType, error)
	Last() (*model.TicketHistoryType, error)
	Find() ([]*model.TicketHistoryType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TicketHistoryType, err error)
	FindInBatches(result *[]*model.TicketHistoryType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TicketHistoryType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITicketHistoryTypeDo
	Assign(attrs ...field.AssignExpr) ITicketHistoryTypeDo
	Joins(fields ...field.RelationField) ITicketHistoryTypeDo
	Preload(fields ...field.RelationField) ITicketHistoryTypeDo
	FirstOrInit() (*model.TicketHistoryType, error)
	FirstOrCreate() (*model.TicketHistoryType, error)
	FindByPage(offset int, limit int) (result []*model.TicketHistoryType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITicketHistoryTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t ticketHistoryTypeDo) Debug() ITicketHistoryTypeDo {
	return t.withDO(t.DO.Debug())
}

func (t ticketHistoryTypeDo) WithContext(ctx context.Context) ITicketHistoryTypeDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t ticketHistoryTypeDo) ReadDB() ITicketHistoryTypeDo {
	return t.Clauses(dbresolver.Read)
}

func (t ticketHistoryTypeDo) WriteDB() ITicketHistoryTypeDo {
	return t.Clauses(dbresolver.Write)
}

func (t ticketHistoryTypeDo) Session(config *gorm.Session) ITicketHistoryTypeDo {
	return t.withDO(t.DO.Session(config))
}

func (t ticketHistoryTypeDo) Clauses(conds ...clause.Expression) ITicketHistoryTypeDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t ticketHistoryTypeDo) Returning(value interface{}, columns ...string) ITicketHistoryTypeDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t ticketHistoryTypeDo) Not(conds ...gen.Condition) ITicketHistoryTypeDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t ticketHistoryTypeDo) Or(conds ...gen.Condition) ITicketHistoryTypeDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t ticketHistoryTypeDo) Select(conds ...field.Expr) ITicketHistoryTypeDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t ticketHistoryTypeDo) Where(conds ...gen.Condition) ITicketHistoryTypeDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t ticketHistoryTypeDo) Order(conds ...field.Expr) ITicketHistoryTypeDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t ticketHistoryTypeDo) Distinct(cols ...field.Expr) ITicketHistoryTypeDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t ticketHistoryTypeDo) Omit(cols ...field.Expr) ITicketHistoryTypeDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t ticketHistoryTypeDo) Join(table schema.Tabler, on ...field.Expr) ITicketHistoryTypeDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t ticketHistoryTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITicketHistoryTypeDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t ticketHistoryTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) ITicketHistoryTypeDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t ticketHistoryTypeDo) Group(cols ...field.Expr) ITicketHistoryTypeDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t ticketHistoryTypeDo) Having(conds ...gen.Condition) ITicketHistoryTypeDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t ticketHistoryTypeDo) Limit(limit int) ITicketHistoryTypeDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t ticketHistoryTypeDo) Offset(offset int) ITicketHistoryTypeDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t ticketHistoryTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITicketHistoryTypeDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t ticketHistoryTypeDo) Unscoped() ITicketHistoryTypeDo {
	return t.withDO(t.DO.Unscoped())
}

func (t ticketHistoryTypeDo) Create(values ...*model.TicketHistoryType) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t ticketHistoryTypeDo) CreateInBatches(values []*model.TicketHistoryType, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t ticketHistoryTypeDo) Save(values ...*model.TicketHistoryType) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t ticketHistoryTypeDo) First() (*model.TicketHistoryType, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketHistoryType), nil
	}
}

func (t ticketHistoryTypeDo) Take() (*model.TicketHistoryType, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketHistoryType), nil
	}
}

func (t ticketHistoryTypeDo) Last() (*model.TicketHistoryType, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketHistoryType), nil
	}
}

func (t ticketHistoryTypeDo) Find() ([]*model.TicketHistoryType, error) {
	result, err := t.DO.Find()
	return result.([]*model.TicketHistoryType), err
}

func (t ticketHistoryTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TicketHistoryType, err error) {
	buf := make([]*model.TicketHistoryType, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t ticketHistoryTypeDo) FindInBatches(result *[]*model.TicketHistoryType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t ticketHistoryTypeDo) Attrs(attrs ...field.AssignExpr) ITicketHistoryTypeDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t ticketHistoryTypeDo) Assign(attrs ...field.AssignExpr) ITicketHistoryTypeDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t ticketHistoryTypeDo) Joins(fields ...field.RelationField) ITicketHistoryTypeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t ticketHistoryTypeDo) Preload(fields ...field.RelationField) ITicketHistoryTypeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t ticketHistoryTypeDo) FirstOrInit() (*model.TicketHistoryType, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketHistoryType), nil
	}
}

func (t ticketHistoryTypeDo) FirstOrCreate() (*model.TicketHistoryType, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketHistoryType), nil
	}
}

func (t ticketHistoryTypeDo) FindByPage(offset int, limit int) (result []*model.TicketHistoryType, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t ticketHistoryTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t ticketHistoryTypeDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t ticketHistoryTypeDo) Delete(models ...*model.TicketHistoryType) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *ticketHistoryTypeDo) withDO(do gen.Dao) *ticketHistoryTypeDo {
	t.DO = *do.(*gen.DO)
	return t
}
