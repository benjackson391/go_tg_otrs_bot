// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newSysconfigModified(db *gorm.DB, opts ...gen.DOOption) sysconfigModified {
	_sysconfigModified := sysconfigModified{}

	_sysconfigModified.sysconfigModifiedDo.UseDB(db, opts...)
	_sysconfigModified.sysconfigModifiedDo.UseModel(&model.SysconfigModified{})

	tableName := _sysconfigModified.sysconfigModifiedDo.TableName()
	_sysconfigModified.ALL = field.NewAsterisk(tableName)
	_sysconfigModified.ID = field.NewInt32(tableName, "id")
	_sysconfigModified.SysconfigDefaultID = field.NewInt32(tableName, "sysconfig_default_id")
	_sysconfigModified.Name = field.NewString(tableName, "name")
	_sysconfigModified.UserID = field.NewInt32(tableName, "user_id")
	_sysconfigModified.IsValid = field.NewInt32(tableName, "is_valid")
	_sysconfigModified.UserModificationActive = field.NewInt32(tableName, "user_modification_active")
	_sysconfigModified.EffectiveValue = field.NewBytes(tableName, "effective_value")
	_sysconfigModified.IsDirty = field.NewInt32(tableName, "is_dirty")
	_sysconfigModified.ResetToDefault = field.NewInt32(tableName, "reset_to_default")
	_sysconfigModified.CreateTime = field.NewTime(tableName, "create_time")
	_sysconfigModified.CreateBy = field.NewInt32(tableName, "create_by")
	_sysconfigModified.ChangeTime = field.NewTime(tableName, "change_time")
	_sysconfigModified.ChangeBy = field.NewInt32(tableName, "change_by")

	_sysconfigModified.fillFieldMap()

	return _sysconfigModified
}

type sysconfigModified struct {
	sysconfigModifiedDo

	ALL                    field.Asterisk
	ID                     field.Int32
	SysconfigDefaultID     field.Int32
	Name                   field.String
	UserID                 field.Int32
	IsValid                field.Int32
	UserModificationActive field.Int32
	EffectiveValue         field.Bytes
	IsDirty                field.Int32
	ResetToDefault         field.Int32
	CreateTime             field.Time
	CreateBy               field.Int32
	ChangeTime             field.Time
	ChangeBy               field.Int32

	fieldMap map[string]field.Expr
}

func (s sysconfigModified) Table(newTableName string) *sysconfigModified {
	s.sysconfigModifiedDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysconfigModified) As(alias string) *sysconfigModified {
	s.sysconfigModifiedDo.DO = *(s.sysconfigModifiedDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysconfigModified) updateTableName(table string) *sysconfigModified {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.SysconfigDefaultID = field.NewInt32(table, "sysconfig_default_id")
	s.Name = field.NewString(table, "name")
	s.UserID = field.NewInt32(table, "user_id")
	s.IsValid = field.NewInt32(table, "is_valid")
	s.UserModificationActive = field.NewInt32(table, "user_modification_active")
	s.EffectiveValue = field.NewBytes(table, "effective_value")
	s.IsDirty = field.NewInt32(table, "is_dirty")
	s.ResetToDefault = field.NewInt32(table, "reset_to_default")
	s.CreateTime = field.NewTime(table, "create_time")
	s.CreateBy = field.NewInt32(table, "create_by")
	s.ChangeTime = field.NewTime(table, "change_time")
	s.ChangeBy = field.NewInt32(table, "change_by")

	s.fillFieldMap()

	return s
}

func (s *sysconfigModified) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysconfigModified) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 13)
	s.fieldMap["id"] = s.ID
	s.fieldMap["sysconfig_default_id"] = s.SysconfigDefaultID
	s.fieldMap["name"] = s.Name
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["is_valid"] = s.IsValid
	s.fieldMap["user_modification_active"] = s.UserModificationActive
	s.fieldMap["effective_value"] = s.EffectiveValue
	s.fieldMap["is_dirty"] = s.IsDirty
	s.fieldMap["reset_to_default"] = s.ResetToDefault
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["change_time"] = s.ChangeTime
	s.fieldMap["change_by"] = s.ChangeBy
}

func (s sysconfigModified) clone(db *gorm.DB) sysconfigModified {
	s.sysconfigModifiedDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysconfigModified) replaceDB(db *gorm.DB) sysconfigModified {
	s.sysconfigModifiedDo.ReplaceDB(db)
	return s
}

type sysconfigModifiedDo struct{ gen.DO }

type ISysconfigModifiedDo interface {
	gen.SubQuery
	Debug() ISysconfigModifiedDo
	WithContext(ctx context.Context) ISysconfigModifiedDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysconfigModifiedDo
	WriteDB() ISysconfigModifiedDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysconfigModifiedDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysconfigModifiedDo
	Not(conds ...gen.Condition) ISysconfigModifiedDo
	Or(conds ...gen.Condition) ISysconfigModifiedDo
	Select(conds ...field.Expr) ISysconfigModifiedDo
	Where(conds ...gen.Condition) ISysconfigModifiedDo
	Order(conds ...field.Expr) ISysconfigModifiedDo
	Distinct(cols ...field.Expr) ISysconfigModifiedDo
	Omit(cols ...field.Expr) ISysconfigModifiedDo
	Join(table schema.Tabler, on ...field.Expr) ISysconfigModifiedDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysconfigModifiedDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysconfigModifiedDo
	Group(cols ...field.Expr) ISysconfigModifiedDo
	Having(conds ...gen.Condition) ISysconfigModifiedDo
	Limit(limit int) ISysconfigModifiedDo
	Offset(offset int) ISysconfigModifiedDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysconfigModifiedDo
	Unscoped() ISysconfigModifiedDo
	Create(values ...*model.SysconfigModified) error
	CreateInBatches(values []*model.SysconfigModified, batchSize int) error
	Save(values ...*model.SysconfigModified) error
	First() (*model.SysconfigModified, error)
	Take() (*model.SysconfigModified, error)
	Last() (*model.SysconfigModified, error)
	Find() ([]*model.SysconfigModified, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysconfigModified, err error)
	FindInBatches(result *[]*model.SysconfigModified, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysconfigModified) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysconfigModifiedDo
	Assign(attrs ...field.AssignExpr) ISysconfigModifiedDo
	Joins(fields ...field.RelationField) ISysconfigModifiedDo
	Preload(fields ...field.RelationField) ISysconfigModifiedDo
	FirstOrInit() (*model.SysconfigModified, error)
	FirstOrCreate() (*model.SysconfigModified, error)
	FindByPage(offset int, limit int) (result []*model.SysconfigModified, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysconfigModifiedDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysconfigModifiedDo) Debug() ISysconfigModifiedDo {
	return s.withDO(s.DO.Debug())
}

func (s sysconfigModifiedDo) WithContext(ctx context.Context) ISysconfigModifiedDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysconfigModifiedDo) ReadDB() ISysconfigModifiedDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysconfigModifiedDo) WriteDB() ISysconfigModifiedDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysconfigModifiedDo) Session(config *gorm.Session) ISysconfigModifiedDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysconfigModifiedDo) Clauses(conds ...clause.Expression) ISysconfigModifiedDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysconfigModifiedDo) Returning(value interface{}, columns ...string) ISysconfigModifiedDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysconfigModifiedDo) Not(conds ...gen.Condition) ISysconfigModifiedDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysconfigModifiedDo) Or(conds ...gen.Condition) ISysconfigModifiedDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysconfigModifiedDo) Select(conds ...field.Expr) ISysconfigModifiedDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysconfigModifiedDo) Where(conds ...gen.Condition) ISysconfigModifiedDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysconfigModifiedDo) Order(conds ...field.Expr) ISysconfigModifiedDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysconfigModifiedDo) Distinct(cols ...field.Expr) ISysconfigModifiedDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysconfigModifiedDo) Omit(cols ...field.Expr) ISysconfigModifiedDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysconfigModifiedDo) Join(table schema.Tabler, on ...field.Expr) ISysconfigModifiedDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysconfigModifiedDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysconfigModifiedDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysconfigModifiedDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysconfigModifiedDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysconfigModifiedDo) Group(cols ...field.Expr) ISysconfigModifiedDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysconfigModifiedDo) Having(conds ...gen.Condition) ISysconfigModifiedDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysconfigModifiedDo) Limit(limit int) ISysconfigModifiedDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysconfigModifiedDo) Offset(offset int) ISysconfigModifiedDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysconfigModifiedDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysconfigModifiedDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysconfigModifiedDo) Unscoped() ISysconfigModifiedDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysconfigModifiedDo) Create(values ...*model.SysconfigModified) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysconfigModifiedDo) CreateInBatches(values []*model.SysconfigModified, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysconfigModifiedDo) Save(values ...*model.SysconfigModified) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysconfigModifiedDo) First() (*model.SysconfigModified, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysconfigModified), nil
	}
}

func (s sysconfigModifiedDo) Take() (*model.SysconfigModified, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysconfigModified), nil
	}
}

func (s sysconfigModifiedDo) Last() (*model.SysconfigModified, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysconfigModified), nil
	}
}

func (s sysconfigModifiedDo) Find() ([]*model.SysconfigModified, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysconfigModified), err
}

func (s sysconfigModifiedDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysconfigModified, err error) {
	buf := make([]*model.SysconfigModified, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysconfigModifiedDo) FindInBatches(result *[]*model.SysconfigModified, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysconfigModifiedDo) Attrs(attrs ...field.AssignExpr) ISysconfigModifiedDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysconfigModifiedDo) Assign(attrs ...field.AssignExpr) ISysconfigModifiedDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysconfigModifiedDo) Joins(fields ...field.RelationField) ISysconfigModifiedDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysconfigModifiedDo) Preload(fields ...field.RelationField) ISysconfigModifiedDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysconfigModifiedDo) FirstOrInit() (*model.SysconfigModified, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysconfigModified), nil
	}
}

func (s sysconfigModifiedDo) FirstOrCreate() (*model.SysconfigModified, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysconfigModified), nil
	}
}

func (s sysconfigModifiedDo) FindByPage(offset int, limit int) (result []*model.SysconfigModified, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysconfigModifiedDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysconfigModifiedDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysconfigModifiedDo) Delete(models ...*model.SysconfigModified) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysconfigModifiedDo) withDO(do gen.Dao) *sysconfigModifiedDo {
	s.DO = *do.(*gen.DO)
	return s
}
