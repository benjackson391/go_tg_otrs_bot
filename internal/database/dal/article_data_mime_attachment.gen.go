// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newArticleDataMimeAttachment(db *gorm.DB, opts ...gen.DOOption) articleDataMimeAttachment {
	_articleDataMimeAttachment := articleDataMimeAttachment{}

	_articleDataMimeAttachment.articleDataMimeAttachmentDo.UseDB(db, opts...)
	_articleDataMimeAttachment.articleDataMimeAttachmentDo.UseModel(&model.ArticleDataMimeAttachment{})

	tableName := _articleDataMimeAttachment.articleDataMimeAttachmentDo.TableName()
	_articleDataMimeAttachment.ALL = field.NewAsterisk(tableName)
	_articleDataMimeAttachment.ID = field.NewInt64(tableName, "id")
	_articleDataMimeAttachment.ArticleID = field.NewInt64(tableName, "article_id")
	_articleDataMimeAttachment.Filename = field.NewString(tableName, "filename")
	_articleDataMimeAttachment.ContentSize = field.NewString(tableName, "content_size")
	_articleDataMimeAttachment.ContentType = field.NewString(tableName, "content_type")
	_articleDataMimeAttachment.ContentID = field.NewString(tableName, "content_id")
	_articleDataMimeAttachment.ContentAlternative = field.NewString(tableName, "content_alternative")
	_articleDataMimeAttachment.Disposition = field.NewString(tableName, "disposition")
	_articleDataMimeAttachment.Content = field.NewBytes(tableName, "content")
	_articleDataMimeAttachment.CreateTime = field.NewTime(tableName, "create_time")
	_articleDataMimeAttachment.CreateBy = field.NewInt32(tableName, "create_by")
	_articleDataMimeAttachment.ChangeTime = field.NewTime(tableName, "change_time")
	_articleDataMimeAttachment.ChangeBy = field.NewInt32(tableName, "change_by")

	_articleDataMimeAttachment.fillFieldMap()

	return _articleDataMimeAttachment
}

type articleDataMimeAttachment struct {
	articleDataMimeAttachmentDo

	ALL                field.Asterisk
	ID                 field.Int64
	ArticleID          field.Int64
	Filename           field.String
	ContentSize        field.String
	ContentType        field.String
	ContentID          field.String
	ContentAlternative field.String
	Disposition        field.String
	Content            field.Bytes
	CreateTime         field.Time
	CreateBy           field.Int32
	ChangeTime         field.Time
	ChangeBy           field.Int32

	fieldMap map[string]field.Expr
}

func (a articleDataMimeAttachment) Table(newTableName string) *articleDataMimeAttachment {
	a.articleDataMimeAttachmentDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a articleDataMimeAttachment) As(alias string) *articleDataMimeAttachment {
	a.articleDataMimeAttachmentDo.DO = *(a.articleDataMimeAttachmentDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *articleDataMimeAttachment) updateTableName(table string) *articleDataMimeAttachment {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.ArticleID = field.NewInt64(table, "article_id")
	a.Filename = field.NewString(table, "filename")
	a.ContentSize = field.NewString(table, "content_size")
	a.ContentType = field.NewString(table, "content_type")
	a.ContentID = field.NewString(table, "content_id")
	a.ContentAlternative = field.NewString(table, "content_alternative")
	a.Disposition = field.NewString(table, "disposition")
	a.Content = field.NewBytes(table, "content")
	a.CreateTime = field.NewTime(table, "create_time")
	a.CreateBy = field.NewInt32(table, "create_by")
	a.ChangeTime = field.NewTime(table, "change_time")
	a.ChangeBy = field.NewInt32(table, "change_by")

	a.fillFieldMap()

	return a
}

func (a *articleDataMimeAttachment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *articleDataMimeAttachment) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 13)
	a.fieldMap["id"] = a.ID
	a.fieldMap["article_id"] = a.ArticleID
	a.fieldMap["filename"] = a.Filename
	a.fieldMap["content_size"] = a.ContentSize
	a.fieldMap["content_type"] = a.ContentType
	a.fieldMap["content_id"] = a.ContentID
	a.fieldMap["content_alternative"] = a.ContentAlternative
	a.fieldMap["disposition"] = a.Disposition
	a.fieldMap["content"] = a.Content
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["create_by"] = a.CreateBy
	a.fieldMap["change_time"] = a.ChangeTime
	a.fieldMap["change_by"] = a.ChangeBy
}

func (a articleDataMimeAttachment) clone(db *gorm.DB) articleDataMimeAttachment {
	a.articleDataMimeAttachmentDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a articleDataMimeAttachment) replaceDB(db *gorm.DB) articleDataMimeAttachment {
	a.articleDataMimeAttachmentDo.ReplaceDB(db)
	return a
}

type articleDataMimeAttachmentDo struct{ gen.DO }

type IArticleDataMimeAttachmentDo interface {
	gen.SubQuery
	Debug() IArticleDataMimeAttachmentDo
	WithContext(ctx context.Context) IArticleDataMimeAttachmentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IArticleDataMimeAttachmentDo
	WriteDB() IArticleDataMimeAttachmentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IArticleDataMimeAttachmentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IArticleDataMimeAttachmentDo
	Not(conds ...gen.Condition) IArticleDataMimeAttachmentDo
	Or(conds ...gen.Condition) IArticleDataMimeAttachmentDo
	Select(conds ...field.Expr) IArticleDataMimeAttachmentDo
	Where(conds ...gen.Condition) IArticleDataMimeAttachmentDo
	Order(conds ...field.Expr) IArticleDataMimeAttachmentDo
	Distinct(cols ...field.Expr) IArticleDataMimeAttachmentDo
	Omit(cols ...field.Expr) IArticleDataMimeAttachmentDo
	Join(table schema.Tabler, on ...field.Expr) IArticleDataMimeAttachmentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IArticleDataMimeAttachmentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IArticleDataMimeAttachmentDo
	Group(cols ...field.Expr) IArticleDataMimeAttachmentDo
	Having(conds ...gen.Condition) IArticleDataMimeAttachmentDo
	Limit(limit int) IArticleDataMimeAttachmentDo
	Offset(offset int) IArticleDataMimeAttachmentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IArticleDataMimeAttachmentDo
	Unscoped() IArticleDataMimeAttachmentDo
	Create(values ...*model.ArticleDataMimeAttachment) error
	CreateInBatches(values []*model.ArticleDataMimeAttachment, batchSize int) error
	Save(values ...*model.ArticleDataMimeAttachment) error
	First() (*model.ArticleDataMimeAttachment, error)
	Take() (*model.ArticleDataMimeAttachment, error)
	Last() (*model.ArticleDataMimeAttachment, error)
	Find() ([]*model.ArticleDataMimeAttachment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ArticleDataMimeAttachment, err error)
	FindInBatches(result *[]*model.ArticleDataMimeAttachment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ArticleDataMimeAttachment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IArticleDataMimeAttachmentDo
	Assign(attrs ...field.AssignExpr) IArticleDataMimeAttachmentDo
	Joins(fields ...field.RelationField) IArticleDataMimeAttachmentDo
	Preload(fields ...field.RelationField) IArticleDataMimeAttachmentDo
	FirstOrInit() (*model.ArticleDataMimeAttachment, error)
	FirstOrCreate() (*model.ArticleDataMimeAttachment, error)
	FindByPage(offset int, limit int) (result []*model.ArticleDataMimeAttachment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IArticleDataMimeAttachmentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a articleDataMimeAttachmentDo) Debug() IArticleDataMimeAttachmentDo {
	return a.withDO(a.DO.Debug())
}

func (a articleDataMimeAttachmentDo) WithContext(ctx context.Context) IArticleDataMimeAttachmentDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a articleDataMimeAttachmentDo) ReadDB() IArticleDataMimeAttachmentDo {
	return a.Clauses(dbresolver.Read)
}

func (a articleDataMimeAttachmentDo) WriteDB() IArticleDataMimeAttachmentDo {
	return a.Clauses(dbresolver.Write)
}

func (a articleDataMimeAttachmentDo) Session(config *gorm.Session) IArticleDataMimeAttachmentDo {
	return a.withDO(a.DO.Session(config))
}

func (a articleDataMimeAttachmentDo) Clauses(conds ...clause.Expression) IArticleDataMimeAttachmentDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a articleDataMimeAttachmentDo) Returning(value interface{}, columns ...string) IArticleDataMimeAttachmentDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a articleDataMimeAttachmentDo) Not(conds ...gen.Condition) IArticleDataMimeAttachmentDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a articleDataMimeAttachmentDo) Or(conds ...gen.Condition) IArticleDataMimeAttachmentDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a articleDataMimeAttachmentDo) Select(conds ...field.Expr) IArticleDataMimeAttachmentDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a articleDataMimeAttachmentDo) Where(conds ...gen.Condition) IArticleDataMimeAttachmentDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a articleDataMimeAttachmentDo) Order(conds ...field.Expr) IArticleDataMimeAttachmentDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a articleDataMimeAttachmentDo) Distinct(cols ...field.Expr) IArticleDataMimeAttachmentDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a articleDataMimeAttachmentDo) Omit(cols ...field.Expr) IArticleDataMimeAttachmentDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a articleDataMimeAttachmentDo) Join(table schema.Tabler, on ...field.Expr) IArticleDataMimeAttachmentDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a articleDataMimeAttachmentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IArticleDataMimeAttachmentDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a articleDataMimeAttachmentDo) RightJoin(table schema.Tabler, on ...field.Expr) IArticleDataMimeAttachmentDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a articleDataMimeAttachmentDo) Group(cols ...field.Expr) IArticleDataMimeAttachmentDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a articleDataMimeAttachmentDo) Having(conds ...gen.Condition) IArticleDataMimeAttachmentDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a articleDataMimeAttachmentDo) Limit(limit int) IArticleDataMimeAttachmentDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a articleDataMimeAttachmentDo) Offset(offset int) IArticleDataMimeAttachmentDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a articleDataMimeAttachmentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IArticleDataMimeAttachmentDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a articleDataMimeAttachmentDo) Unscoped() IArticleDataMimeAttachmentDo {
	return a.withDO(a.DO.Unscoped())
}

func (a articleDataMimeAttachmentDo) Create(values ...*model.ArticleDataMimeAttachment) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a articleDataMimeAttachmentDo) CreateInBatches(values []*model.ArticleDataMimeAttachment, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a articleDataMimeAttachmentDo) Save(values ...*model.ArticleDataMimeAttachment) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a articleDataMimeAttachmentDo) First() (*model.ArticleDataMimeAttachment, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleDataMimeAttachment), nil
	}
}

func (a articleDataMimeAttachmentDo) Take() (*model.ArticleDataMimeAttachment, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleDataMimeAttachment), nil
	}
}

func (a articleDataMimeAttachmentDo) Last() (*model.ArticleDataMimeAttachment, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleDataMimeAttachment), nil
	}
}

func (a articleDataMimeAttachmentDo) Find() ([]*model.ArticleDataMimeAttachment, error) {
	result, err := a.DO.Find()
	return result.([]*model.ArticleDataMimeAttachment), err
}

func (a articleDataMimeAttachmentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ArticleDataMimeAttachment, err error) {
	buf := make([]*model.ArticleDataMimeAttachment, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a articleDataMimeAttachmentDo) FindInBatches(result *[]*model.ArticleDataMimeAttachment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a articleDataMimeAttachmentDo) Attrs(attrs ...field.AssignExpr) IArticleDataMimeAttachmentDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a articleDataMimeAttachmentDo) Assign(attrs ...field.AssignExpr) IArticleDataMimeAttachmentDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a articleDataMimeAttachmentDo) Joins(fields ...field.RelationField) IArticleDataMimeAttachmentDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a articleDataMimeAttachmentDo) Preload(fields ...field.RelationField) IArticleDataMimeAttachmentDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a articleDataMimeAttachmentDo) FirstOrInit() (*model.ArticleDataMimeAttachment, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleDataMimeAttachment), nil
	}
}

func (a articleDataMimeAttachmentDo) FirstOrCreate() (*model.ArticleDataMimeAttachment, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleDataMimeAttachment), nil
	}
}

func (a articleDataMimeAttachmentDo) FindByPage(offset int, limit int) (result []*model.ArticleDataMimeAttachment, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a articleDataMimeAttachmentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a articleDataMimeAttachmentDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a articleDataMimeAttachmentDo) Delete(models ...*model.ArticleDataMimeAttachment) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *articleDataMimeAttachmentDo) withDO(do gen.Dao) *articleDataMimeAttachmentDo {
	a.DO = *do.(*gen.DO)
	return a
}
