// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newDynamicField(db *gorm.DB, opts ...gen.DOOption) dynamicField {
	_dynamicField := dynamicField{}

	_dynamicField.dynamicFieldDo.UseDB(db, opts...)
	_dynamicField.dynamicFieldDo.UseModel(&model.DynamicField{})

	tableName := _dynamicField.dynamicFieldDo.TableName()
	_dynamicField.ALL = field.NewAsterisk(tableName)
	_dynamicField.ID = field.NewInt32(tableName, "id")
	_dynamicField.InternalField = field.NewInt32(tableName, "internal_field")
	_dynamicField.Name = field.NewString(tableName, "name")
	_dynamicField.Label = field.NewString(tableName, "label")
	_dynamicField.FieldOrder = field.NewInt32(tableName, "field_order")
	_dynamicField.FieldType = field.NewString(tableName, "field_type")
	_dynamicField.ObjectType = field.NewString(tableName, "object_type")
	_dynamicField.Config = field.NewBytes(tableName, "config")
	_dynamicField.ValidID = field.NewInt32(tableName, "valid_id")
	_dynamicField.CreateTime = field.NewTime(tableName, "create_time")
	_dynamicField.CreateBy = field.NewInt32(tableName, "create_by")
	_dynamicField.ChangeTime = field.NewTime(tableName, "change_time")
	_dynamicField.ChangeBy = field.NewInt32(tableName, "change_by")

	_dynamicField.fillFieldMap()

	return _dynamicField
}

type dynamicField struct {
	dynamicFieldDo

	ALL           field.Asterisk
	ID            field.Int32
	InternalField field.Int32
	Name          field.String
	Label         field.String
	FieldOrder    field.Int32
	FieldType     field.String
	ObjectType    field.String
	Config        field.Bytes
	ValidID       field.Int32
	CreateTime    field.Time
	CreateBy      field.Int32
	ChangeTime    field.Time
	ChangeBy      field.Int32

	fieldMap map[string]field.Expr
}

func (d dynamicField) Table(newTableName string) *dynamicField {
	d.dynamicFieldDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dynamicField) As(alias string) *dynamicField {
	d.dynamicFieldDo.DO = *(d.dynamicFieldDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dynamicField) updateTableName(table string) *dynamicField {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt32(table, "id")
	d.InternalField = field.NewInt32(table, "internal_field")
	d.Name = field.NewString(table, "name")
	d.Label = field.NewString(table, "label")
	d.FieldOrder = field.NewInt32(table, "field_order")
	d.FieldType = field.NewString(table, "field_type")
	d.ObjectType = field.NewString(table, "object_type")
	d.Config = field.NewBytes(table, "config")
	d.ValidID = field.NewInt32(table, "valid_id")
	d.CreateTime = field.NewTime(table, "create_time")
	d.CreateBy = field.NewInt32(table, "create_by")
	d.ChangeTime = field.NewTime(table, "change_time")
	d.ChangeBy = field.NewInt32(table, "change_by")

	d.fillFieldMap()

	return d
}

func (d *dynamicField) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dynamicField) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 13)
	d.fieldMap["id"] = d.ID
	d.fieldMap["internal_field"] = d.InternalField
	d.fieldMap["name"] = d.Name
	d.fieldMap["label"] = d.Label
	d.fieldMap["field_order"] = d.FieldOrder
	d.fieldMap["field_type"] = d.FieldType
	d.fieldMap["object_type"] = d.ObjectType
	d.fieldMap["config"] = d.Config
	d.fieldMap["valid_id"] = d.ValidID
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["create_by"] = d.CreateBy
	d.fieldMap["change_time"] = d.ChangeTime
	d.fieldMap["change_by"] = d.ChangeBy
}

func (d dynamicField) clone(db *gorm.DB) dynamicField {
	d.dynamicFieldDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dynamicField) replaceDB(db *gorm.DB) dynamicField {
	d.dynamicFieldDo.ReplaceDB(db)
	return d
}

type dynamicFieldDo struct{ gen.DO }

type IDynamicFieldDo interface {
	gen.SubQuery
	Debug() IDynamicFieldDo
	WithContext(ctx context.Context) IDynamicFieldDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDynamicFieldDo
	WriteDB() IDynamicFieldDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDynamicFieldDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDynamicFieldDo
	Not(conds ...gen.Condition) IDynamicFieldDo
	Or(conds ...gen.Condition) IDynamicFieldDo
	Select(conds ...field.Expr) IDynamicFieldDo
	Where(conds ...gen.Condition) IDynamicFieldDo
	Order(conds ...field.Expr) IDynamicFieldDo
	Distinct(cols ...field.Expr) IDynamicFieldDo
	Omit(cols ...field.Expr) IDynamicFieldDo
	Join(table schema.Tabler, on ...field.Expr) IDynamicFieldDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDynamicFieldDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDynamicFieldDo
	Group(cols ...field.Expr) IDynamicFieldDo
	Having(conds ...gen.Condition) IDynamicFieldDo
	Limit(limit int) IDynamicFieldDo
	Offset(offset int) IDynamicFieldDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDynamicFieldDo
	Unscoped() IDynamicFieldDo
	Create(values ...*model.DynamicField) error
	CreateInBatches(values []*model.DynamicField, batchSize int) error
	Save(values ...*model.DynamicField) error
	First() (*model.DynamicField, error)
	Take() (*model.DynamicField, error)
	Last() (*model.DynamicField, error)
	Find() ([]*model.DynamicField, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DynamicField, err error)
	FindInBatches(result *[]*model.DynamicField, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DynamicField) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDynamicFieldDo
	Assign(attrs ...field.AssignExpr) IDynamicFieldDo
	Joins(fields ...field.RelationField) IDynamicFieldDo
	Preload(fields ...field.RelationField) IDynamicFieldDo
	FirstOrInit() (*model.DynamicField, error)
	FirstOrCreate() (*model.DynamicField, error)
	FindByPage(offset int, limit int) (result []*model.DynamicField, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDynamicFieldDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dynamicFieldDo) Debug() IDynamicFieldDo {
	return d.withDO(d.DO.Debug())
}

func (d dynamicFieldDo) WithContext(ctx context.Context) IDynamicFieldDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dynamicFieldDo) ReadDB() IDynamicFieldDo {
	return d.Clauses(dbresolver.Read)
}

func (d dynamicFieldDo) WriteDB() IDynamicFieldDo {
	return d.Clauses(dbresolver.Write)
}

func (d dynamicFieldDo) Session(config *gorm.Session) IDynamicFieldDo {
	return d.withDO(d.DO.Session(config))
}

func (d dynamicFieldDo) Clauses(conds ...clause.Expression) IDynamicFieldDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dynamicFieldDo) Returning(value interface{}, columns ...string) IDynamicFieldDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dynamicFieldDo) Not(conds ...gen.Condition) IDynamicFieldDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dynamicFieldDo) Or(conds ...gen.Condition) IDynamicFieldDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dynamicFieldDo) Select(conds ...field.Expr) IDynamicFieldDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dynamicFieldDo) Where(conds ...gen.Condition) IDynamicFieldDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dynamicFieldDo) Order(conds ...field.Expr) IDynamicFieldDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dynamicFieldDo) Distinct(cols ...field.Expr) IDynamicFieldDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dynamicFieldDo) Omit(cols ...field.Expr) IDynamicFieldDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dynamicFieldDo) Join(table schema.Tabler, on ...field.Expr) IDynamicFieldDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dynamicFieldDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDynamicFieldDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dynamicFieldDo) RightJoin(table schema.Tabler, on ...field.Expr) IDynamicFieldDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dynamicFieldDo) Group(cols ...field.Expr) IDynamicFieldDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dynamicFieldDo) Having(conds ...gen.Condition) IDynamicFieldDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dynamicFieldDo) Limit(limit int) IDynamicFieldDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dynamicFieldDo) Offset(offset int) IDynamicFieldDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dynamicFieldDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDynamicFieldDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dynamicFieldDo) Unscoped() IDynamicFieldDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dynamicFieldDo) Create(values ...*model.DynamicField) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dynamicFieldDo) CreateInBatches(values []*model.DynamicField, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dynamicFieldDo) Save(values ...*model.DynamicField) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dynamicFieldDo) First() (*model.DynamicField, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DynamicField), nil
	}
}

func (d dynamicFieldDo) Take() (*model.DynamicField, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DynamicField), nil
	}
}

func (d dynamicFieldDo) Last() (*model.DynamicField, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DynamicField), nil
	}
}

func (d dynamicFieldDo) Find() ([]*model.DynamicField, error) {
	result, err := d.DO.Find()
	return result.([]*model.DynamicField), err
}

func (d dynamicFieldDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DynamicField, err error) {
	buf := make([]*model.DynamicField, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dynamicFieldDo) FindInBatches(result *[]*model.DynamicField, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dynamicFieldDo) Attrs(attrs ...field.AssignExpr) IDynamicFieldDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dynamicFieldDo) Assign(attrs ...field.AssignExpr) IDynamicFieldDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dynamicFieldDo) Joins(fields ...field.RelationField) IDynamicFieldDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dynamicFieldDo) Preload(fields ...field.RelationField) IDynamicFieldDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dynamicFieldDo) FirstOrInit() (*model.DynamicField, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DynamicField), nil
	}
}

func (d dynamicFieldDo) FirstOrCreate() (*model.DynamicField, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DynamicField), nil
	}
}

func (d dynamicFieldDo) FindByPage(offset int, limit int) (result []*model.DynamicField, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dynamicFieldDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dynamicFieldDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dynamicFieldDo) Delete(models ...*model.DynamicField) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dynamicFieldDo) withDO(do gen.Dao) *dynamicFieldDo {
	d.DO = *do.(*gen.DO)
	return d
}
