// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newDynamicFieldValue(db *gorm.DB, opts ...gen.DOOption) dynamicFieldValue {
	_dynamicFieldValue := dynamicFieldValue{}

	_dynamicFieldValue.dynamicFieldValueDo.UseDB(db, opts...)
	_dynamicFieldValue.dynamicFieldValueDo.UseModel(&model.DynamicFieldValue{})

	tableName := _dynamicFieldValue.dynamicFieldValueDo.TableName()
	_dynamicFieldValue.ALL = field.NewAsterisk(tableName)
	_dynamicFieldValue.ID = field.NewInt32(tableName, "id")
	_dynamicFieldValue.FieldID = field.NewInt32(tableName, "field_id")
	_dynamicFieldValue.ObjectID = field.NewInt64(tableName, "object_id")
	_dynamicFieldValue.ValueText = field.NewString(tableName, "value_text")
	_dynamicFieldValue.ValueDate = field.NewTime(tableName, "value_date")
	_dynamicFieldValue.ValueInt = field.NewInt64(tableName, "value_int")

	_dynamicFieldValue.fillFieldMap()

	return _dynamicFieldValue
}

type dynamicFieldValue struct {
	dynamicFieldValueDo

	ALL       field.Asterisk
	ID        field.Int32
	FieldID   field.Int32
	ObjectID  field.Int64
	ValueText field.String
	ValueDate field.Time
	ValueInt  field.Int64

	fieldMap map[string]field.Expr
}

func (d dynamicFieldValue) Table(newTableName string) *dynamicFieldValue {
	d.dynamicFieldValueDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dynamicFieldValue) As(alias string) *dynamicFieldValue {
	d.dynamicFieldValueDo.DO = *(d.dynamicFieldValueDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dynamicFieldValue) updateTableName(table string) *dynamicFieldValue {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt32(table, "id")
	d.FieldID = field.NewInt32(table, "field_id")
	d.ObjectID = field.NewInt64(table, "object_id")
	d.ValueText = field.NewString(table, "value_text")
	d.ValueDate = field.NewTime(table, "value_date")
	d.ValueInt = field.NewInt64(table, "value_int")

	d.fillFieldMap()

	return d
}

func (d *dynamicFieldValue) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dynamicFieldValue) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 6)
	d.fieldMap["id"] = d.ID
	d.fieldMap["field_id"] = d.FieldID
	d.fieldMap["object_id"] = d.ObjectID
	d.fieldMap["value_text"] = d.ValueText
	d.fieldMap["value_date"] = d.ValueDate
	d.fieldMap["value_int"] = d.ValueInt
}

func (d dynamicFieldValue) clone(db *gorm.DB) dynamicFieldValue {
	d.dynamicFieldValueDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dynamicFieldValue) replaceDB(db *gorm.DB) dynamicFieldValue {
	d.dynamicFieldValueDo.ReplaceDB(db)
	return d
}

type dynamicFieldValueDo struct{ gen.DO }

type IDynamicFieldValueDo interface {
	gen.SubQuery
	Debug() IDynamicFieldValueDo
	WithContext(ctx context.Context) IDynamicFieldValueDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDynamicFieldValueDo
	WriteDB() IDynamicFieldValueDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDynamicFieldValueDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDynamicFieldValueDo
	Not(conds ...gen.Condition) IDynamicFieldValueDo
	Or(conds ...gen.Condition) IDynamicFieldValueDo
	Select(conds ...field.Expr) IDynamicFieldValueDo
	Where(conds ...gen.Condition) IDynamicFieldValueDo
	Order(conds ...field.Expr) IDynamicFieldValueDo
	Distinct(cols ...field.Expr) IDynamicFieldValueDo
	Omit(cols ...field.Expr) IDynamicFieldValueDo
	Join(table schema.Tabler, on ...field.Expr) IDynamicFieldValueDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDynamicFieldValueDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDynamicFieldValueDo
	Group(cols ...field.Expr) IDynamicFieldValueDo
	Having(conds ...gen.Condition) IDynamicFieldValueDo
	Limit(limit int) IDynamicFieldValueDo
	Offset(offset int) IDynamicFieldValueDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDynamicFieldValueDo
	Unscoped() IDynamicFieldValueDo
	Create(values ...*model.DynamicFieldValue) error
	CreateInBatches(values []*model.DynamicFieldValue, batchSize int) error
	Save(values ...*model.DynamicFieldValue) error
	First() (*model.DynamicFieldValue, error)
	Take() (*model.DynamicFieldValue, error)
	Last() (*model.DynamicFieldValue, error)
	Find() ([]*model.DynamicFieldValue, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DynamicFieldValue, err error)
	FindInBatches(result *[]*model.DynamicFieldValue, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DynamicFieldValue) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDynamicFieldValueDo
	Assign(attrs ...field.AssignExpr) IDynamicFieldValueDo
	Joins(fields ...field.RelationField) IDynamicFieldValueDo
	Preload(fields ...field.RelationField) IDynamicFieldValueDo
	FirstOrInit() (*model.DynamicFieldValue, error)
	FirstOrCreate() (*model.DynamicFieldValue, error)
	FindByPage(offset int, limit int) (result []*model.DynamicFieldValue, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDynamicFieldValueDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dynamicFieldValueDo) Debug() IDynamicFieldValueDo {
	return d.withDO(d.DO.Debug())
}

func (d dynamicFieldValueDo) WithContext(ctx context.Context) IDynamicFieldValueDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dynamicFieldValueDo) ReadDB() IDynamicFieldValueDo {
	return d.Clauses(dbresolver.Read)
}

func (d dynamicFieldValueDo) WriteDB() IDynamicFieldValueDo {
	return d.Clauses(dbresolver.Write)
}

func (d dynamicFieldValueDo) Session(config *gorm.Session) IDynamicFieldValueDo {
	return d.withDO(d.DO.Session(config))
}

func (d dynamicFieldValueDo) Clauses(conds ...clause.Expression) IDynamicFieldValueDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dynamicFieldValueDo) Returning(value interface{}, columns ...string) IDynamicFieldValueDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dynamicFieldValueDo) Not(conds ...gen.Condition) IDynamicFieldValueDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dynamicFieldValueDo) Or(conds ...gen.Condition) IDynamicFieldValueDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dynamicFieldValueDo) Select(conds ...field.Expr) IDynamicFieldValueDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dynamicFieldValueDo) Where(conds ...gen.Condition) IDynamicFieldValueDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dynamicFieldValueDo) Order(conds ...field.Expr) IDynamicFieldValueDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dynamicFieldValueDo) Distinct(cols ...field.Expr) IDynamicFieldValueDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dynamicFieldValueDo) Omit(cols ...field.Expr) IDynamicFieldValueDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dynamicFieldValueDo) Join(table schema.Tabler, on ...field.Expr) IDynamicFieldValueDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dynamicFieldValueDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDynamicFieldValueDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dynamicFieldValueDo) RightJoin(table schema.Tabler, on ...field.Expr) IDynamicFieldValueDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dynamicFieldValueDo) Group(cols ...field.Expr) IDynamicFieldValueDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dynamicFieldValueDo) Having(conds ...gen.Condition) IDynamicFieldValueDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dynamicFieldValueDo) Limit(limit int) IDynamicFieldValueDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dynamicFieldValueDo) Offset(offset int) IDynamicFieldValueDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dynamicFieldValueDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDynamicFieldValueDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dynamicFieldValueDo) Unscoped() IDynamicFieldValueDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dynamicFieldValueDo) Create(values ...*model.DynamicFieldValue) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dynamicFieldValueDo) CreateInBatches(values []*model.DynamicFieldValue, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dynamicFieldValueDo) Save(values ...*model.DynamicFieldValue) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dynamicFieldValueDo) First() (*model.DynamicFieldValue, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DynamicFieldValue), nil
	}
}

func (d dynamicFieldValueDo) Take() (*model.DynamicFieldValue, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DynamicFieldValue), nil
	}
}

func (d dynamicFieldValueDo) Last() (*model.DynamicFieldValue, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DynamicFieldValue), nil
	}
}

func (d dynamicFieldValueDo) Find() ([]*model.DynamicFieldValue, error) {
	result, err := d.DO.Find()
	return result.([]*model.DynamicFieldValue), err
}

func (d dynamicFieldValueDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DynamicFieldValue, err error) {
	buf := make([]*model.DynamicFieldValue, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dynamicFieldValueDo) FindInBatches(result *[]*model.DynamicFieldValue, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dynamicFieldValueDo) Attrs(attrs ...field.AssignExpr) IDynamicFieldValueDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dynamicFieldValueDo) Assign(attrs ...field.AssignExpr) IDynamicFieldValueDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dynamicFieldValueDo) Joins(fields ...field.RelationField) IDynamicFieldValueDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dynamicFieldValueDo) Preload(fields ...field.RelationField) IDynamicFieldValueDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dynamicFieldValueDo) FirstOrInit() (*model.DynamicFieldValue, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DynamicFieldValue), nil
	}
}

func (d dynamicFieldValueDo) FirstOrCreate() (*model.DynamicFieldValue, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DynamicFieldValue), nil
	}
}

func (d dynamicFieldValueDo) FindByPage(offset int, limit int) (result []*model.DynamicFieldValue, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dynamicFieldValueDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dynamicFieldValueDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dynamicFieldValueDo) Delete(models ...*model.DynamicFieldValue) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dynamicFieldValueDo) withDO(do gen.Dao) *dynamicFieldValueDo {
	d.DO = *do.(*gen.DO)
	return d
}
