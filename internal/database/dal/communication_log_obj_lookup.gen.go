// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newCommunicationLogObjLookup(db *gorm.DB, opts ...gen.DOOption) communicationLogObjLookup {
	_communicationLogObjLookup := communicationLogObjLookup{}

	_communicationLogObjLookup.communicationLogObjLookupDo.UseDB(db, opts...)
	_communicationLogObjLookup.communicationLogObjLookupDo.UseModel(&model.CommunicationLogObjLookup{})

	tableName := _communicationLogObjLookup.communicationLogObjLookupDo.TableName()
	_communicationLogObjLookup.ALL = field.NewAsterisk(tableName)
	_communicationLogObjLookup.ID = field.NewInt64(tableName, "id")
	_communicationLogObjLookup.CommunicationLogObjectID = field.NewInt64(tableName, "communication_log_object_id")
	_communicationLogObjLookup.ObjectType = field.NewString(tableName, "object_type")
	_communicationLogObjLookup.ObjectID = field.NewInt64(tableName, "object_id")

	_communicationLogObjLookup.fillFieldMap()

	return _communicationLogObjLookup
}

type communicationLogObjLookup struct {
	communicationLogObjLookupDo

	ALL                      field.Asterisk
	ID                       field.Int64
	CommunicationLogObjectID field.Int64
	ObjectType               field.String
	ObjectID                 field.Int64

	fieldMap map[string]field.Expr
}

func (c communicationLogObjLookup) Table(newTableName string) *communicationLogObjLookup {
	c.communicationLogObjLookupDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c communicationLogObjLookup) As(alias string) *communicationLogObjLookup {
	c.communicationLogObjLookupDo.DO = *(c.communicationLogObjLookupDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *communicationLogObjLookup) updateTableName(table string) *communicationLogObjLookup {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CommunicationLogObjectID = field.NewInt64(table, "communication_log_object_id")
	c.ObjectType = field.NewString(table, "object_type")
	c.ObjectID = field.NewInt64(table, "object_id")

	c.fillFieldMap()

	return c
}

func (c *communicationLogObjLookup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *communicationLogObjLookup) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 4)
	c.fieldMap["id"] = c.ID
	c.fieldMap["communication_log_object_id"] = c.CommunicationLogObjectID
	c.fieldMap["object_type"] = c.ObjectType
	c.fieldMap["object_id"] = c.ObjectID
}

func (c communicationLogObjLookup) clone(db *gorm.DB) communicationLogObjLookup {
	c.communicationLogObjLookupDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c communicationLogObjLookup) replaceDB(db *gorm.DB) communicationLogObjLookup {
	c.communicationLogObjLookupDo.ReplaceDB(db)
	return c
}

type communicationLogObjLookupDo struct{ gen.DO }

type ICommunicationLogObjLookupDo interface {
	gen.SubQuery
	Debug() ICommunicationLogObjLookupDo
	WithContext(ctx context.Context) ICommunicationLogObjLookupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICommunicationLogObjLookupDo
	WriteDB() ICommunicationLogObjLookupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICommunicationLogObjLookupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICommunicationLogObjLookupDo
	Not(conds ...gen.Condition) ICommunicationLogObjLookupDo
	Or(conds ...gen.Condition) ICommunicationLogObjLookupDo
	Select(conds ...field.Expr) ICommunicationLogObjLookupDo
	Where(conds ...gen.Condition) ICommunicationLogObjLookupDo
	Order(conds ...field.Expr) ICommunicationLogObjLookupDo
	Distinct(cols ...field.Expr) ICommunicationLogObjLookupDo
	Omit(cols ...field.Expr) ICommunicationLogObjLookupDo
	Join(table schema.Tabler, on ...field.Expr) ICommunicationLogObjLookupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICommunicationLogObjLookupDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICommunicationLogObjLookupDo
	Group(cols ...field.Expr) ICommunicationLogObjLookupDo
	Having(conds ...gen.Condition) ICommunicationLogObjLookupDo
	Limit(limit int) ICommunicationLogObjLookupDo
	Offset(offset int) ICommunicationLogObjLookupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICommunicationLogObjLookupDo
	Unscoped() ICommunicationLogObjLookupDo
	Create(values ...*model.CommunicationLogObjLookup) error
	CreateInBatches(values []*model.CommunicationLogObjLookup, batchSize int) error
	Save(values ...*model.CommunicationLogObjLookup) error
	First() (*model.CommunicationLogObjLookup, error)
	Take() (*model.CommunicationLogObjLookup, error)
	Last() (*model.CommunicationLogObjLookup, error)
	Find() ([]*model.CommunicationLogObjLookup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CommunicationLogObjLookup, err error)
	FindInBatches(result *[]*model.CommunicationLogObjLookup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CommunicationLogObjLookup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICommunicationLogObjLookupDo
	Assign(attrs ...field.AssignExpr) ICommunicationLogObjLookupDo
	Joins(fields ...field.RelationField) ICommunicationLogObjLookupDo
	Preload(fields ...field.RelationField) ICommunicationLogObjLookupDo
	FirstOrInit() (*model.CommunicationLogObjLookup, error)
	FirstOrCreate() (*model.CommunicationLogObjLookup, error)
	FindByPage(offset int, limit int) (result []*model.CommunicationLogObjLookup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICommunicationLogObjLookupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c communicationLogObjLookupDo) Debug() ICommunicationLogObjLookupDo {
	return c.withDO(c.DO.Debug())
}

func (c communicationLogObjLookupDo) WithContext(ctx context.Context) ICommunicationLogObjLookupDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c communicationLogObjLookupDo) ReadDB() ICommunicationLogObjLookupDo {
	return c.Clauses(dbresolver.Read)
}

func (c communicationLogObjLookupDo) WriteDB() ICommunicationLogObjLookupDo {
	return c.Clauses(dbresolver.Write)
}

func (c communicationLogObjLookupDo) Session(config *gorm.Session) ICommunicationLogObjLookupDo {
	return c.withDO(c.DO.Session(config))
}

func (c communicationLogObjLookupDo) Clauses(conds ...clause.Expression) ICommunicationLogObjLookupDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c communicationLogObjLookupDo) Returning(value interface{}, columns ...string) ICommunicationLogObjLookupDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c communicationLogObjLookupDo) Not(conds ...gen.Condition) ICommunicationLogObjLookupDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c communicationLogObjLookupDo) Or(conds ...gen.Condition) ICommunicationLogObjLookupDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c communicationLogObjLookupDo) Select(conds ...field.Expr) ICommunicationLogObjLookupDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c communicationLogObjLookupDo) Where(conds ...gen.Condition) ICommunicationLogObjLookupDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c communicationLogObjLookupDo) Order(conds ...field.Expr) ICommunicationLogObjLookupDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c communicationLogObjLookupDo) Distinct(cols ...field.Expr) ICommunicationLogObjLookupDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c communicationLogObjLookupDo) Omit(cols ...field.Expr) ICommunicationLogObjLookupDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c communicationLogObjLookupDo) Join(table schema.Tabler, on ...field.Expr) ICommunicationLogObjLookupDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c communicationLogObjLookupDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICommunicationLogObjLookupDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c communicationLogObjLookupDo) RightJoin(table schema.Tabler, on ...field.Expr) ICommunicationLogObjLookupDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c communicationLogObjLookupDo) Group(cols ...field.Expr) ICommunicationLogObjLookupDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c communicationLogObjLookupDo) Having(conds ...gen.Condition) ICommunicationLogObjLookupDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c communicationLogObjLookupDo) Limit(limit int) ICommunicationLogObjLookupDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c communicationLogObjLookupDo) Offset(offset int) ICommunicationLogObjLookupDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c communicationLogObjLookupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICommunicationLogObjLookupDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c communicationLogObjLookupDo) Unscoped() ICommunicationLogObjLookupDo {
	return c.withDO(c.DO.Unscoped())
}

func (c communicationLogObjLookupDo) Create(values ...*model.CommunicationLogObjLookup) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c communicationLogObjLookupDo) CreateInBatches(values []*model.CommunicationLogObjLookup, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c communicationLogObjLookupDo) Save(values ...*model.CommunicationLogObjLookup) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c communicationLogObjLookupDo) First() (*model.CommunicationLogObjLookup, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunicationLogObjLookup), nil
	}
}

func (c communicationLogObjLookupDo) Take() (*model.CommunicationLogObjLookup, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunicationLogObjLookup), nil
	}
}

func (c communicationLogObjLookupDo) Last() (*model.CommunicationLogObjLookup, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunicationLogObjLookup), nil
	}
}

func (c communicationLogObjLookupDo) Find() ([]*model.CommunicationLogObjLookup, error) {
	result, err := c.DO.Find()
	return result.([]*model.CommunicationLogObjLookup), err
}

func (c communicationLogObjLookupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CommunicationLogObjLookup, err error) {
	buf := make([]*model.CommunicationLogObjLookup, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c communicationLogObjLookupDo) FindInBatches(result *[]*model.CommunicationLogObjLookup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c communicationLogObjLookupDo) Attrs(attrs ...field.AssignExpr) ICommunicationLogObjLookupDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c communicationLogObjLookupDo) Assign(attrs ...field.AssignExpr) ICommunicationLogObjLookupDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c communicationLogObjLookupDo) Joins(fields ...field.RelationField) ICommunicationLogObjLookupDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c communicationLogObjLookupDo) Preload(fields ...field.RelationField) ICommunicationLogObjLookupDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c communicationLogObjLookupDo) FirstOrInit() (*model.CommunicationLogObjLookup, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunicationLogObjLookup), nil
	}
}

func (c communicationLogObjLookupDo) FirstOrCreate() (*model.CommunicationLogObjLookup, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommunicationLogObjLookup), nil
	}
}

func (c communicationLogObjLookupDo) FindByPage(offset int, limit int) (result []*model.CommunicationLogObjLookup, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c communicationLogObjLookupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c communicationLogObjLookupDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c communicationLogObjLookupDo) Delete(models ...*model.CommunicationLogObjLookup) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *communicationLogObjLookupDo) withDO(do gen.Dao) *communicationLogObjLookupDo {
	c.DO = *do.(*gen.DO)
	return c
}
