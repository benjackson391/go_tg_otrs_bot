// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newTgTicket(db *gorm.DB, opts ...gen.DOOption) tgTicket {
	_tgTicket := tgTicket{}

	_tgTicket.tgTicketDo.UseDB(db, opts...)
	_tgTicket.tgTicketDo.UseModel(&model.TgTicket{})

	tableName := _tgTicket.tgTicketDo.TableName()
	_tgTicket.ALL = field.NewAsterisk(tableName)
	_tgTicket.TicketID = field.NewInt64(tableName, "TicketID")
	_tgTicket.TicketNumber = field.NewString(tableName, "TicketNumber")
	_tgTicket.Title = field.NewString(tableName, "Title")
	_tgTicket.State = field.NewString(tableName, "State")
	_tgTicket.TelegramLogin = field.NewString(tableName, "TelegramLogin")
	_tgTicket.Type = field.NewString(tableName, "Type")
	_tgTicket.StateType = field.NewString(tableName, "StateType")
	_tgTicket.UserFirstname = field.NewString(tableName, "UserFirstname")
	_tgTicket.UserLastname = field.NewString(tableName, "UserLastname")
	_tgTicket.CustomerUserLogin = field.NewString(tableName, "CustomerUserLogin")
	_tgTicket.Body = field.NewString(tableName, "Body")
	_tgTicket.SolutionTimeDestinationDate = field.NewInt32(tableName, "SolutionTimeDestinationDate")
	_tgTicket.Timestamp = field.NewInt64(tableName, "timestamp")
	_tgTicket.TimestampNow = field.NewInt64(tableName, "timestamp_now")

	_tgTicket.fillFieldMap()

	return _tgTicket
}

type tgTicket struct {
	tgTicketDo

	ALL                         field.Asterisk
	TicketID                    field.Int64
	TicketNumber                field.String
	Title                       field.String
	State                       field.String
	TelegramLogin               field.String
	Type                        field.String
	StateType                   field.String
	UserFirstname               field.String
	UserLastname                field.String
	CustomerUserLogin           field.String
	Body                        field.String
	SolutionTimeDestinationDate field.Int32
	Timestamp                   field.Int64
	TimestampNow                field.Int64

	fieldMap map[string]field.Expr
}

func (t tgTicket) Table(newTableName string) *tgTicket {
	t.tgTicketDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tgTicket) As(alias string) *tgTicket {
	t.tgTicketDo.DO = *(t.tgTicketDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tgTicket) updateTableName(table string) *tgTicket {
	t.ALL = field.NewAsterisk(table)
	t.TicketID = field.NewInt64(table, "TicketID")
	t.TicketNumber = field.NewString(table, "TicketNumber")
	t.Title = field.NewString(table, "Title")
	t.State = field.NewString(table, "State")
	t.TelegramLogin = field.NewString(table, "TelegramLogin")
	t.Type = field.NewString(table, "Type")
	t.StateType = field.NewString(table, "StateType")
	t.UserFirstname = field.NewString(table, "UserFirstname")
	t.UserLastname = field.NewString(table, "UserLastname")
	t.CustomerUserLogin = field.NewString(table, "CustomerUserLogin")
	t.Body = field.NewString(table, "Body")
	t.SolutionTimeDestinationDate = field.NewInt32(table, "SolutionTimeDestinationDate")
	t.Timestamp = field.NewInt64(table, "timestamp")
	t.TimestampNow = field.NewInt64(table, "timestamp_now")

	t.fillFieldMap()

	return t
}

func (t *tgTicket) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tgTicket) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 14)
	t.fieldMap["TicketID"] = t.TicketID
	t.fieldMap["TicketNumber"] = t.TicketNumber
	t.fieldMap["Title"] = t.Title
	t.fieldMap["State"] = t.State
	t.fieldMap["TelegramLogin"] = t.TelegramLogin
	t.fieldMap["Type"] = t.Type
	t.fieldMap["StateType"] = t.StateType
	t.fieldMap["UserFirstname"] = t.UserFirstname
	t.fieldMap["UserLastname"] = t.UserLastname
	t.fieldMap["CustomerUserLogin"] = t.CustomerUserLogin
	t.fieldMap["Body"] = t.Body
	t.fieldMap["SolutionTimeDestinationDate"] = t.SolutionTimeDestinationDate
	t.fieldMap["timestamp"] = t.Timestamp
	t.fieldMap["timestamp_now"] = t.TimestampNow
}

func (t tgTicket) clone(db *gorm.DB) tgTicket {
	t.tgTicketDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tgTicket) replaceDB(db *gorm.DB) tgTicket {
	t.tgTicketDo.ReplaceDB(db)
	return t
}

type tgTicketDo struct{ gen.DO }

type ITgTicketDo interface {
	gen.SubQuery
	Debug() ITgTicketDo
	WithContext(ctx context.Context) ITgTicketDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITgTicketDo
	WriteDB() ITgTicketDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITgTicketDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITgTicketDo
	Not(conds ...gen.Condition) ITgTicketDo
	Or(conds ...gen.Condition) ITgTicketDo
	Select(conds ...field.Expr) ITgTicketDo
	Where(conds ...gen.Condition) ITgTicketDo
	Order(conds ...field.Expr) ITgTicketDo
	Distinct(cols ...field.Expr) ITgTicketDo
	Omit(cols ...field.Expr) ITgTicketDo
	Join(table schema.Tabler, on ...field.Expr) ITgTicketDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITgTicketDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITgTicketDo
	Group(cols ...field.Expr) ITgTicketDo
	Having(conds ...gen.Condition) ITgTicketDo
	Limit(limit int) ITgTicketDo
	Offset(offset int) ITgTicketDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITgTicketDo
	Unscoped() ITgTicketDo
	Create(values ...*model.TgTicket) error
	CreateInBatches(values []*model.TgTicket, batchSize int) error
	Save(values ...*model.TgTicket) error
	First() (*model.TgTicket, error)
	Take() (*model.TgTicket, error)
	Last() (*model.TgTicket, error)
	Find() ([]*model.TgTicket, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TgTicket, err error)
	FindInBatches(result *[]*model.TgTicket, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TgTicket) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITgTicketDo
	Assign(attrs ...field.AssignExpr) ITgTicketDo
	Joins(fields ...field.RelationField) ITgTicketDo
	Preload(fields ...field.RelationField) ITgTicketDo
	FirstOrInit() (*model.TgTicket, error)
	FirstOrCreate() (*model.TgTicket, error)
	FindByPage(offset int, limit int) (result []*model.TgTicket, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITgTicketDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tgTicketDo) Debug() ITgTicketDo {
	return t.withDO(t.DO.Debug())
}

func (t tgTicketDo) WithContext(ctx context.Context) ITgTicketDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tgTicketDo) ReadDB() ITgTicketDo {
	return t.Clauses(dbresolver.Read)
}

func (t tgTicketDo) WriteDB() ITgTicketDo {
	return t.Clauses(dbresolver.Write)
}

func (t tgTicketDo) Session(config *gorm.Session) ITgTicketDo {
	return t.withDO(t.DO.Session(config))
}

func (t tgTicketDo) Clauses(conds ...clause.Expression) ITgTicketDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tgTicketDo) Returning(value interface{}, columns ...string) ITgTicketDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tgTicketDo) Not(conds ...gen.Condition) ITgTicketDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tgTicketDo) Or(conds ...gen.Condition) ITgTicketDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tgTicketDo) Select(conds ...field.Expr) ITgTicketDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tgTicketDo) Where(conds ...gen.Condition) ITgTicketDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tgTicketDo) Order(conds ...field.Expr) ITgTicketDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tgTicketDo) Distinct(cols ...field.Expr) ITgTicketDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tgTicketDo) Omit(cols ...field.Expr) ITgTicketDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tgTicketDo) Join(table schema.Tabler, on ...field.Expr) ITgTicketDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tgTicketDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITgTicketDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tgTicketDo) RightJoin(table schema.Tabler, on ...field.Expr) ITgTicketDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tgTicketDo) Group(cols ...field.Expr) ITgTicketDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tgTicketDo) Having(conds ...gen.Condition) ITgTicketDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tgTicketDo) Limit(limit int) ITgTicketDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tgTicketDo) Offset(offset int) ITgTicketDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tgTicketDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITgTicketDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tgTicketDo) Unscoped() ITgTicketDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tgTicketDo) Create(values ...*model.TgTicket) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tgTicketDo) CreateInBatches(values []*model.TgTicket, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tgTicketDo) Save(values ...*model.TgTicket) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tgTicketDo) First() (*model.TgTicket, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TgTicket), nil
	}
}

func (t tgTicketDo) Take() (*model.TgTicket, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TgTicket), nil
	}
}

func (t tgTicketDo) Last() (*model.TgTicket, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TgTicket), nil
	}
}

func (t tgTicketDo) Find() ([]*model.TgTicket, error) {
	result, err := t.DO.Find()
	return result.([]*model.TgTicket), err
}

func (t tgTicketDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TgTicket, err error) {
	buf := make([]*model.TgTicket, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tgTicketDo) FindInBatches(result *[]*model.TgTicket, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tgTicketDo) Attrs(attrs ...field.AssignExpr) ITgTicketDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tgTicketDo) Assign(attrs ...field.AssignExpr) ITgTicketDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tgTicketDo) Joins(fields ...field.RelationField) ITgTicketDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tgTicketDo) Preload(fields ...field.RelationField) ITgTicketDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tgTicketDo) FirstOrInit() (*model.TgTicket, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TgTicket), nil
	}
}

func (t tgTicketDo) FirstOrCreate() (*model.TgTicket, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TgTicket), nil
	}
}

func (t tgTicketDo) FindByPage(offset int, limit int) (result []*model.TgTicket, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tgTicketDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tgTicketDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tgTicketDo) Delete(models ...*model.TgTicket) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tgTicketDo) withDO(do gen.Dao) *tgTicketDo {
	t.DO = *do.(*gen.DO)
	return t
}
