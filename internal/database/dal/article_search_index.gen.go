// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newArticleSearchIndex(db *gorm.DB, opts ...gen.DOOption) articleSearchIndex {
	_articleSearchIndex := articleSearchIndex{}

	_articleSearchIndex.articleSearchIndexDo.UseDB(db, opts...)
	_articleSearchIndex.articleSearchIndexDo.UseModel(&model.ArticleSearchIndex{})

	tableName := _articleSearchIndex.articleSearchIndexDo.TableName()
	_articleSearchIndex.ALL = field.NewAsterisk(tableName)
	_articleSearchIndex.ID = field.NewInt64(tableName, "id")
	_articleSearchIndex.TicketID = field.NewInt64(tableName, "ticket_id")
	_articleSearchIndex.ArticleID = field.NewInt64(tableName, "article_id")
	_articleSearchIndex.ArticleKey = field.NewString(tableName, "article_key")
	_articleSearchIndex.ArticleValue = field.NewString(tableName, "article_value")

	_articleSearchIndex.fillFieldMap()

	return _articleSearchIndex
}

type articleSearchIndex struct {
	articleSearchIndexDo

	ALL          field.Asterisk
	ID           field.Int64
	TicketID     field.Int64
	ArticleID    field.Int64
	ArticleKey   field.String
	ArticleValue field.String

	fieldMap map[string]field.Expr
}

func (a articleSearchIndex) Table(newTableName string) *articleSearchIndex {
	a.articleSearchIndexDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a articleSearchIndex) As(alias string) *articleSearchIndex {
	a.articleSearchIndexDo.DO = *(a.articleSearchIndexDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *articleSearchIndex) updateTableName(table string) *articleSearchIndex {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.TicketID = field.NewInt64(table, "ticket_id")
	a.ArticleID = field.NewInt64(table, "article_id")
	a.ArticleKey = field.NewString(table, "article_key")
	a.ArticleValue = field.NewString(table, "article_value")

	a.fillFieldMap()

	return a
}

func (a *articleSearchIndex) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *articleSearchIndex) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 5)
	a.fieldMap["id"] = a.ID
	a.fieldMap["ticket_id"] = a.TicketID
	a.fieldMap["article_id"] = a.ArticleID
	a.fieldMap["article_key"] = a.ArticleKey
	a.fieldMap["article_value"] = a.ArticleValue
}

func (a articleSearchIndex) clone(db *gorm.DB) articleSearchIndex {
	a.articleSearchIndexDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a articleSearchIndex) replaceDB(db *gorm.DB) articleSearchIndex {
	a.articleSearchIndexDo.ReplaceDB(db)
	return a
}

type articleSearchIndexDo struct{ gen.DO }

type IArticleSearchIndexDo interface {
	gen.SubQuery
	Debug() IArticleSearchIndexDo
	WithContext(ctx context.Context) IArticleSearchIndexDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IArticleSearchIndexDo
	WriteDB() IArticleSearchIndexDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IArticleSearchIndexDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IArticleSearchIndexDo
	Not(conds ...gen.Condition) IArticleSearchIndexDo
	Or(conds ...gen.Condition) IArticleSearchIndexDo
	Select(conds ...field.Expr) IArticleSearchIndexDo
	Where(conds ...gen.Condition) IArticleSearchIndexDo
	Order(conds ...field.Expr) IArticleSearchIndexDo
	Distinct(cols ...field.Expr) IArticleSearchIndexDo
	Omit(cols ...field.Expr) IArticleSearchIndexDo
	Join(table schema.Tabler, on ...field.Expr) IArticleSearchIndexDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IArticleSearchIndexDo
	RightJoin(table schema.Tabler, on ...field.Expr) IArticleSearchIndexDo
	Group(cols ...field.Expr) IArticleSearchIndexDo
	Having(conds ...gen.Condition) IArticleSearchIndexDo
	Limit(limit int) IArticleSearchIndexDo
	Offset(offset int) IArticleSearchIndexDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IArticleSearchIndexDo
	Unscoped() IArticleSearchIndexDo
	Create(values ...*model.ArticleSearchIndex) error
	CreateInBatches(values []*model.ArticleSearchIndex, batchSize int) error
	Save(values ...*model.ArticleSearchIndex) error
	First() (*model.ArticleSearchIndex, error)
	Take() (*model.ArticleSearchIndex, error)
	Last() (*model.ArticleSearchIndex, error)
	Find() ([]*model.ArticleSearchIndex, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ArticleSearchIndex, err error)
	FindInBatches(result *[]*model.ArticleSearchIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ArticleSearchIndex) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IArticleSearchIndexDo
	Assign(attrs ...field.AssignExpr) IArticleSearchIndexDo
	Joins(fields ...field.RelationField) IArticleSearchIndexDo
	Preload(fields ...field.RelationField) IArticleSearchIndexDo
	FirstOrInit() (*model.ArticleSearchIndex, error)
	FirstOrCreate() (*model.ArticleSearchIndex, error)
	FindByPage(offset int, limit int) (result []*model.ArticleSearchIndex, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IArticleSearchIndexDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a articleSearchIndexDo) Debug() IArticleSearchIndexDo {
	return a.withDO(a.DO.Debug())
}

func (a articleSearchIndexDo) WithContext(ctx context.Context) IArticleSearchIndexDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a articleSearchIndexDo) ReadDB() IArticleSearchIndexDo {
	return a.Clauses(dbresolver.Read)
}

func (a articleSearchIndexDo) WriteDB() IArticleSearchIndexDo {
	return a.Clauses(dbresolver.Write)
}

func (a articleSearchIndexDo) Session(config *gorm.Session) IArticleSearchIndexDo {
	return a.withDO(a.DO.Session(config))
}

func (a articleSearchIndexDo) Clauses(conds ...clause.Expression) IArticleSearchIndexDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a articleSearchIndexDo) Returning(value interface{}, columns ...string) IArticleSearchIndexDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a articleSearchIndexDo) Not(conds ...gen.Condition) IArticleSearchIndexDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a articleSearchIndexDo) Or(conds ...gen.Condition) IArticleSearchIndexDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a articleSearchIndexDo) Select(conds ...field.Expr) IArticleSearchIndexDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a articleSearchIndexDo) Where(conds ...gen.Condition) IArticleSearchIndexDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a articleSearchIndexDo) Order(conds ...field.Expr) IArticleSearchIndexDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a articleSearchIndexDo) Distinct(cols ...field.Expr) IArticleSearchIndexDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a articleSearchIndexDo) Omit(cols ...field.Expr) IArticleSearchIndexDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a articleSearchIndexDo) Join(table schema.Tabler, on ...field.Expr) IArticleSearchIndexDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a articleSearchIndexDo) LeftJoin(table schema.Tabler, on ...field.Expr) IArticleSearchIndexDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a articleSearchIndexDo) RightJoin(table schema.Tabler, on ...field.Expr) IArticleSearchIndexDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a articleSearchIndexDo) Group(cols ...field.Expr) IArticleSearchIndexDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a articleSearchIndexDo) Having(conds ...gen.Condition) IArticleSearchIndexDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a articleSearchIndexDo) Limit(limit int) IArticleSearchIndexDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a articleSearchIndexDo) Offset(offset int) IArticleSearchIndexDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a articleSearchIndexDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IArticleSearchIndexDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a articleSearchIndexDo) Unscoped() IArticleSearchIndexDo {
	return a.withDO(a.DO.Unscoped())
}

func (a articleSearchIndexDo) Create(values ...*model.ArticleSearchIndex) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a articleSearchIndexDo) CreateInBatches(values []*model.ArticleSearchIndex, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a articleSearchIndexDo) Save(values ...*model.ArticleSearchIndex) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a articleSearchIndexDo) First() (*model.ArticleSearchIndex, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleSearchIndex), nil
	}
}

func (a articleSearchIndexDo) Take() (*model.ArticleSearchIndex, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleSearchIndex), nil
	}
}

func (a articleSearchIndexDo) Last() (*model.ArticleSearchIndex, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleSearchIndex), nil
	}
}

func (a articleSearchIndexDo) Find() ([]*model.ArticleSearchIndex, error) {
	result, err := a.DO.Find()
	return result.([]*model.ArticleSearchIndex), err
}

func (a articleSearchIndexDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ArticleSearchIndex, err error) {
	buf := make([]*model.ArticleSearchIndex, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a articleSearchIndexDo) FindInBatches(result *[]*model.ArticleSearchIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a articleSearchIndexDo) Attrs(attrs ...field.AssignExpr) IArticleSearchIndexDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a articleSearchIndexDo) Assign(attrs ...field.AssignExpr) IArticleSearchIndexDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a articleSearchIndexDo) Joins(fields ...field.RelationField) IArticleSearchIndexDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a articleSearchIndexDo) Preload(fields ...field.RelationField) IArticleSearchIndexDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a articleSearchIndexDo) FirstOrInit() (*model.ArticleSearchIndex, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleSearchIndex), nil
	}
}

func (a articleSearchIndexDo) FirstOrCreate() (*model.ArticleSearchIndex, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArticleSearchIndex), nil
	}
}

func (a articleSearchIndexDo) FindByPage(offset int, limit int) (result []*model.ArticleSearchIndex, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a articleSearchIndexDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a articleSearchIndexDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a articleSearchIndexDo) Delete(models ...*model.ArticleSearchIndex) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *articleSearchIndexDo) withDO(do gen.Dao) *articleSearchIndexDo {
	a.DO = *do.(*gen.DO)
	return a
}
