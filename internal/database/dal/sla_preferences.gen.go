// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newSLAPreference(db *gorm.DB, opts ...gen.DOOption) sLAPreference {
	_sLAPreference := sLAPreference{}

	_sLAPreference.sLAPreferenceDo.UseDB(db, opts...)
	_sLAPreference.sLAPreferenceDo.UseModel(&model.SLAPreference{})

	tableName := _sLAPreference.sLAPreferenceDo.TableName()
	_sLAPreference.ALL = field.NewAsterisk(tableName)
	_sLAPreference.SLAID = field.NewInt32(tableName, "sla_id")
	_sLAPreference.PreferencesKey = field.NewString(tableName, "preferences_key")
	_sLAPreference.PreferencesValue = field.NewString(tableName, "preferences_value")

	_sLAPreference.fillFieldMap()

	return _sLAPreference
}

type sLAPreference struct {
	sLAPreferenceDo

	ALL              field.Asterisk
	SLAID            field.Int32
	PreferencesKey   field.String
	PreferencesValue field.String

	fieldMap map[string]field.Expr
}

func (s sLAPreference) Table(newTableName string) *sLAPreference {
	s.sLAPreferenceDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sLAPreference) As(alias string) *sLAPreference {
	s.sLAPreferenceDo.DO = *(s.sLAPreferenceDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sLAPreference) updateTableName(table string) *sLAPreference {
	s.ALL = field.NewAsterisk(table)
	s.SLAID = field.NewInt32(table, "sla_id")
	s.PreferencesKey = field.NewString(table, "preferences_key")
	s.PreferencesValue = field.NewString(table, "preferences_value")

	s.fillFieldMap()

	return s
}

func (s *sLAPreference) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sLAPreference) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["sla_id"] = s.SLAID
	s.fieldMap["preferences_key"] = s.PreferencesKey
	s.fieldMap["preferences_value"] = s.PreferencesValue
}

func (s sLAPreference) clone(db *gorm.DB) sLAPreference {
	s.sLAPreferenceDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sLAPreference) replaceDB(db *gorm.DB) sLAPreference {
	s.sLAPreferenceDo.ReplaceDB(db)
	return s
}

type sLAPreferenceDo struct{ gen.DO }

type ISLAPreferenceDo interface {
	gen.SubQuery
	Debug() ISLAPreferenceDo
	WithContext(ctx context.Context) ISLAPreferenceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISLAPreferenceDo
	WriteDB() ISLAPreferenceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISLAPreferenceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISLAPreferenceDo
	Not(conds ...gen.Condition) ISLAPreferenceDo
	Or(conds ...gen.Condition) ISLAPreferenceDo
	Select(conds ...field.Expr) ISLAPreferenceDo
	Where(conds ...gen.Condition) ISLAPreferenceDo
	Order(conds ...field.Expr) ISLAPreferenceDo
	Distinct(cols ...field.Expr) ISLAPreferenceDo
	Omit(cols ...field.Expr) ISLAPreferenceDo
	Join(table schema.Tabler, on ...field.Expr) ISLAPreferenceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISLAPreferenceDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISLAPreferenceDo
	Group(cols ...field.Expr) ISLAPreferenceDo
	Having(conds ...gen.Condition) ISLAPreferenceDo
	Limit(limit int) ISLAPreferenceDo
	Offset(offset int) ISLAPreferenceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISLAPreferenceDo
	Unscoped() ISLAPreferenceDo
	Create(values ...*model.SLAPreference) error
	CreateInBatches(values []*model.SLAPreference, batchSize int) error
	Save(values ...*model.SLAPreference) error
	First() (*model.SLAPreference, error)
	Take() (*model.SLAPreference, error)
	Last() (*model.SLAPreference, error)
	Find() ([]*model.SLAPreference, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SLAPreference, err error)
	FindInBatches(result *[]*model.SLAPreference, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SLAPreference) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISLAPreferenceDo
	Assign(attrs ...field.AssignExpr) ISLAPreferenceDo
	Joins(fields ...field.RelationField) ISLAPreferenceDo
	Preload(fields ...field.RelationField) ISLAPreferenceDo
	FirstOrInit() (*model.SLAPreference, error)
	FirstOrCreate() (*model.SLAPreference, error)
	FindByPage(offset int, limit int) (result []*model.SLAPreference, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISLAPreferenceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sLAPreferenceDo) Debug() ISLAPreferenceDo {
	return s.withDO(s.DO.Debug())
}

func (s sLAPreferenceDo) WithContext(ctx context.Context) ISLAPreferenceDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sLAPreferenceDo) ReadDB() ISLAPreferenceDo {
	return s.Clauses(dbresolver.Read)
}

func (s sLAPreferenceDo) WriteDB() ISLAPreferenceDo {
	return s.Clauses(dbresolver.Write)
}

func (s sLAPreferenceDo) Session(config *gorm.Session) ISLAPreferenceDo {
	return s.withDO(s.DO.Session(config))
}

func (s sLAPreferenceDo) Clauses(conds ...clause.Expression) ISLAPreferenceDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sLAPreferenceDo) Returning(value interface{}, columns ...string) ISLAPreferenceDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sLAPreferenceDo) Not(conds ...gen.Condition) ISLAPreferenceDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sLAPreferenceDo) Or(conds ...gen.Condition) ISLAPreferenceDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sLAPreferenceDo) Select(conds ...field.Expr) ISLAPreferenceDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sLAPreferenceDo) Where(conds ...gen.Condition) ISLAPreferenceDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sLAPreferenceDo) Order(conds ...field.Expr) ISLAPreferenceDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sLAPreferenceDo) Distinct(cols ...field.Expr) ISLAPreferenceDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sLAPreferenceDo) Omit(cols ...field.Expr) ISLAPreferenceDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sLAPreferenceDo) Join(table schema.Tabler, on ...field.Expr) ISLAPreferenceDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sLAPreferenceDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISLAPreferenceDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sLAPreferenceDo) RightJoin(table schema.Tabler, on ...field.Expr) ISLAPreferenceDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sLAPreferenceDo) Group(cols ...field.Expr) ISLAPreferenceDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sLAPreferenceDo) Having(conds ...gen.Condition) ISLAPreferenceDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sLAPreferenceDo) Limit(limit int) ISLAPreferenceDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sLAPreferenceDo) Offset(offset int) ISLAPreferenceDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sLAPreferenceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISLAPreferenceDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sLAPreferenceDo) Unscoped() ISLAPreferenceDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sLAPreferenceDo) Create(values ...*model.SLAPreference) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sLAPreferenceDo) CreateInBatches(values []*model.SLAPreference, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sLAPreferenceDo) Save(values ...*model.SLAPreference) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sLAPreferenceDo) First() (*model.SLAPreference, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SLAPreference), nil
	}
}

func (s sLAPreferenceDo) Take() (*model.SLAPreference, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SLAPreference), nil
	}
}

func (s sLAPreferenceDo) Last() (*model.SLAPreference, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SLAPreference), nil
	}
}

func (s sLAPreferenceDo) Find() ([]*model.SLAPreference, error) {
	result, err := s.DO.Find()
	return result.([]*model.SLAPreference), err
}

func (s sLAPreferenceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SLAPreference, err error) {
	buf := make([]*model.SLAPreference, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sLAPreferenceDo) FindInBatches(result *[]*model.SLAPreference, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sLAPreferenceDo) Attrs(attrs ...field.AssignExpr) ISLAPreferenceDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sLAPreferenceDo) Assign(attrs ...field.AssignExpr) ISLAPreferenceDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sLAPreferenceDo) Joins(fields ...field.RelationField) ISLAPreferenceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sLAPreferenceDo) Preload(fields ...field.RelationField) ISLAPreferenceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sLAPreferenceDo) FirstOrInit() (*model.SLAPreference, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SLAPreference), nil
	}
}

func (s sLAPreferenceDo) FirstOrCreate() (*model.SLAPreference, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SLAPreference), nil
	}
}

func (s sLAPreferenceDo) FindByPage(offset int, limit int) (result []*model.SLAPreference, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sLAPreferenceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sLAPreferenceDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sLAPreferenceDo) Delete(models ...*model.SLAPreference) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sLAPreferenceDo) withDO(do gen.Dao) *sLAPreferenceDo {
	s.DO = *do.(*gen.DO)
	return s
}
