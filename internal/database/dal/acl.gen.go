// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newAcl(db *gorm.DB, opts ...gen.DOOption) acl {
	_acl := acl{}

	_acl.aclDo.UseDB(db, opts...)
	_acl.aclDo.UseModel(&model.Acl{})

	tableName := _acl.aclDo.TableName()
	_acl.ALL = field.NewAsterisk(tableName)
	_acl.ID = field.NewInt32(tableName, "id")
	_acl.Name = field.NewString(tableName, "name")
	_acl.Comments = field.NewString(tableName, "comments")
	_acl.Description = field.NewString(tableName, "description")
	_acl.ValidID = field.NewInt32(tableName, "valid_id")
	_acl.StopAfterMatch = field.NewInt32(tableName, "stop_after_match")
	_acl.ConfigMatch = field.NewBytes(tableName, "config_match")
	_acl.ConfigChange = field.NewBytes(tableName, "config_change")
	_acl.CreateTime = field.NewTime(tableName, "create_time")
	_acl.CreateBy = field.NewInt32(tableName, "create_by")
	_acl.ChangeTime = field.NewTime(tableName, "change_time")
	_acl.ChangeBy = field.NewInt32(tableName, "change_by")

	_acl.fillFieldMap()

	return _acl
}

type acl struct {
	aclDo

	ALL            field.Asterisk
	ID             field.Int32
	Name           field.String
	Comments       field.String
	Description    field.String
	ValidID        field.Int32
	StopAfterMatch field.Int32
	ConfigMatch    field.Bytes
	ConfigChange   field.Bytes
	CreateTime     field.Time
	CreateBy       field.Int32
	ChangeTime     field.Time
	ChangeBy       field.Int32

	fieldMap map[string]field.Expr
}

func (a acl) Table(newTableName string) *acl {
	a.aclDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a acl) As(alias string) *acl {
	a.aclDo.DO = *(a.aclDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *acl) updateTableName(table string) *acl {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.Name = field.NewString(table, "name")
	a.Comments = field.NewString(table, "comments")
	a.Description = field.NewString(table, "description")
	a.ValidID = field.NewInt32(table, "valid_id")
	a.StopAfterMatch = field.NewInt32(table, "stop_after_match")
	a.ConfigMatch = field.NewBytes(table, "config_match")
	a.ConfigChange = field.NewBytes(table, "config_change")
	a.CreateTime = field.NewTime(table, "create_time")
	a.CreateBy = field.NewInt32(table, "create_by")
	a.ChangeTime = field.NewTime(table, "change_time")
	a.ChangeBy = field.NewInt32(table, "change_by")

	a.fillFieldMap()

	return a
}

func (a *acl) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *acl) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 12)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["comments"] = a.Comments
	a.fieldMap["description"] = a.Description
	a.fieldMap["valid_id"] = a.ValidID
	a.fieldMap["stop_after_match"] = a.StopAfterMatch
	a.fieldMap["config_match"] = a.ConfigMatch
	a.fieldMap["config_change"] = a.ConfigChange
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["create_by"] = a.CreateBy
	a.fieldMap["change_time"] = a.ChangeTime
	a.fieldMap["change_by"] = a.ChangeBy
}

func (a acl) clone(db *gorm.DB) acl {
	a.aclDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a acl) replaceDB(db *gorm.DB) acl {
	a.aclDo.ReplaceDB(db)
	return a
}

type aclDo struct{ gen.DO }

type IAclDo interface {
	gen.SubQuery
	Debug() IAclDo
	WithContext(ctx context.Context) IAclDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAclDo
	WriteDB() IAclDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAclDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAclDo
	Not(conds ...gen.Condition) IAclDo
	Or(conds ...gen.Condition) IAclDo
	Select(conds ...field.Expr) IAclDo
	Where(conds ...gen.Condition) IAclDo
	Order(conds ...field.Expr) IAclDo
	Distinct(cols ...field.Expr) IAclDo
	Omit(cols ...field.Expr) IAclDo
	Join(table schema.Tabler, on ...field.Expr) IAclDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAclDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAclDo
	Group(cols ...field.Expr) IAclDo
	Having(conds ...gen.Condition) IAclDo
	Limit(limit int) IAclDo
	Offset(offset int) IAclDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAclDo
	Unscoped() IAclDo
	Create(values ...*model.Acl) error
	CreateInBatches(values []*model.Acl, batchSize int) error
	Save(values ...*model.Acl) error
	First() (*model.Acl, error)
	Take() (*model.Acl, error)
	Last() (*model.Acl, error)
	Find() ([]*model.Acl, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Acl, err error)
	FindInBatches(result *[]*model.Acl, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Acl) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAclDo
	Assign(attrs ...field.AssignExpr) IAclDo
	Joins(fields ...field.RelationField) IAclDo
	Preload(fields ...field.RelationField) IAclDo
	FirstOrInit() (*model.Acl, error)
	FirstOrCreate() (*model.Acl, error)
	FindByPage(offset int, limit int) (result []*model.Acl, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAclDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aclDo) Debug() IAclDo {
	return a.withDO(a.DO.Debug())
}

func (a aclDo) WithContext(ctx context.Context) IAclDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aclDo) ReadDB() IAclDo {
	return a.Clauses(dbresolver.Read)
}

func (a aclDo) WriteDB() IAclDo {
	return a.Clauses(dbresolver.Write)
}

func (a aclDo) Session(config *gorm.Session) IAclDo {
	return a.withDO(a.DO.Session(config))
}

func (a aclDo) Clauses(conds ...clause.Expression) IAclDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aclDo) Returning(value interface{}, columns ...string) IAclDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aclDo) Not(conds ...gen.Condition) IAclDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aclDo) Or(conds ...gen.Condition) IAclDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aclDo) Select(conds ...field.Expr) IAclDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aclDo) Where(conds ...gen.Condition) IAclDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aclDo) Order(conds ...field.Expr) IAclDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aclDo) Distinct(cols ...field.Expr) IAclDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aclDo) Omit(cols ...field.Expr) IAclDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aclDo) Join(table schema.Tabler, on ...field.Expr) IAclDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aclDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAclDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aclDo) RightJoin(table schema.Tabler, on ...field.Expr) IAclDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aclDo) Group(cols ...field.Expr) IAclDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aclDo) Having(conds ...gen.Condition) IAclDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aclDo) Limit(limit int) IAclDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aclDo) Offset(offset int) IAclDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aclDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAclDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aclDo) Unscoped() IAclDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aclDo) Create(values ...*model.Acl) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aclDo) CreateInBatches(values []*model.Acl, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aclDo) Save(values ...*model.Acl) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aclDo) First() (*model.Acl, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Acl), nil
	}
}

func (a aclDo) Take() (*model.Acl, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Acl), nil
	}
}

func (a aclDo) Last() (*model.Acl, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Acl), nil
	}
}

func (a aclDo) Find() ([]*model.Acl, error) {
	result, err := a.DO.Find()
	return result.([]*model.Acl), err
}

func (a aclDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Acl, err error) {
	buf := make([]*model.Acl, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aclDo) FindInBatches(result *[]*model.Acl, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aclDo) Attrs(attrs ...field.AssignExpr) IAclDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aclDo) Assign(attrs ...field.AssignExpr) IAclDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aclDo) Joins(fields ...field.RelationField) IAclDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aclDo) Preload(fields ...field.RelationField) IAclDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aclDo) FirstOrInit() (*model.Acl, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Acl), nil
	}
}

func (a aclDo) FirstOrCreate() (*model.Acl, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Acl), nil
	}
}

func (a aclDo) FindByPage(offset int, limit int) (result []*model.Acl, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aclDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aclDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aclDo) Delete(models ...*model.Acl) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aclDo) withDO(do gen.Dao) *aclDo {
	a.DO = *do.(*gen.DO)
	return a
}
