// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newWebUploadCache(db *gorm.DB, opts ...gen.DOOption) webUploadCache {
	_webUploadCache := webUploadCache{}

	_webUploadCache.webUploadCacheDo.UseDB(db, opts...)
	_webUploadCache.webUploadCacheDo.UseModel(&model.WebUploadCache{})

	tableName := _webUploadCache.webUploadCacheDo.TableName()
	_webUploadCache.ALL = field.NewAsterisk(tableName)
	_webUploadCache.FormID = field.NewString(tableName, "form_id")
	_webUploadCache.Filename = field.NewString(tableName, "filename")
	_webUploadCache.ContentID = field.NewString(tableName, "content_id")
	_webUploadCache.ContentSize = field.NewString(tableName, "content_size")
	_webUploadCache.ContentType = field.NewString(tableName, "content_type")
	_webUploadCache.Disposition = field.NewString(tableName, "disposition")
	_webUploadCache.Content = field.NewBytes(tableName, "content")
	_webUploadCache.CreateTimeUnix = field.NewInt64(tableName, "create_time_unix")

	_webUploadCache.fillFieldMap()

	return _webUploadCache
}

type webUploadCache struct {
	webUploadCacheDo

	ALL            field.Asterisk
	FormID         field.String
	Filename       field.String
	ContentID      field.String
	ContentSize    field.String
	ContentType    field.String
	Disposition    field.String
	Content        field.Bytes
	CreateTimeUnix field.Int64

	fieldMap map[string]field.Expr
}

func (w webUploadCache) Table(newTableName string) *webUploadCache {
	w.webUploadCacheDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w webUploadCache) As(alias string) *webUploadCache {
	w.webUploadCacheDo.DO = *(w.webUploadCacheDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *webUploadCache) updateTableName(table string) *webUploadCache {
	w.ALL = field.NewAsterisk(table)
	w.FormID = field.NewString(table, "form_id")
	w.Filename = field.NewString(table, "filename")
	w.ContentID = field.NewString(table, "content_id")
	w.ContentSize = field.NewString(table, "content_size")
	w.ContentType = field.NewString(table, "content_type")
	w.Disposition = field.NewString(table, "disposition")
	w.Content = field.NewBytes(table, "content")
	w.CreateTimeUnix = field.NewInt64(table, "create_time_unix")

	w.fillFieldMap()

	return w
}

func (w *webUploadCache) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *webUploadCache) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 8)
	w.fieldMap["form_id"] = w.FormID
	w.fieldMap["filename"] = w.Filename
	w.fieldMap["content_id"] = w.ContentID
	w.fieldMap["content_size"] = w.ContentSize
	w.fieldMap["content_type"] = w.ContentType
	w.fieldMap["disposition"] = w.Disposition
	w.fieldMap["content"] = w.Content
	w.fieldMap["create_time_unix"] = w.CreateTimeUnix
}

func (w webUploadCache) clone(db *gorm.DB) webUploadCache {
	w.webUploadCacheDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w webUploadCache) replaceDB(db *gorm.DB) webUploadCache {
	w.webUploadCacheDo.ReplaceDB(db)
	return w
}

type webUploadCacheDo struct{ gen.DO }

type IWebUploadCacheDo interface {
	gen.SubQuery
	Debug() IWebUploadCacheDo
	WithContext(ctx context.Context) IWebUploadCacheDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWebUploadCacheDo
	WriteDB() IWebUploadCacheDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWebUploadCacheDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWebUploadCacheDo
	Not(conds ...gen.Condition) IWebUploadCacheDo
	Or(conds ...gen.Condition) IWebUploadCacheDo
	Select(conds ...field.Expr) IWebUploadCacheDo
	Where(conds ...gen.Condition) IWebUploadCacheDo
	Order(conds ...field.Expr) IWebUploadCacheDo
	Distinct(cols ...field.Expr) IWebUploadCacheDo
	Omit(cols ...field.Expr) IWebUploadCacheDo
	Join(table schema.Tabler, on ...field.Expr) IWebUploadCacheDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWebUploadCacheDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWebUploadCacheDo
	Group(cols ...field.Expr) IWebUploadCacheDo
	Having(conds ...gen.Condition) IWebUploadCacheDo
	Limit(limit int) IWebUploadCacheDo
	Offset(offset int) IWebUploadCacheDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWebUploadCacheDo
	Unscoped() IWebUploadCacheDo
	Create(values ...*model.WebUploadCache) error
	CreateInBatches(values []*model.WebUploadCache, batchSize int) error
	Save(values ...*model.WebUploadCache) error
	First() (*model.WebUploadCache, error)
	Take() (*model.WebUploadCache, error)
	Last() (*model.WebUploadCache, error)
	Find() ([]*model.WebUploadCache, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebUploadCache, err error)
	FindInBatches(result *[]*model.WebUploadCache, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WebUploadCache) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWebUploadCacheDo
	Assign(attrs ...field.AssignExpr) IWebUploadCacheDo
	Joins(fields ...field.RelationField) IWebUploadCacheDo
	Preload(fields ...field.RelationField) IWebUploadCacheDo
	FirstOrInit() (*model.WebUploadCache, error)
	FirstOrCreate() (*model.WebUploadCache, error)
	FindByPage(offset int, limit int) (result []*model.WebUploadCache, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWebUploadCacheDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w webUploadCacheDo) Debug() IWebUploadCacheDo {
	return w.withDO(w.DO.Debug())
}

func (w webUploadCacheDo) WithContext(ctx context.Context) IWebUploadCacheDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w webUploadCacheDo) ReadDB() IWebUploadCacheDo {
	return w.Clauses(dbresolver.Read)
}

func (w webUploadCacheDo) WriteDB() IWebUploadCacheDo {
	return w.Clauses(dbresolver.Write)
}

func (w webUploadCacheDo) Session(config *gorm.Session) IWebUploadCacheDo {
	return w.withDO(w.DO.Session(config))
}

func (w webUploadCacheDo) Clauses(conds ...clause.Expression) IWebUploadCacheDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w webUploadCacheDo) Returning(value interface{}, columns ...string) IWebUploadCacheDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w webUploadCacheDo) Not(conds ...gen.Condition) IWebUploadCacheDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w webUploadCacheDo) Or(conds ...gen.Condition) IWebUploadCacheDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w webUploadCacheDo) Select(conds ...field.Expr) IWebUploadCacheDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w webUploadCacheDo) Where(conds ...gen.Condition) IWebUploadCacheDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w webUploadCacheDo) Order(conds ...field.Expr) IWebUploadCacheDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w webUploadCacheDo) Distinct(cols ...field.Expr) IWebUploadCacheDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w webUploadCacheDo) Omit(cols ...field.Expr) IWebUploadCacheDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w webUploadCacheDo) Join(table schema.Tabler, on ...field.Expr) IWebUploadCacheDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w webUploadCacheDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWebUploadCacheDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w webUploadCacheDo) RightJoin(table schema.Tabler, on ...field.Expr) IWebUploadCacheDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w webUploadCacheDo) Group(cols ...field.Expr) IWebUploadCacheDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w webUploadCacheDo) Having(conds ...gen.Condition) IWebUploadCacheDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w webUploadCacheDo) Limit(limit int) IWebUploadCacheDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w webUploadCacheDo) Offset(offset int) IWebUploadCacheDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w webUploadCacheDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWebUploadCacheDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w webUploadCacheDo) Unscoped() IWebUploadCacheDo {
	return w.withDO(w.DO.Unscoped())
}

func (w webUploadCacheDo) Create(values ...*model.WebUploadCache) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w webUploadCacheDo) CreateInBatches(values []*model.WebUploadCache, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w webUploadCacheDo) Save(values ...*model.WebUploadCache) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w webUploadCacheDo) First() (*model.WebUploadCache, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebUploadCache), nil
	}
}

func (w webUploadCacheDo) Take() (*model.WebUploadCache, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebUploadCache), nil
	}
}

func (w webUploadCacheDo) Last() (*model.WebUploadCache, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebUploadCache), nil
	}
}

func (w webUploadCacheDo) Find() ([]*model.WebUploadCache, error) {
	result, err := w.DO.Find()
	return result.([]*model.WebUploadCache), err
}

func (w webUploadCacheDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebUploadCache, err error) {
	buf := make([]*model.WebUploadCache, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w webUploadCacheDo) FindInBatches(result *[]*model.WebUploadCache, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w webUploadCacheDo) Attrs(attrs ...field.AssignExpr) IWebUploadCacheDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w webUploadCacheDo) Assign(attrs ...field.AssignExpr) IWebUploadCacheDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w webUploadCacheDo) Joins(fields ...field.RelationField) IWebUploadCacheDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w webUploadCacheDo) Preload(fields ...field.RelationField) IWebUploadCacheDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w webUploadCacheDo) FirstOrInit() (*model.WebUploadCache, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebUploadCache), nil
	}
}

func (w webUploadCacheDo) FirstOrCreate() (*model.WebUploadCache, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebUploadCache), nil
	}
}

func (w webUploadCacheDo) FindByPage(offset int, limit int) (result []*model.WebUploadCache, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w webUploadCacheDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w webUploadCacheDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w webUploadCacheDo) Delete(models ...*model.WebUploadCache) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *webUploadCacheDo) withDO(do gen.Dao) *webUploadCacheDo {
	w.DO = *do.(*gen.DO)
	return w
}
