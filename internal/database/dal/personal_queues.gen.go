// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newPersonalQueue(db *gorm.DB, opts ...gen.DOOption) personalQueue {
	_personalQueue := personalQueue{}

	_personalQueue.personalQueueDo.UseDB(db, opts...)
	_personalQueue.personalQueueDo.UseModel(&model.PersonalQueue{})

	tableName := _personalQueue.personalQueueDo.TableName()
	_personalQueue.ALL = field.NewAsterisk(tableName)
	_personalQueue.UserID = field.NewInt32(tableName, "user_id")
	_personalQueue.QueueID = field.NewInt32(tableName, "queue_id")

	_personalQueue.fillFieldMap()

	return _personalQueue
}

type personalQueue struct {
	personalQueueDo

	ALL     field.Asterisk
	UserID  field.Int32
	QueueID field.Int32

	fieldMap map[string]field.Expr
}

func (p personalQueue) Table(newTableName string) *personalQueue {
	p.personalQueueDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p personalQueue) As(alias string) *personalQueue {
	p.personalQueueDo.DO = *(p.personalQueueDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *personalQueue) updateTableName(table string) *personalQueue {
	p.ALL = field.NewAsterisk(table)
	p.UserID = field.NewInt32(table, "user_id")
	p.QueueID = field.NewInt32(table, "queue_id")

	p.fillFieldMap()

	return p
}

func (p *personalQueue) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *personalQueue) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 2)
	p.fieldMap["user_id"] = p.UserID
	p.fieldMap["queue_id"] = p.QueueID
}

func (p personalQueue) clone(db *gorm.DB) personalQueue {
	p.personalQueueDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p personalQueue) replaceDB(db *gorm.DB) personalQueue {
	p.personalQueueDo.ReplaceDB(db)
	return p
}

type personalQueueDo struct{ gen.DO }

type IPersonalQueueDo interface {
	gen.SubQuery
	Debug() IPersonalQueueDo
	WithContext(ctx context.Context) IPersonalQueueDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPersonalQueueDo
	WriteDB() IPersonalQueueDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPersonalQueueDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPersonalQueueDo
	Not(conds ...gen.Condition) IPersonalQueueDo
	Or(conds ...gen.Condition) IPersonalQueueDo
	Select(conds ...field.Expr) IPersonalQueueDo
	Where(conds ...gen.Condition) IPersonalQueueDo
	Order(conds ...field.Expr) IPersonalQueueDo
	Distinct(cols ...field.Expr) IPersonalQueueDo
	Omit(cols ...field.Expr) IPersonalQueueDo
	Join(table schema.Tabler, on ...field.Expr) IPersonalQueueDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPersonalQueueDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPersonalQueueDo
	Group(cols ...field.Expr) IPersonalQueueDo
	Having(conds ...gen.Condition) IPersonalQueueDo
	Limit(limit int) IPersonalQueueDo
	Offset(offset int) IPersonalQueueDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPersonalQueueDo
	Unscoped() IPersonalQueueDo
	Create(values ...*model.PersonalQueue) error
	CreateInBatches(values []*model.PersonalQueue, batchSize int) error
	Save(values ...*model.PersonalQueue) error
	First() (*model.PersonalQueue, error)
	Take() (*model.PersonalQueue, error)
	Last() (*model.PersonalQueue, error)
	Find() ([]*model.PersonalQueue, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PersonalQueue, err error)
	FindInBatches(result *[]*model.PersonalQueue, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PersonalQueue) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPersonalQueueDo
	Assign(attrs ...field.AssignExpr) IPersonalQueueDo
	Joins(fields ...field.RelationField) IPersonalQueueDo
	Preload(fields ...field.RelationField) IPersonalQueueDo
	FirstOrInit() (*model.PersonalQueue, error)
	FirstOrCreate() (*model.PersonalQueue, error)
	FindByPage(offset int, limit int) (result []*model.PersonalQueue, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPersonalQueueDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p personalQueueDo) Debug() IPersonalQueueDo {
	return p.withDO(p.DO.Debug())
}

func (p personalQueueDo) WithContext(ctx context.Context) IPersonalQueueDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p personalQueueDo) ReadDB() IPersonalQueueDo {
	return p.Clauses(dbresolver.Read)
}

func (p personalQueueDo) WriteDB() IPersonalQueueDo {
	return p.Clauses(dbresolver.Write)
}

func (p personalQueueDo) Session(config *gorm.Session) IPersonalQueueDo {
	return p.withDO(p.DO.Session(config))
}

func (p personalQueueDo) Clauses(conds ...clause.Expression) IPersonalQueueDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p personalQueueDo) Returning(value interface{}, columns ...string) IPersonalQueueDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p personalQueueDo) Not(conds ...gen.Condition) IPersonalQueueDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p personalQueueDo) Or(conds ...gen.Condition) IPersonalQueueDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p personalQueueDo) Select(conds ...field.Expr) IPersonalQueueDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p personalQueueDo) Where(conds ...gen.Condition) IPersonalQueueDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p personalQueueDo) Order(conds ...field.Expr) IPersonalQueueDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p personalQueueDo) Distinct(cols ...field.Expr) IPersonalQueueDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p personalQueueDo) Omit(cols ...field.Expr) IPersonalQueueDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p personalQueueDo) Join(table schema.Tabler, on ...field.Expr) IPersonalQueueDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p personalQueueDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPersonalQueueDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p personalQueueDo) RightJoin(table schema.Tabler, on ...field.Expr) IPersonalQueueDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p personalQueueDo) Group(cols ...field.Expr) IPersonalQueueDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p personalQueueDo) Having(conds ...gen.Condition) IPersonalQueueDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p personalQueueDo) Limit(limit int) IPersonalQueueDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p personalQueueDo) Offset(offset int) IPersonalQueueDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p personalQueueDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPersonalQueueDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p personalQueueDo) Unscoped() IPersonalQueueDo {
	return p.withDO(p.DO.Unscoped())
}

func (p personalQueueDo) Create(values ...*model.PersonalQueue) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p personalQueueDo) CreateInBatches(values []*model.PersonalQueue, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p personalQueueDo) Save(values ...*model.PersonalQueue) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p personalQueueDo) First() (*model.PersonalQueue, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PersonalQueue), nil
	}
}

func (p personalQueueDo) Take() (*model.PersonalQueue, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PersonalQueue), nil
	}
}

func (p personalQueueDo) Last() (*model.PersonalQueue, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PersonalQueue), nil
	}
}

func (p personalQueueDo) Find() ([]*model.PersonalQueue, error) {
	result, err := p.DO.Find()
	return result.([]*model.PersonalQueue), err
}

func (p personalQueueDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PersonalQueue, err error) {
	buf := make([]*model.PersonalQueue, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p personalQueueDo) FindInBatches(result *[]*model.PersonalQueue, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p personalQueueDo) Attrs(attrs ...field.AssignExpr) IPersonalQueueDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p personalQueueDo) Assign(attrs ...field.AssignExpr) IPersonalQueueDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p personalQueueDo) Joins(fields ...field.RelationField) IPersonalQueueDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p personalQueueDo) Preload(fields ...field.RelationField) IPersonalQueueDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p personalQueueDo) FirstOrInit() (*model.PersonalQueue, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PersonalQueue), nil
	}
}

func (p personalQueueDo) FirstOrCreate() (*model.PersonalQueue, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PersonalQueue), nil
	}
}

func (p personalQueueDo) FindByPage(offset int, limit int) (result []*model.PersonalQueue, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p personalQueueDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p personalQueueDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p personalQueueDo) Delete(models ...*model.PersonalQueue) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *personalQueueDo) withDO(do gen.Dao) *personalQueueDo {
	p.DO = *do.(*gen.DO)
	return p
}
