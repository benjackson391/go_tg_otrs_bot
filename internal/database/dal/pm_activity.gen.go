// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newPmActivity(db *gorm.DB, opts ...gen.DOOption) pmActivity {
	_pmActivity := pmActivity{}

	_pmActivity.pmActivityDo.UseDB(db, opts...)
	_pmActivity.pmActivityDo.UseModel(&model.PmActivity{})

	tableName := _pmActivity.pmActivityDo.TableName()
	_pmActivity.ALL = field.NewAsterisk(tableName)
	_pmActivity.ID = field.NewInt32(tableName, "id")
	_pmActivity.EntityID = field.NewString(tableName, "entity_id")
	_pmActivity.Name = field.NewString(tableName, "name")
	_pmActivity.Config = field.NewBytes(tableName, "config")
	_pmActivity.CreateTime = field.NewTime(tableName, "create_time")
	_pmActivity.CreateBy = field.NewInt32(tableName, "create_by")
	_pmActivity.ChangeTime = field.NewTime(tableName, "change_time")
	_pmActivity.ChangeBy = field.NewInt32(tableName, "change_by")

	_pmActivity.fillFieldMap()

	return _pmActivity
}

type pmActivity struct {
	pmActivityDo

	ALL        field.Asterisk
	ID         field.Int32
	EntityID   field.String
	Name       field.String
	Config     field.Bytes
	CreateTime field.Time
	CreateBy   field.Int32
	ChangeTime field.Time
	ChangeBy   field.Int32

	fieldMap map[string]field.Expr
}

func (p pmActivity) Table(newTableName string) *pmActivity {
	p.pmActivityDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmActivity) As(alias string) *pmActivity {
	p.pmActivityDo.DO = *(p.pmActivityDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmActivity) updateTableName(table string) *pmActivity {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.EntityID = field.NewString(table, "entity_id")
	p.Name = field.NewString(table, "name")
	p.Config = field.NewBytes(table, "config")
	p.CreateTime = field.NewTime(table, "create_time")
	p.CreateBy = field.NewInt32(table, "create_by")
	p.ChangeTime = field.NewTime(table, "change_time")
	p.ChangeBy = field.NewInt32(table, "change_by")

	p.fillFieldMap()

	return p
}

func (p *pmActivity) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmActivity) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.ID
	p.fieldMap["entity_id"] = p.EntityID
	p.fieldMap["name"] = p.Name
	p.fieldMap["config"] = p.Config
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["create_by"] = p.CreateBy
	p.fieldMap["change_time"] = p.ChangeTime
	p.fieldMap["change_by"] = p.ChangeBy
}

func (p pmActivity) clone(db *gorm.DB) pmActivity {
	p.pmActivityDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmActivity) replaceDB(db *gorm.DB) pmActivity {
	p.pmActivityDo.ReplaceDB(db)
	return p
}

type pmActivityDo struct{ gen.DO }

type IPmActivityDo interface {
	gen.SubQuery
	Debug() IPmActivityDo
	WithContext(ctx context.Context) IPmActivityDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPmActivityDo
	WriteDB() IPmActivityDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPmActivityDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPmActivityDo
	Not(conds ...gen.Condition) IPmActivityDo
	Or(conds ...gen.Condition) IPmActivityDo
	Select(conds ...field.Expr) IPmActivityDo
	Where(conds ...gen.Condition) IPmActivityDo
	Order(conds ...field.Expr) IPmActivityDo
	Distinct(cols ...field.Expr) IPmActivityDo
	Omit(cols ...field.Expr) IPmActivityDo
	Join(table schema.Tabler, on ...field.Expr) IPmActivityDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPmActivityDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPmActivityDo
	Group(cols ...field.Expr) IPmActivityDo
	Having(conds ...gen.Condition) IPmActivityDo
	Limit(limit int) IPmActivityDo
	Offset(offset int) IPmActivityDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPmActivityDo
	Unscoped() IPmActivityDo
	Create(values ...*model.PmActivity) error
	CreateInBatches(values []*model.PmActivity, batchSize int) error
	Save(values ...*model.PmActivity) error
	First() (*model.PmActivity, error)
	Take() (*model.PmActivity, error)
	Last() (*model.PmActivity, error)
	Find() ([]*model.PmActivity, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmActivity, err error)
	FindInBatches(result *[]*model.PmActivity, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PmActivity) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPmActivityDo
	Assign(attrs ...field.AssignExpr) IPmActivityDo
	Joins(fields ...field.RelationField) IPmActivityDo
	Preload(fields ...field.RelationField) IPmActivityDo
	FirstOrInit() (*model.PmActivity, error)
	FirstOrCreate() (*model.PmActivity, error)
	FindByPage(offset int, limit int) (result []*model.PmActivity, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPmActivityDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pmActivityDo) Debug() IPmActivityDo {
	return p.withDO(p.DO.Debug())
}

func (p pmActivityDo) WithContext(ctx context.Context) IPmActivityDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmActivityDo) ReadDB() IPmActivityDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmActivityDo) WriteDB() IPmActivityDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmActivityDo) Session(config *gorm.Session) IPmActivityDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmActivityDo) Clauses(conds ...clause.Expression) IPmActivityDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmActivityDo) Returning(value interface{}, columns ...string) IPmActivityDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmActivityDo) Not(conds ...gen.Condition) IPmActivityDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmActivityDo) Or(conds ...gen.Condition) IPmActivityDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmActivityDo) Select(conds ...field.Expr) IPmActivityDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmActivityDo) Where(conds ...gen.Condition) IPmActivityDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmActivityDo) Order(conds ...field.Expr) IPmActivityDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmActivityDo) Distinct(cols ...field.Expr) IPmActivityDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmActivityDo) Omit(cols ...field.Expr) IPmActivityDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmActivityDo) Join(table schema.Tabler, on ...field.Expr) IPmActivityDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmActivityDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPmActivityDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmActivityDo) RightJoin(table schema.Tabler, on ...field.Expr) IPmActivityDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmActivityDo) Group(cols ...field.Expr) IPmActivityDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmActivityDo) Having(conds ...gen.Condition) IPmActivityDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmActivityDo) Limit(limit int) IPmActivityDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmActivityDo) Offset(offset int) IPmActivityDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmActivityDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPmActivityDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmActivityDo) Unscoped() IPmActivityDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmActivityDo) Create(values ...*model.PmActivity) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmActivityDo) CreateInBatches(values []*model.PmActivity, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmActivityDo) Save(values ...*model.PmActivity) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmActivityDo) First() (*model.PmActivity, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmActivity), nil
	}
}

func (p pmActivityDo) Take() (*model.PmActivity, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmActivity), nil
	}
}

func (p pmActivityDo) Last() (*model.PmActivity, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmActivity), nil
	}
}

func (p pmActivityDo) Find() ([]*model.PmActivity, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmActivity), err
}

func (p pmActivityDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmActivity, err error) {
	buf := make([]*model.PmActivity, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmActivityDo) FindInBatches(result *[]*model.PmActivity, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmActivityDo) Attrs(attrs ...field.AssignExpr) IPmActivityDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmActivityDo) Assign(attrs ...field.AssignExpr) IPmActivityDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmActivityDo) Joins(fields ...field.RelationField) IPmActivityDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmActivityDo) Preload(fields ...field.RelationField) IPmActivityDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmActivityDo) FirstOrInit() (*model.PmActivity, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmActivity), nil
	}
}

func (p pmActivityDo) FirstOrCreate() (*model.PmActivity, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmActivity), nil
	}
}

func (p pmActivityDo) FindByPage(offset int, limit int) (result []*model.PmActivity, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmActivityDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmActivityDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmActivityDo) Delete(models ...*model.PmActivity) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmActivityDo) withDO(do gen.Dao) *pmActivityDo {
	p.DO = *do.(*gen.DO)
	return p
}
