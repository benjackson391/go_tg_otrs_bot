// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newSysconfigDefault(db *gorm.DB, opts ...gen.DOOption) sysconfigDefault {
	_sysconfigDefault := sysconfigDefault{}

	_sysconfigDefault.sysconfigDefaultDo.UseDB(db, opts...)
	_sysconfigDefault.sysconfigDefaultDo.UseModel(&model.SysconfigDefault{})

	tableName := _sysconfigDefault.sysconfigDefaultDo.TableName()
	_sysconfigDefault.ALL = field.NewAsterisk(tableName)
	_sysconfigDefault.ID = field.NewInt32(tableName, "id")
	_sysconfigDefault.Name = field.NewString(tableName, "name")
	_sysconfigDefault.Description = field.NewBytes(tableName, "description")
	_sysconfigDefault.Navigation = field.NewString(tableName, "navigation")
	_sysconfigDefault.IsInvisible = field.NewInt32(tableName, "is_invisible")
	_sysconfigDefault.IsReadonly = field.NewInt32(tableName, "is_readonly")
	_sysconfigDefault.IsRequired = field.NewInt32(tableName, "is_required")
	_sysconfigDefault.IsValid = field.NewInt32(tableName, "is_valid")
	_sysconfigDefault.HasConfiglevel = field.NewInt32(tableName, "has_configlevel")
	_sysconfigDefault.UserModificationPossible = field.NewInt32(tableName, "user_modification_possible")
	_sysconfigDefault.UserModificationActive = field.NewInt32(tableName, "user_modification_active")
	_sysconfigDefault.UserPreferencesGroup = field.NewString(tableName, "user_preferences_group")
	_sysconfigDefault.XMLContentRaw = field.NewBytes(tableName, "xml_content_raw")
	_sysconfigDefault.XMLContentParsed = field.NewBytes(tableName, "xml_content_parsed")
	_sysconfigDefault.XMLFilename = field.NewString(tableName, "xml_filename")
	_sysconfigDefault.EffectiveValue = field.NewBytes(tableName, "effective_value")
	_sysconfigDefault.IsDirty = field.NewInt32(tableName, "is_dirty")
	_sysconfigDefault.ExclusiveLockGUID = field.NewString(tableName, "exclusive_lock_guid")
	_sysconfigDefault.ExclusiveLockUserID = field.NewInt32(tableName, "exclusive_lock_user_id")
	_sysconfigDefault.ExclusiveLockExpiryTime = field.NewTime(tableName, "exclusive_lock_expiry_time")
	_sysconfigDefault.CreateTime = field.NewTime(tableName, "create_time")
	_sysconfigDefault.CreateBy = field.NewInt32(tableName, "create_by")
	_sysconfigDefault.ChangeTime = field.NewTime(tableName, "change_time")
	_sysconfigDefault.ChangeBy = field.NewInt32(tableName, "change_by")

	_sysconfigDefault.fillFieldMap()

	return _sysconfigDefault
}

type sysconfigDefault struct {
	sysconfigDefaultDo

	ALL                      field.Asterisk
	ID                       field.Int32
	Name                     field.String
	Description              field.Bytes
	Navigation               field.String
	IsInvisible              field.Int32
	IsReadonly               field.Int32
	IsRequired               field.Int32
	IsValid                  field.Int32
	HasConfiglevel           field.Int32
	UserModificationPossible field.Int32
	UserModificationActive   field.Int32
	UserPreferencesGroup     field.String
	XMLContentRaw            field.Bytes
	XMLContentParsed         field.Bytes
	XMLFilename              field.String
	EffectiveValue           field.Bytes
	IsDirty                  field.Int32
	ExclusiveLockGUID        field.String
	ExclusiveLockUserID      field.Int32
	ExclusiveLockExpiryTime  field.Time
	CreateTime               field.Time
	CreateBy                 field.Int32
	ChangeTime               field.Time
	ChangeBy                 field.Int32

	fieldMap map[string]field.Expr
}

func (s sysconfigDefault) Table(newTableName string) *sysconfigDefault {
	s.sysconfigDefaultDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysconfigDefault) As(alias string) *sysconfigDefault {
	s.sysconfigDefaultDo.DO = *(s.sysconfigDefaultDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysconfigDefault) updateTableName(table string) *sysconfigDefault {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.Name = field.NewString(table, "name")
	s.Description = field.NewBytes(table, "description")
	s.Navigation = field.NewString(table, "navigation")
	s.IsInvisible = field.NewInt32(table, "is_invisible")
	s.IsReadonly = field.NewInt32(table, "is_readonly")
	s.IsRequired = field.NewInt32(table, "is_required")
	s.IsValid = field.NewInt32(table, "is_valid")
	s.HasConfiglevel = field.NewInt32(table, "has_configlevel")
	s.UserModificationPossible = field.NewInt32(table, "user_modification_possible")
	s.UserModificationActive = field.NewInt32(table, "user_modification_active")
	s.UserPreferencesGroup = field.NewString(table, "user_preferences_group")
	s.XMLContentRaw = field.NewBytes(table, "xml_content_raw")
	s.XMLContentParsed = field.NewBytes(table, "xml_content_parsed")
	s.XMLFilename = field.NewString(table, "xml_filename")
	s.EffectiveValue = field.NewBytes(table, "effective_value")
	s.IsDirty = field.NewInt32(table, "is_dirty")
	s.ExclusiveLockGUID = field.NewString(table, "exclusive_lock_guid")
	s.ExclusiveLockUserID = field.NewInt32(table, "exclusive_lock_user_id")
	s.ExclusiveLockExpiryTime = field.NewTime(table, "exclusive_lock_expiry_time")
	s.CreateTime = field.NewTime(table, "create_time")
	s.CreateBy = field.NewInt32(table, "create_by")
	s.ChangeTime = field.NewTime(table, "change_time")
	s.ChangeBy = field.NewInt32(table, "change_by")

	s.fillFieldMap()

	return s
}

func (s *sysconfigDefault) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysconfigDefault) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 24)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["description"] = s.Description
	s.fieldMap["navigation"] = s.Navigation
	s.fieldMap["is_invisible"] = s.IsInvisible
	s.fieldMap["is_readonly"] = s.IsReadonly
	s.fieldMap["is_required"] = s.IsRequired
	s.fieldMap["is_valid"] = s.IsValid
	s.fieldMap["has_configlevel"] = s.HasConfiglevel
	s.fieldMap["user_modification_possible"] = s.UserModificationPossible
	s.fieldMap["user_modification_active"] = s.UserModificationActive
	s.fieldMap["user_preferences_group"] = s.UserPreferencesGroup
	s.fieldMap["xml_content_raw"] = s.XMLContentRaw
	s.fieldMap["xml_content_parsed"] = s.XMLContentParsed
	s.fieldMap["xml_filename"] = s.XMLFilename
	s.fieldMap["effective_value"] = s.EffectiveValue
	s.fieldMap["is_dirty"] = s.IsDirty
	s.fieldMap["exclusive_lock_guid"] = s.ExclusiveLockGUID
	s.fieldMap["exclusive_lock_user_id"] = s.ExclusiveLockUserID
	s.fieldMap["exclusive_lock_expiry_time"] = s.ExclusiveLockExpiryTime
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["change_time"] = s.ChangeTime
	s.fieldMap["change_by"] = s.ChangeBy
}

func (s sysconfigDefault) clone(db *gorm.DB) sysconfigDefault {
	s.sysconfigDefaultDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysconfigDefault) replaceDB(db *gorm.DB) sysconfigDefault {
	s.sysconfigDefaultDo.ReplaceDB(db)
	return s
}

type sysconfigDefaultDo struct{ gen.DO }

type ISysconfigDefaultDo interface {
	gen.SubQuery
	Debug() ISysconfigDefaultDo
	WithContext(ctx context.Context) ISysconfigDefaultDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysconfigDefaultDo
	WriteDB() ISysconfigDefaultDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysconfigDefaultDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysconfigDefaultDo
	Not(conds ...gen.Condition) ISysconfigDefaultDo
	Or(conds ...gen.Condition) ISysconfigDefaultDo
	Select(conds ...field.Expr) ISysconfigDefaultDo
	Where(conds ...gen.Condition) ISysconfigDefaultDo
	Order(conds ...field.Expr) ISysconfigDefaultDo
	Distinct(cols ...field.Expr) ISysconfigDefaultDo
	Omit(cols ...field.Expr) ISysconfigDefaultDo
	Join(table schema.Tabler, on ...field.Expr) ISysconfigDefaultDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysconfigDefaultDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysconfigDefaultDo
	Group(cols ...field.Expr) ISysconfigDefaultDo
	Having(conds ...gen.Condition) ISysconfigDefaultDo
	Limit(limit int) ISysconfigDefaultDo
	Offset(offset int) ISysconfigDefaultDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysconfigDefaultDo
	Unscoped() ISysconfigDefaultDo
	Create(values ...*model.SysconfigDefault) error
	CreateInBatches(values []*model.SysconfigDefault, batchSize int) error
	Save(values ...*model.SysconfigDefault) error
	First() (*model.SysconfigDefault, error)
	Take() (*model.SysconfigDefault, error)
	Last() (*model.SysconfigDefault, error)
	Find() ([]*model.SysconfigDefault, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysconfigDefault, err error)
	FindInBatches(result *[]*model.SysconfigDefault, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysconfigDefault) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysconfigDefaultDo
	Assign(attrs ...field.AssignExpr) ISysconfigDefaultDo
	Joins(fields ...field.RelationField) ISysconfigDefaultDo
	Preload(fields ...field.RelationField) ISysconfigDefaultDo
	FirstOrInit() (*model.SysconfigDefault, error)
	FirstOrCreate() (*model.SysconfigDefault, error)
	FindByPage(offset int, limit int) (result []*model.SysconfigDefault, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysconfigDefaultDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysconfigDefaultDo) Debug() ISysconfigDefaultDo {
	return s.withDO(s.DO.Debug())
}

func (s sysconfigDefaultDo) WithContext(ctx context.Context) ISysconfigDefaultDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysconfigDefaultDo) ReadDB() ISysconfigDefaultDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysconfigDefaultDo) WriteDB() ISysconfigDefaultDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysconfigDefaultDo) Session(config *gorm.Session) ISysconfigDefaultDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysconfigDefaultDo) Clauses(conds ...clause.Expression) ISysconfigDefaultDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysconfigDefaultDo) Returning(value interface{}, columns ...string) ISysconfigDefaultDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysconfigDefaultDo) Not(conds ...gen.Condition) ISysconfigDefaultDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysconfigDefaultDo) Or(conds ...gen.Condition) ISysconfigDefaultDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysconfigDefaultDo) Select(conds ...field.Expr) ISysconfigDefaultDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysconfigDefaultDo) Where(conds ...gen.Condition) ISysconfigDefaultDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysconfigDefaultDo) Order(conds ...field.Expr) ISysconfigDefaultDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysconfigDefaultDo) Distinct(cols ...field.Expr) ISysconfigDefaultDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysconfigDefaultDo) Omit(cols ...field.Expr) ISysconfigDefaultDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysconfigDefaultDo) Join(table schema.Tabler, on ...field.Expr) ISysconfigDefaultDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysconfigDefaultDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysconfigDefaultDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysconfigDefaultDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysconfigDefaultDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysconfigDefaultDo) Group(cols ...field.Expr) ISysconfigDefaultDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysconfigDefaultDo) Having(conds ...gen.Condition) ISysconfigDefaultDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysconfigDefaultDo) Limit(limit int) ISysconfigDefaultDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysconfigDefaultDo) Offset(offset int) ISysconfigDefaultDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysconfigDefaultDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysconfigDefaultDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysconfigDefaultDo) Unscoped() ISysconfigDefaultDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysconfigDefaultDo) Create(values ...*model.SysconfigDefault) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysconfigDefaultDo) CreateInBatches(values []*model.SysconfigDefault, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysconfigDefaultDo) Save(values ...*model.SysconfigDefault) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysconfigDefaultDo) First() (*model.SysconfigDefault, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysconfigDefault), nil
	}
}

func (s sysconfigDefaultDo) Take() (*model.SysconfigDefault, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysconfigDefault), nil
	}
}

func (s sysconfigDefaultDo) Last() (*model.SysconfigDefault, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysconfigDefault), nil
	}
}

func (s sysconfigDefaultDo) Find() ([]*model.SysconfigDefault, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysconfigDefault), err
}

func (s sysconfigDefaultDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysconfigDefault, err error) {
	buf := make([]*model.SysconfigDefault, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysconfigDefaultDo) FindInBatches(result *[]*model.SysconfigDefault, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysconfigDefaultDo) Attrs(attrs ...field.AssignExpr) ISysconfigDefaultDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysconfigDefaultDo) Assign(attrs ...field.AssignExpr) ISysconfigDefaultDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysconfigDefaultDo) Joins(fields ...field.RelationField) ISysconfigDefaultDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysconfigDefaultDo) Preload(fields ...field.RelationField) ISysconfigDefaultDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysconfigDefaultDo) FirstOrInit() (*model.SysconfigDefault, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysconfigDefault), nil
	}
}

func (s sysconfigDefaultDo) FirstOrCreate() (*model.SysconfigDefault, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysconfigDefault), nil
	}
}

func (s sysconfigDefaultDo) FindByPage(offset int, limit int) (result []*model.SysconfigDefault, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysconfigDefaultDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysconfigDefaultDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysconfigDefaultDo) Delete(models ...*model.SysconfigDefault) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysconfigDefaultDo) withDO(do gen.Dao) *sysconfigDefaultDo {
	s.DO = *do.(*gen.DO)
	return s
}
