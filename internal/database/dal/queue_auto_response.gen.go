// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newQueueAutoResponse(db *gorm.DB, opts ...gen.DOOption) queueAutoResponse {
	_queueAutoResponse := queueAutoResponse{}

	_queueAutoResponse.queueAutoResponseDo.UseDB(db, opts...)
	_queueAutoResponse.queueAutoResponseDo.UseModel(&model.QueueAutoResponse{})

	tableName := _queueAutoResponse.queueAutoResponseDo.TableName()
	_queueAutoResponse.ALL = field.NewAsterisk(tableName)
	_queueAutoResponse.ID = field.NewInt32(tableName, "id")
	_queueAutoResponse.QueueID = field.NewInt32(tableName, "queue_id")
	_queueAutoResponse.AutoResponseID = field.NewInt32(tableName, "auto_response_id")
	_queueAutoResponse.CreateTime = field.NewTime(tableName, "create_time")
	_queueAutoResponse.CreateBy = field.NewInt32(tableName, "create_by")
	_queueAutoResponse.ChangeTime = field.NewTime(tableName, "change_time")
	_queueAutoResponse.ChangeBy = field.NewInt32(tableName, "change_by")

	_queueAutoResponse.fillFieldMap()

	return _queueAutoResponse
}

type queueAutoResponse struct {
	queueAutoResponseDo

	ALL            field.Asterisk
	ID             field.Int32
	QueueID        field.Int32
	AutoResponseID field.Int32
	CreateTime     field.Time
	CreateBy       field.Int32
	ChangeTime     field.Time
	ChangeBy       field.Int32

	fieldMap map[string]field.Expr
}

func (q queueAutoResponse) Table(newTableName string) *queueAutoResponse {
	q.queueAutoResponseDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q queueAutoResponse) As(alias string) *queueAutoResponse {
	q.queueAutoResponseDo.DO = *(q.queueAutoResponseDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *queueAutoResponse) updateTableName(table string) *queueAutoResponse {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt32(table, "id")
	q.QueueID = field.NewInt32(table, "queue_id")
	q.AutoResponseID = field.NewInt32(table, "auto_response_id")
	q.CreateTime = field.NewTime(table, "create_time")
	q.CreateBy = field.NewInt32(table, "create_by")
	q.ChangeTime = field.NewTime(table, "change_time")
	q.ChangeBy = field.NewInt32(table, "change_by")

	q.fillFieldMap()

	return q
}

func (q *queueAutoResponse) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *queueAutoResponse) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 7)
	q.fieldMap["id"] = q.ID
	q.fieldMap["queue_id"] = q.QueueID
	q.fieldMap["auto_response_id"] = q.AutoResponseID
	q.fieldMap["create_time"] = q.CreateTime
	q.fieldMap["create_by"] = q.CreateBy
	q.fieldMap["change_time"] = q.ChangeTime
	q.fieldMap["change_by"] = q.ChangeBy
}

func (q queueAutoResponse) clone(db *gorm.DB) queueAutoResponse {
	q.queueAutoResponseDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q queueAutoResponse) replaceDB(db *gorm.DB) queueAutoResponse {
	q.queueAutoResponseDo.ReplaceDB(db)
	return q
}

type queueAutoResponseDo struct{ gen.DO }

type IQueueAutoResponseDo interface {
	gen.SubQuery
	Debug() IQueueAutoResponseDo
	WithContext(ctx context.Context) IQueueAutoResponseDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQueueAutoResponseDo
	WriteDB() IQueueAutoResponseDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQueueAutoResponseDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQueueAutoResponseDo
	Not(conds ...gen.Condition) IQueueAutoResponseDo
	Or(conds ...gen.Condition) IQueueAutoResponseDo
	Select(conds ...field.Expr) IQueueAutoResponseDo
	Where(conds ...gen.Condition) IQueueAutoResponseDo
	Order(conds ...field.Expr) IQueueAutoResponseDo
	Distinct(cols ...field.Expr) IQueueAutoResponseDo
	Omit(cols ...field.Expr) IQueueAutoResponseDo
	Join(table schema.Tabler, on ...field.Expr) IQueueAutoResponseDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQueueAutoResponseDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQueueAutoResponseDo
	Group(cols ...field.Expr) IQueueAutoResponseDo
	Having(conds ...gen.Condition) IQueueAutoResponseDo
	Limit(limit int) IQueueAutoResponseDo
	Offset(offset int) IQueueAutoResponseDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQueueAutoResponseDo
	Unscoped() IQueueAutoResponseDo
	Create(values ...*model.QueueAutoResponse) error
	CreateInBatches(values []*model.QueueAutoResponse, batchSize int) error
	Save(values ...*model.QueueAutoResponse) error
	First() (*model.QueueAutoResponse, error)
	Take() (*model.QueueAutoResponse, error)
	Last() (*model.QueueAutoResponse, error)
	Find() ([]*model.QueueAutoResponse, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QueueAutoResponse, err error)
	FindInBatches(result *[]*model.QueueAutoResponse, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QueueAutoResponse) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQueueAutoResponseDo
	Assign(attrs ...field.AssignExpr) IQueueAutoResponseDo
	Joins(fields ...field.RelationField) IQueueAutoResponseDo
	Preload(fields ...field.RelationField) IQueueAutoResponseDo
	FirstOrInit() (*model.QueueAutoResponse, error)
	FirstOrCreate() (*model.QueueAutoResponse, error)
	FindByPage(offset int, limit int) (result []*model.QueueAutoResponse, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQueueAutoResponseDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q queueAutoResponseDo) Debug() IQueueAutoResponseDo {
	return q.withDO(q.DO.Debug())
}

func (q queueAutoResponseDo) WithContext(ctx context.Context) IQueueAutoResponseDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q queueAutoResponseDo) ReadDB() IQueueAutoResponseDo {
	return q.Clauses(dbresolver.Read)
}

func (q queueAutoResponseDo) WriteDB() IQueueAutoResponseDo {
	return q.Clauses(dbresolver.Write)
}

func (q queueAutoResponseDo) Session(config *gorm.Session) IQueueAutoResponseDo {
	return q.withDO(q.DO.Session(config))
}

func (q queueAutoResponseDo) Clauses(conds ...clause.Expression) IQueueAutoResponseDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q queueAutoResponseDo) Returning(value interface{}, columns ...string) IQueueAutoResponseDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q queueAutoResponseDo) Not(conds ...gen.Condition) IQueueAutoResponseDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q queueAutoResponseDo) Or(conds ...gen.Condition) IQueueAutoResponseDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q queueAutoResponseDo) Select(conds ...field.Expr) IQueueAutoResponseDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q queueAutoResponseDo) Where(conds ...gen.Condition) IQueueAutoResponseDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q queueAutoResponseDo) Order(conds ...field.Expr) IQueueAutoResponseDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q queueAutoResponseDo) Distinct(cols ...field.Expr) IQueueAutoResponseDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q queueAutoResponseDo) Omit(cols ...field.Expr) IQueueAutoResponseDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q queueAutoResponseDo) Join(table schema.Tabler, on ...field.Expr) IQueueAutoResponseDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q queueAutoResponseDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQueueAutoResponseDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q queueAutoResponseDo) RightJoin(table schema.Tabler, on ...field.Expr) IQueueAutoResponseDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q queueAutoResponseDo) Group(cols ...field.Expr) IQueueAutoResponseDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q queueAutoResponseDo) Having(conds ...gen.Condition) IQueueAutoResponseDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q queueAutoResponseDo) Limit(limit int) IQueueAutoResponseDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q queueAutoResponseDo) Offset(offset int) IQueueAutoResponseDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q queueAutoResponseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQueueAutoResponseDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q queueAutoResponseDo) Unscoped() IQueueAutoResponseDo {
	return q.withDO(q.DO.Unscoped())
}

func (q queueAutoResponseDo) Create(values ...*model.QueueAutoResponse) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q queueAutoResponseDo) CreateInBatches(values []*model.QueueAutoResponse, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q queueAutoResponseDo) Save(values ...*model.QueueAutoResponse) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q queueAutoResponseDo) First() (*model.QueueAutoResponse, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QueueAutoResponse), nil
	}
}

func (q queueAutoResponseDo) Take() (*model.QueueAutoResponse, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QueueAutoResponse), nil
	}
}

func (q queueAutoResponseDo) Last() (*model.QueueAutoResponse, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QueueAutoResponse), nil
	}
}

func (q queueAutoResponseDo) Find() ([]*model.QueueAutoResponse, error) {
	result, err := q.DO.Find()
	return result.([]*model.QueueAutoResponse), err
}

func (q queueAutoResponseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QueueAutoResponse, err error) {
	buf := make([]*model.QueueAutoResponse, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q queueAutoResponseDo) FindInBatches(result *[]*model.QueueAutoResponse, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q queueAutoResponseDo) Attrs(attrs ...field.AssignExpr) IQueueAutoResponseDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q queueAutoResponseDo) Assign(attrs ...field.AssignExpr) IQueueAutoResponseDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q queueAutoResponseDo) Joins(fields ...field.RelationField) IQueueAutoResponseDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q queueAutoResponseDo) Preload(fields ...field.RelationField) IQueueAutoResponseDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q queueAutoResponseDo) FirstOrInit() (*model.QueueAutoResponse, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QueueAutoResponse), nil
	}
}

func (q queueAutoResponseDo) FirstOrCreate() (*model.QueueAutoResponse, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QueueAutoResponse), nil
	}
}

func (q queueAutoResponseDo) FindByPage(offset int, limit int) (result []*model.QueueAutoResponse, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q queueAutoResponseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q queueAutoResponseDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q queueAutoResponseDo) Delete(models ...*model.QueueAutoResponse) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *queueAutoResponseDo) withDO(do gen.Dao) *queueAutoResponseDo {
	q.DO = *do.(*gen.DO)
	return q
}
