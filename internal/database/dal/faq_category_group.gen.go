// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newFaqCategoryGroup(db *gorm.DB, opts ...gen.DOOption) faqCategoryGroup {
	_faqCategoryGroup := faqCategoryGroup{}

	_faqCategoryGroup.faqCategoryGroupDo.UseDB(db, opts...)
	_faqCategoryGroup.faqCategoryGroupDo.UseModel(&model.FaqCategoryGroup{})

	tableName := _faqCategoryGroup.faqCategoryGroupDo.TableName()
	_faqCategoryGroup.ALL = field.NewAsterisk(tableName)
	_faqCategoryGroup.ID = field.NewInt32(tableName, "id")
	_faqCategoryGroup.CategoryID = field.NewInt32(tableName, "category_id")
	_faqCategoryGroup.GroupID = field.NewInt32(tableName, "group_id")
	_faqCategoryGroup.Created = field.NewTime(tableName, "created")
	_faqCategoryGroup.CreatedBy = field.NewInt32(tableName, "created_by")
	_faqCategoryGroup.Changed = field.NewTime(tableName, "changed")
	_faqCategoryGroup.ChangedBy = field.NewInt32(tableName, "changed_by")

	_faqCategoryGroup.fillFieldMap()

	return _faqCategoryGroup
}

type faqCategoryGroup struct {
	faqCategoryGroupDo

	ALL        field.Asterisk
	ID         field.Int32
	CategoryID field.Int32
	GroupID    field.Int32
	Created    field.Time
	CreatedBy  field.Int32
	Changed    field.Time
	ChangedBy  field.Int32

	fieldMap map[string]field.Expr
}

func (f faqCategoryGroup) Table(newTableName string) *faqCategoryGroup {
	f.faqCategoryGroupDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f faqCategoryGroup) As(alias string) *faqCategoryGroup {
	f.faqCategoryGroupDo.DO = *(f.faqCategoryGroupDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *faqCategoryGroup) updateTableName(table string) *faqCategoryGroup {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt32(table, "id")
	f.CategoryID = field.NewInt32(table, "category_id")
	f.GroupID = field.NewInt32(table, "group_id")
	f.Created = field.NewTime(table, "created")
	f.CreatedBy = field.NewInt32(table, "created_by")
	f.Changed = field.NewTime(table, "changed")
	f.ChangedBy = field.NewInt32(table, "changed_by")

	f.fillFieldMap()

	return f
}

func (f *faqCategoryGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *faqCategoryGroup) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 7)
	f.fieldMap["id"] = f.ID
	f.fieldMap["category_id"] = f.CategoryID
	f.fieldMap["group_id"] = f.GroupID
	f.fieldMap["created"] = f.Created
	f.fieldMap["created_by"] = f.CreatedBy
	f.fieldMap["changed"] = f.Changed
	f.fieldMap["changed_by"] = f.ChangedBy
}

func (f faqCategoryGroup) clone(db *gorm.DB) faqCategoryGroup {
	f.faqCategoryGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f faqCategoryGroup) replaceDB(db *gorm.DB) faqCategoryGroup {
	f.faqCategoryGroupDo.ReplaceDB(db)
	return f
}

type faqCategoryGroupDo struct{ gen.DO }

type IFaqCategoryGroupDo interface {
	gen.SubQuery
	Debug() IFaqCategoryGroupDo
	WithContext(ctx context.Context) IFaqCategoryGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFaqCategoryGroupDo
	WriteDB() IFaqCategoryGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFaqCategoryGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFaqCategoryGroupDo
	Not(conds ...gen.Condition) IFaqCategoryGroupDo
	Or(conds ...gen.Condition) IFaqCategoryGroupDo
	Select(conds ...field.Expr) IFaqCategoryGroupDo
	Where(conds ...gen.Condition) IFaqCategoryGroupDo
	Order(conds ...field.Expr) IFaqCategoryGroupDo
	Distinct(cols ...field.Expr) IFaqCategoryGroupDo
	Omit(cols ...field.Expr) IFaqCategoryGroupDo
	Join(table schema.Tabler, on ...field.Expr) IFaqCategoryGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFaqCategoryGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFaqCategoryGroupDo
	Group(cols ...field.Expr) IFaqCategoryGroupDo
	Having(conds ...gen.Condition) IFaqCategoryGroupDo
	Limit(limit int) IFaqCategoryGroupDo
	Offset(offset int) IFaqCategoryGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFaqCategoryGroupDo
	Unscoped() IFaqCategoryGroupDo
	Create(values ...*model.FaqCategoryGroup) error
	CreateInBatches(values []*model.FaqCategoryGroup, batchSize int) error
	Save(values ...*model.FaqCategoryGroup) error
	First() (*model.FaqCategoryGroup, error)
	Take() (*model.FaqCategoryGroup, error)
	Last() (*model.FaqCategoryGroup, error)
	Find() ([]*model.FaqCategoryGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FaqCategoryGroup, err error)
	FindInBatches(result *[]*model.FaqCategoryGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FaqCategoryGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFaqCategoryGroupDo
	Assign(attrs ...field.AssignExpr) IFaqCategoryGroupDo
	Joins(fields ...field.RelationField) IFaqCategoryGroupDo
	Preload(fields ...field.RelationField) IFaqCategoryGroupDo
	FirstOrInit() (*model.FaqCategoryGroup, error)
	FirstOrCreate() (*model.FaqCategoryGroup, error)
	FindByPage(offset int, limit int) (result []*model.FaqCategoryGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFaqCategoryGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f faqCategoryGroupDo) Debug() IFaqCategoryGroupDo {
	return f.withDO(f.DO.Debug())
}

func (f faqCategoryGroupDo) WithContext(ctx context.Context) IFaqCategoryGroupDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f faqCategoryGroupDo) ReadDB() IFaqCategoryGroupDo {
	return f.Clauses(dbresolver.Read)
}

func (f faqCategoryGroupDo) WriteDB() IFaqCategoryGroupDo {
	return f.Clauses(dbresolver.Write)
}

func (f faqCategoryGroupDo) Session(config *gorm.Session) IFaqCategoryGroupDo {
	return f.withDO(f.DO.Session(config))
}

func (f faqCategoryGroupDo) Clauses(conds ...clause.Expression) IFaqCategoryGroupDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f faqCategoryGroupDo) Returning(value interface{}, columns ...string) IFaqCategoryGroupDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f faqCategoryGroupDo) Not(conds ...gen.Condition) IFaqCategoryGroupDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f faqCategoryGroupDo) Or(conds ...gen.Condition) IFaqCategoryGroupDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f faqCategoryGroupDo) Select(conds ...field.Expr) IFaqCategoryGroupDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f faqCategoryGroupDo) Where(conds ...gen.Condition) IFaqCategoryGroupDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f faqCategoryGroupDo) Order(conds ...field.Expr) IFaqCategoryGroupDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f faqCategoryGroupDo) Distinct(cols ...field.Expr) IFaqCategoryGroupDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f faqCategoryGroupDo) Omit(cols ...field.Expr) IFaqCategoryGroupDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f faqCategoryGroupDo) Join(table schema.Tabler, on ...field.Expr) IFaqCategoryGroupDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f faqCategoryGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFaqCategoryGroupDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f faqCategoryGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IFaqCategoryGroupDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f faqCategoryGroupDo) Group(cols ...field.Expr) IFaqCategoryGroupDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f faqCategoryGroupDo) Having(conds ...gen.Condition) IFaqCategoryGroupDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f faqCategoryGroupDo) Limit(limit int) IFaqCategoryGroupDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f faqCategoryGroupDo) Offset(offset int) IFaqCategoryGroupDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f faqCategoryGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFaqCategoryGroupDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f faqCategoryGroupDo) Unscoped() IFaqCategoryGroupDo {
	return f.withDO(f.DO.Unscoped())
}

func (f faqCategoryGroupDo) Create(values ...*model.FaqCategoryGroup) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f faqCategoryGroupDo) CreateInBatches(values []*model.FaqCategoryGroup, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f faqCategoryGroupDo) Save(values ...*model.FaqCategoryGroup) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f faqCategoryGroupDo) First() (*model.FaqCategoryGroup, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqCategoryGroup), nil
	}
}

func (f faqCategoryGroupDo) Take() (*model.FaqCategoryGroup, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqCategoryGroup), nil
	}
}

func (f faqCategoryGroupDo) Last() (*model.FaqCategoryGroup, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqCategoryGroup), nil
	}
}

func (f faqCategoryGroupDo) Find() ([]*model.FaqCategoryGroup, error) {
	result, err := f.DO.Find()
	return result.([]*model.FaqCategoryGroup), err
}

func (f faqCategoryGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FaqCategoryGroup, err error) {
	buf := make([]*model.FaqCategoryGroup, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f faqCategoryGroupDo) FindInBatches(result *[]*model.FaqCategoryGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f faqCategoryGroupDo) Attrs(attrs ...field.AssignExpr) IFaqCategoryGroupDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f faqCategoryGroupDo) Assign(attrs ...field.AssignExpr) IFaqCategoryGroupDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f faqCategoryGroupDo) Joins(fields ...field.RelationField) IFaqCategoryGroupDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f faqCategoryGroupDo) Preload(fields ...field.RelationField) IFaqCategoryGroupDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f faqCategoryGroupDo) FirstOrInit() (*model.FaqCategoryGroup, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqCategoryGroup), nil
	}
}

func (f faqCategoryGroupDo) FirstOrCreate() (*model.FaqCategoryGroup, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqCategoryGroup), nil
	}
}

func (f faqCategoryGroupDo) FindByPage(offset int, limit int) (result []*model.FaqCategoryGroup, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f faqCategoryGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f faqCategoryGroupDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f faqCategoryGroupDo) Delete(models ...*model.FaqCategoryGroup) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *faqCategoryGroupDo) withDO(do gen.Dao) *faqCategoryGroupDo {
	f.DO = *do.(*gen.DO)
	return f
}
