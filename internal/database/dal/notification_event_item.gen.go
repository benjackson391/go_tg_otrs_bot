// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newNotificationEventItem(db *gorm.DB, opts ...gen.DOOption) notificationEventItem {
	_notificationEventItem := notificationEventItem{}

	_notificationEventItem.notificationEventItemDo.UseDB(db, opts...)
	_notificationEventItem.notificationEventItemDo.UseModel(&model.NotificationEventItem{})

	tableName := _notificationEventItem.notificationEventItemDo.TableName()
	_notificationEventItem.ALL = field.NewAsterisk(tableName)
	_notificationEventItem.NotificationID = field.NewInt32(tableName, "notification_id")
	_notificationEventItem.EventKey = field.NewString(tableName, "event_key")
	_notificationEventItem.EventValue = field.NewString(tableName, "event_value")

	_notificationEventItem.fillFieldMap()

	return _notificationEventItem
}

type notificationEventItem struct {
	notificationEventItemDo

	ALL            field.Asterisk
	NotificationID field.Int32
	EventKey       field.String
	EventValue     field.String

	fieldMap map[string]field.Expr
}

func (n notificationEventItem) Table(newTableName string) *notificationEventItem {
	n.notificationEventItemDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n notificationEventItem) As(alias string) *notificationEventItem {
	n.notificationEventItemDo.DO = *(n.notificationEventItemDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *notificationEventItem) updateTableName(table string) *notificationEventItem {
	n.ALL = field.NewAsterisk(table)
	n.NotificationID = field.NewInt32(table, "notification_id")
	n.EventKey = field.NewString(table, "event_key")
	n.EventValue = field.NewString(table, "event_value")

	n.fillFieldMap()

	return n
}

func (n *notificationEventItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *notificationEventItem) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 3)
	n.fieldMap["notification_id"] = n.NotificationID
	n.fieldMap["event_key"] = n.EventKey
	n.fieldMap["event_value"] = n.EventValue
}

func (n notificationEventItem) clone(db *gorm.DB) notificationEventItem {
	n.notificationEventItemDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n notificationEventItem) replaceDB(db *gorm.DB) notificationEventItem {
	n.notificationEventItemDo.ReplaceDB(db)
	return n
}

type notificationEventItemDo struct{ gen.DO }

type INotificationEventItemDo interface {
	gen.SubQuery
	Debug() INotificationEventItemDo
	WithContext(ctx context.Context) INotificationEventItemDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() INotificationEventItemDo
	WriteDB() INotificationEventItemDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) INotificationEventItemDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INotificationEventItemDo
	Not(conds ...gen.Condition) INotificationEventItemDo
	Or(conds ...gen.Condition) INotificationEventItemDo
	Select(conds ...field.Expr) INotificationEventItemDo
	Where(conds ...gen.Condition) INotificationEventItemDo
	Order(conds ...field.Expr) INotificationEventItemDo
	Distinct(cols ...field.Expr) INotificationEventItemDo
	Omit(cols ...field.Expr) INotificationEventItemDo
	Join(table schema.Tabler, on ...field.Expr) INotificationEventItemDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INotificationEventItemDo
	RightJoin(table schema.Tabler, on ...field.Expr) INotificationEventItemDo
	Group(cols ...field.Expr) INotificationEventItemDo
	Having(conds ...gen.Condition) INotificationEventItemDo
	Limit(limit int) INotificationEventItemDo
	Offset(offset int) INotificationEventItemDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INotificationEventItemDo
	Unscoped() INotificationEventItemDo
	Create(values ...*model.NotificationEventItem) error
	CreateInBatches(values []*model.NotificationEventItem, batchSize int) error
	Save(values ...*model.NotificationEventItem) error
	First() (*model.NotificationEventItem, error)
	Take() (*model.NotificationEventItem, error)
	Last() (*model.NotificationEventItem, error)
	Find() ([]*model.NotificationEventItem, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NotificationEventItem, err error)
	FindInBatches(result *[]*model.NotificationEventItem, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.NotificationEventItem) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INotificationEventItemDo
	Assign(attrs ...field.AssignExpr) INotificationEventItemDo
	Joins(fields ...field.RelationField) INotificationEventItemDo
	Preload(fields ...field.RelationField) INotificationEventItemDo
	FirstOrInit() (*model.NotificationEventItem, error)
	FirstOrCreate() (*model.NotificationEventItem, error)
	FindByPage(offset int, limit int) (result []*model.NotificationEventItem, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INotificationEventItemDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n notificationEventItemDo) Debug() INotificationEventItemDo {
	return n.withDO(n.DO.Debug())
}

func (n notificationEventItemDo) WithContext(ctx context.Context) INotificationEventItemDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n notificationEventItemDo) ReadDB() INotificationEventItemDo {
	return n.Clauses(dbresolver.Read)
}

func (n notificationEventItemDo) WriteDB() INotificationEventItemDo {
	return n.Clauses(dbresolver.Write)
}

func (n notificationEventItemDo) Session(config *gorm.Session) INotificationEventItemDo {
	return n.withDO(n.DO.Session(config))
}

func (n notificationEventItemDo) Clauses(conds ...clause.Expression) INotificationEventItemDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n notificationEventItemDo) Returning(value interface{}, columns ...string) INotificationEventItemDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n notificationEventItemDo) Not(conds ...gen.Condition) INotificationEventItemDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n notificationEventItemDo) Or(conds ...gen.Condition) INotificationEventItemDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n notificationEventItemDo) Select(conds ...field.Expr) INotificationEventItemDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n notificationEventItemDo) Where(conds ...gen.Condition) INotificationEventItemDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n notificationEventItemDo) Order(conds ...field.Expr) INotificationEventItemDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n notificationEventItemDo) Distinct(cols ...field.Expr) INotificationEventItemDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n notificationEventItemDo) Omit(cols ...field.Expr) INotificationEventItemDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n notificationEventItemDo) Join(table schema.Tabler, on ...field.Expr) INotificationEventItemDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n notificationEventItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) INotificationEventItemDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n notificationEventItemDo) RightJoin(table schema.Tabler, on ...field.Expr) INotificationEventItemDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n notificationEventItemDo) Group(cols ...field.Expr) INotificationEventItemDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n notificationEventItemDo) Having(conds ...gen.Condition) INotificationEventItemDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n notificationEventItemDo) Limit(limit int) INotificationEventItemDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n notificationEventItemDo) Offset(offset int) INotificationEventItemDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n notificationEventItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INotificationEventItemDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n notificationEventItemDo) Unscoped() INotificationEventItemDo {
	return n.withDO(n.DO.Unscoped())
}

func (n notificationEventItemDo) Create(values ...*model.NotificationEventItem) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n notificationEventItemDo) CreateInBatches(values []*model.NotificationEventItem, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n notificationEventItemDo) Save(values ...*model.NotificationEventItem) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n notificationEventItemDo) First() (*model.NotificationEventItem, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationEventItem), nil
	}
}

func (n notificationEventItemDo) Take() (*model.NotificationEventItem, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationEventItem), nil
	}
}

func (n notificationEventItemDo) Last() (*model.NotificationEventItem, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationEventItem), nil
	}
}

func (n notificationEventItemDo) Find() ([]*model.NotificationEventItem, error) {
	result, err := n.DO.Find()
	return result.([]*model.NotificationEventItem), err
}

func (n notificationEventItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NotificationEventItem, err error) {
	buf := make([]*model.NotificationEventItem, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n notificationEventItemDo) FindInBatches(result *[]*model.NotificationEventItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n notificationEventItemDo) Attrs(attrs ...field.AssignExpr) INotificationEventItemDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n notificationEventItemDo) Assign(attrs ...field.AssignExpr) INotificationEventItemDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n notificationEventItemDo) Joins(fields ...field.RelationField) INotificationEventItemDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n notificationEventItemDo) Preload(fields ...field.RelationField) INotificationEventItemDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n notificationEventItemDo) FirstOrInit() (*model.NotificationEventItem, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationEventItem), nil
	}
}

func (n notificationEventItemDo) FirstOrCreate() (*model.NotificationEventItem, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationEventItem), nil
	}
}

func (n notificationEventItemDo) FindByPage(offset int, limit int) (result []*model.NotificationEventItem, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n notificationEventItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n notificationEventItemDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n notificationEventItemDo) Delete(models ...*model.NotificationEventItem) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *notificationEventItemDo) withDO(do gen.Dao) *notificationEventItemDo {
	n.DO = *do.(*gen.DO)
	return n
}
