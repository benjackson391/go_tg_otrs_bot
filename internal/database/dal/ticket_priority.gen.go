// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newTicketPriority(db *gorm.DB, opts ...gen.DOOption) ticketPriority {
	_ticketPriority := ticketPriority{}

	_ticketPriority.ticketPriorityDo.UseDB(db, opts...)
	_ticketPriority.ticketPriorityDo.UseModel(&model.TicketPriority{})

	tableName := _ticketPriority.ticketPriorityDo.TableName()
	_ticketPriority.ALL = field.NewAsterisk(tableName)
	_ticketPriority.ID = field.NewInt32(tableName, "id")
	_ticketPriority.Name = field.NewString(tableName, "name")
	_ticketPriority.ValidID = field.NewInt32(tableName, "valid_id")
	_ticketPriority.CreateTime = field.NewTime(tableName, "create_time")
	_ticketPriority.CreateBy = field.NewInt32(tableName, "create_by")
	_ticketPriority.ChangeTime = field.NewTime(tableName, "change_time")
	_ticketPriority.ChangeBy = field.NewInt32(tableName, "change_by")

	_ticketPriority.fillFieldMap()

	return _ticketPriority
}

type ticketPriority struct {
	ticketPriorityDo

	ALL        field.Asterisk
	ID         field.Int32
	Name       field.String
	ValidID    field.Int32
	CreateTime field.Time
	CreateBy   field.Int32
	ChangeTime field.Time
	ChangeBy   field.Int32

	fieldMap map[string]field.Expr
}

func (t ticketPriority) Table(newTableName string) *ticketPriority {
	t.ticketPriorityDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t ticketPriority) As(alias string) *ticketPriority {
	t.ticketPriorityDo.DO = *(t.ticketPriorityDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *ticketPriority) updateTableName(table string) *ticketPriority {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.Name = field.NewString(table, "name")
	t.ValidID = field.NewInt32(table, "valid_id")
	t.CreateTime = field.NewTime(table, "create_time")
	t.CreateBy = field.NewInt32(table, "create_by")
	t.ChangeTime = field.NewTime(table, "change_time")
	t.ChangeBy = field.NewInt32(table, "change_by")

	t.fillFieldMap()

	return t
}

func (t *ticketPriority) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *ticketPriority) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["valid_id"] = t.ValidID
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["create_by"] = t.CreateBy
	t.fieldMap["change_time"] = t.ChangeTime
	t.fieldMap["change_by"] = t.ChangeBy
}

func (t ticketPriority) clone(db *gorm.DB) ticketPriority {
	t.ticketPriorityDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t ticketPriority) replaceDB(db *gorm.DB) ticketPriority {
	t.ticketPriorityDo.ReplaceDB(db)
	return t
}

type ticketPriorityDo struct{ gen.DO }

type ITicketPriorityDo interface {
	gen.SubQuery
	Debug() ITicketPriorityDo
	WithContext(ctx context.Context) ITicketPriorityDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITicketPriorityDo
	WriteDB() ITicketPriorityDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITicketPriorityDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITicketPriorityDo
	Not(conds ...gen.Condition) ITicketPriorityDo
	Or(conds ...gen.Condition) ITicketPriorityDo
	Select(conds ...field.Expr) ITicketPriorityDo
	Where(conds ...gen.Condition) ITicketPriorityDo
	Order(conds ...field.Expr) ITicketPriorityDo
	Distinct(cols ...field.Expr) ITicketPriorityDo
	Omit(cols ...field.Expr) ITicketPriorityDo
	Join(table schema.Tabler, on ...field.Expr) ITicketPriorityDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITicketPriorityDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITicketPriorityDo
	Group(cols ...field.Expr) ITicketPriorityDo
	Having(conds ...gen.Condition) ITicketPriorityDo
	Limit(limit int) ITicketPriorityDo
	Offset(offset int) ITicketPriorityDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITicketPriorityDo
	Unscoped() ITicketPriorityDo
	Create(values ...*model.TicketPriority) error
	CreateInBatches(values []*model.TicketPriority, batchSize int) error
	Save(values ...*model.TicketPriority) error
	First() (*model.TicketPriority, error)
	Take() (*model.TicketPriority, error)
	Last() (*model.TicketPriority, error)
	Find() ([]*model.TicketPriority, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TicketPriority, err error)
	FindInBatches(result *[]*model.TicketPriority, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TicketPriority) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITicketPriorityDo
	Assign(attrs ...field.AssignExpr) ITicketPriorityDo
	Joins(fields ...field.RelationField) ITicketPriorityDo
	Preload(fields ...field.RelationField) ITicketPriorityDo
	FirstOrInit() (*model.TicketPriority, error)
	FirstOrCreate() (*model.TicketPriority, error)
	FindByPage(offset int, limit int) (result []*model.TicketPriority, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITicketPriorityDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t ticketPriorityDo) Debug() ITicketPriorityDo {
	return t.withDO(t.DO.Debug())
}

func (t ticketPriorityDo) WithContext(ctx context.Context) ITicketPriorityDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t ticketPriorityDo) ReadDB() ITicketPriorityDo {
	return t.Clauses(dbresolver.Read)
}

func (t ticketPriorityDo) WriteDB() ITicketPriorityDo {
	return t.Clauses(dbresolver.Write)
}

func (t ticketPriorityDo) Session(config *gorm.Session) ITicketPriorityDo {
	return t.withDO(t.DO.Session(config))
}

func (t ticketPriorityDo) Clauses(conds ...clause.Expression) ITicketPriorityDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t ticketPriorityDo) Returning(value interface{}, columns ...string) ITicketPriorityDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t ticketPriorityDo) Not(conds ...gen.Condition) ITicketPriorityDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t ticketPriorityDo) Or(conds ...gen.Condition) ITicketPriorityDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t ticketPriorityDo) Select(conds ...field.Expr) ITicketPriorityDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t ticketPriorityDo) Where(conds ...gen.Condition) ITicketPriorityDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t ticketPriorityDo) Order(conds ...field.Expr) ITicketPriorityDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t ticketPriorityDo) Distinct(cols ...field.Expr) ITicketPriorityDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t ticketPriorityDo) Omit(cols ...field.Expr) ITicketPriorityDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t ticketPriorityDo) Join(table schema.Tabler, on ...field.Expr) ITicketPriorityDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t ticketPriorityDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITicketPriorityDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t ticketPriorityDo) RightJoin(table schema.Tabler, on ...field.Expr) ITicketPriorityDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t ticketPriorityDo) Group(cols ...field.Expr) ITicketPriorityDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t ticketPriorityDo) Having(conds ...gen.Condition) ITicketPriorityDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t ticketPriorityDo) Limit(limit int) ITicketPriorityDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t ticketPriorityDo) Offset(offset int) ITicketPriorityDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t ticketPriorityDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITicketPriorityDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t ticketPriorityDo) Unscoped() ITicketPriorityDo {
	return t.withDO(t.DO.Unscoped())
}

func (t ticketPriorityDo) Create(values ...*model.TicketPriority) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t ticketPriorityDo) CreateInBatches(values []*model.TicketPriority, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t ticketPriorityDo) Save(values ...*model.TicketPriority) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t ticketPriorityDo) First() (*model.TicketPriority, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketPriority), nil
	}
}

func (t ticketPriorityDo) Take() (*model.TicketPriority, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketPriority), nil
	}
}

func (t ticketPriorityDo) Last() (*model.TicketPriority, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketPriority), nil
	}
}

func (t ticketPriorityDo) Find() ([]*model.TicketPriority, error) {
	result, err := t.DO.Find()
	return result.([]*model.TicketPriority), err
}

func (t ticketPriorityDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TicketPriority, err error) {
	buf := make([]*model.TicketPriority, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t ticketPriorityDo) FindInBatches(result *[]*model.TicketPriority, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t ticketPriorityDo) Attrs(attrs ...field.AssignExpr) ITicketPriorityDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t ticketPriorityDo) Assign(attrs ...field.AssignExpr) ITicketPriorityDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t ticketPriorityDo) Joins(fields ...field.RelationField) ITicketPriorityDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t ticketPriorityDo) Preload(fields ...field.RelationField) ITicketPriorityDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t ticketPriorityDo) FirstOrInit() (*model.TicketPriority, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketPriority), nil
	}
}

func (t ticketPriorityDo) FirstOrCreate() (*model.TicketPriority, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketPriority), nil
	}
}

func (t ticketPriorityDo) FindByPage(offset int, limit int) (result []*model.TicketPriority, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t ticketPriorityDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t ticketPriorityDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t ticketPriorityDo) Delete(models ...*model.TicketPriority) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *ticketPriorityDo) withDO(do gen.Dao) *ticketPriorityDo {
	t.DO = *do.(*gen.DO)
	return t
}
