// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newFaqHistory(db *gorm.DB, opts ...gen.DOOption) faqHistory {
	_faqHistory := faqHistory{}

	_faqHistory.faqHistoryDo.UseDB(db, opts...)
	_faqHistory.faqHistoryDo.UseModel(&model.FaqHistory{})

	tableName := _faqHistory.faqHistoryDo.TableName()
	_faqHistory.ALL = field.NewAsterisk(tableName)
	_faqHistory.ID = field.NewInt32(tableName, "id")
	_faqHistory.Name = field.NewString(tableName, "name")
	_faqHistory.ItemID = field.NewInt32(tableName, "item_id")
	_faqHistory.Created = field.NewTime(tableName, "created")
	_faqHistory.CreatedBy = field.NewInt32(tableName, "created_by")
	_faqHistory.Changed = field.NewTime(tableName, "changed")
	_faqHistory.ChangedBy = field.NewInt32(tableName, "changed_by")

	_faqHistory.fillFieldMap()

	return _faqHistory
}

type faqHistory struct {
	faqHistoryDo

	ALL       field.Asterisk
	ID        field.Int32
	Name      field.String
	ItemID    field.Int32
	Created   field.Time
	CreatedBy field.Int32
	Changed   field.Time
	ChangedBy field.Int32

	fieldMap map[string]field.Expr
}

func (f faqHistory) Table(newTableName string) *faqHistory {
	f.faqHistoryDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f faqHistory) As(alias string) *faqHistory {
	f.faqHistoryDo.DO = *(f.faqHistoryDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *faqHistory) updateTableName(table string) *faqHistory {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt32(table, "id")
	f.Name = field.NewString(table, "name")
	f.ItemID = field.NewInt32(table, "item_id")
	f.Created = field.NewTime(table, "created")
	f.CreatedBy = field.NewInt32(table, "created_by")
	f.Changed = field.NewTime(table, "changed")
	f.ChangedBy = field.NewInt32(table, "changed_by")

	f.fillFieldMap()

	return f
}

func (f *faqHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *faqHistory) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 7)
	f.fieldMap["id"] = f.ID
	f.fieldMap["name"] = f.Name
	f.fieldMap["item_id"] = f.ItemID
	f.fieldMap["created"] = f.Created
	f.fieldMap["created_by"] = f.CreatedBy
	f.fieldMap["changed"] = f.Changed
	f.fieldMap["changed_by"] = f.ChangedBy
}

func (f faqHistory) clone(db *gorm.DB) faqHistory {
	f.faqHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f faqHistory) replaceDB(db *gorm.DB) faqHistory {
	f.faqHistoryDo.ReplaceDB(db)
	return f
}

type faqHistoryDo struct{ gen.DO }

type IFaqHistoryDo interface {
	gen.SubQuery
	Debug() IFaqHistoryDo
	WithContext(ctx context.Context) IFaqHistoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFaqHistoryDo
	WriteDB() IFaqHistoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFaqHistoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFaqHistoryDo
	Not(conds ...gen.Condition) IFaqHistoryDo
	Or(conds ...gen.Condition) IFaqHistoryDo
	Select(conds ...field.Expr) IFaqHistoryDo
	Where(conds ...gen.Condition) IFaqHistoryDo
	Order(conds ...field.Expr) IFaqHistoryDo
	Distinct(cols ...field.Expr) IFaqHistoryDo
	Omit(cols ...field.Expr) IFaqHistoryDo
	Join(table schema.Tabler, on ...field.Expr) IFaqHistoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFaqHistoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFaqHistoryDo
	Group(cols ...field.Expr) IFaqHistoryDo
	Having(conds ...gen.Condition) IFaqHistoryDo
	Limit(limit int) IFaqHistoryDo
	Offset(offset int) IFaqHistoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFaqHistoryDo
	Unscoped() IFaqHistoryDo
	Create(values ...*model.FaqHistory) error
	CreateInBatches(values []*model.FaqHistory, batchSize int) error
	Save(values ...*model.FaqHistory) error
	First() (*model.FaqHistory, error)
	Take() (*model.FaqHistory, error)
	Last() (*model.FaqHistory, error)
	Find() ([]*model.FaqHistory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FaqHistory, err error)
	FindInBatches(result *[]*model.FaqHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FaqHistory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFaqHistoryDo
	Assign(attrs ...field.AssignExpr) IFaqHistoryDo
	Joins(fields ...field.RelationField) IFaqHistoryDo
	Preload(fields ...field.RelationField) IFaqHistoryDo
	FirstOrInit() (*model.FaqHistory, error)
	FirstOrCreate() (*model.FaqHistory, error)
	FindByPage(offset int, limit int) (result []*model.FaqHistory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFaqHistoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f faqHistoryDo) Debug() IFaqHistoryDo {
	return f.withDO(f.DO.Debug())
}

func (f faqHistoryDo) WithContext(ctx context.Context) IFaqHistoryDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f faqHistoryDo) ReadDB() IFaqHistoryDo {
	return f.Clauses(dbresolver.Read)
}

func (f faqHistoryDo) WriteDB() IFaqHistoryDo {
	return f.Clauses(dbresolver.Write)
}

func (f faqHistoryDo) Session(config *gorm.Session) IFaqHistoryDo {
	return f.withDO(f.DO.Session(config))
}

func (f faqHistoryDo) Clauses(conds ...clause.Expression) IFaqHistoryDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f faqHistoryDo) Returning(value interface{}, columns ...string) IFaqHistoryDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f faqHistoryDo) Not(conds ...gen.Condition) IFaqHistoryDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f faqHistoryDo) Or(conds ...gen.Condition) IFaqHistoryDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f faqHistoryDo) Select(conds ...field.Expr) IFaqHistoryDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f faqHistoryDo) Where(conds ...gen.Condition) IFaqHistoryDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f faqHistoryDo) Order(conds ...field.Expr) IFaqHistoryDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f faqHistoryDo) Distinct(cols ...field.Expr) IFaqHistoryDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f faqHistoryDo) Omit(cols ...field.Expr) IFaqHistoryDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f faqHistoryDo) Join(table schema.Tabler, on ...field.Expr) IFaqHistoryDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f faqHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFaqHistoryDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f faqHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) IFaqHistoryDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f faqHistoryDo) Group(cols ...field.Expr) IFaqHistoryDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f faqHistoryDo) Having(conds ...gen.Condition) IFaqHistoryDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f faqHistoryDo) Limit(limit int) IFaqHistoryDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f faqHistoryDo) Offset(offset int) IFaqHistoryDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f faqHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFaqHistoryDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f faqHistoryDo) Unscoped() IFaqHistoryDo {
	return f.withDO(f.DO.Unscoped())
}

func (f faqHistoryDo) Create(values ...*model.FaqHistory) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f faqHistoryDo) CreateInBatches(values []*model.FaqHistory, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f faqHistoryDo) Save(values ...*model.FaqHistory) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f faqHistoryDo) First() (*model.FaqHistory, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqHistory), nil
	}
}

func (f faqHistoryDo) Take() (*model.FaqHistory, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqHistory), nil
	}
}

func (f faqHistoryDo) Last() (*model.FaqHistory, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqHistory), nil
	}
}

func (f faqHistoryDo) Find() ([]*model.FaqHistory, error) {
	result, err := f.DO.Find()
	return result.([]*model.FaqHistory), err
}

func (f faqHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FaqHistory, err error) {
	buf := make([]*model.FaqHistory, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f faqHistoryDo) FindInBatches(result *[]*model.FaqHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f faqHistoryDo) Attrs(attrs ...field.AssignExpr) IFaqHistoryDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f faqHistoryDo) Assign(attrs ...field.AssignExpr) IFaqHistoryDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f faqHistoryDo) Joins(fields ...field.RelationField) IFaqHistoryDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f faqHistoryDo) Preload(fields ...field.RelationField) IFaqHistoryDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f faqHistoryDo) FirstOrInit() (*model.FaqHistory, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqHistory), nil
	}
}

func (f faqHistoryDo) FirstOrCreate() (*model.FaqHistory, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FaqHistory), nil
	}
}

func (f faqHistoryDo) FindByPage(offset int, limit int) (result []*model.FaqHistory, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f faqHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f faqHistoryDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f faqHistoryDo) Delete(models ...*model.FaqHistory) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *faqHistoryDo) withDO(do gen.Dao) *faqHistoryDo {
	f.DO = *do.(*gen.DO)
	return f
}
