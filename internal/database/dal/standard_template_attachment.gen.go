// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newStandardTemplateAttachment(db *gorm.DB, opts ...gen.DOOption) standardTemplateAttachment {
	_standardTemplateAttachment := standardTemplateAttachment{}

	_standardTemplateAttachment.standardTemplateAttachmentDo.UseDB(db, opts...)
	_standardTemplateAttachment.standardTemplateAttachmentDo.UseModel(&model.StandardTemplateAttachment{})

	tableName := _standardTemplateAttachment.standardTemplateAttachmentDo.TableName()
	_standardTemplateAttachment.ALL = field.NewAsterisk(tableName)
	_standardTemplateAttachment.ID = field.NewInt32(tableName, "id")
	_standardTemplateAttachment.StandardAttachmentID = field.NewInt32(tableName, "standard_attachment_id")
	_standardTemplateAttachment.StandardTemplateID = field.NewInt32(tableName, "standard_template_id")
	_standardTemplateAttachment.CreateTime = field.NewTime(tableName, "create_time")
	_standardTemplateAttachment.CreateBy = field.NewInt32(tableName, "create_by")
	_standardTemplateAttachment.ChangeTime = field.NewTime(tableName, "change_time")
	_standardTemplateAttachment.ChangeBy = field.NewInt32(tableName, "change_by")

	_standardTemplateAttachment.fillFieldMap()

	return _standardTemplateAttachment
}

type standardTemplateAttachment struct {
	standardTemplateAttachmentDo

	ALL                  field.Asterisk
	ID                   field.Int32
	StandardAttachmentID field.Int32
	StandardTemplateID   field.Int32
	CreateTime           field.Time
	CreateBy             field.Int32
	ChangeTime           field.Time
	ChangeBy             field.Int32

	fieldMap map[string]field.Expr
}

func (s standardTemplateAttachment) Table(newTableName string) *standardTemplateAttachment {
	s.standardTemplateAttachmentDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s standardTemplateAttachment) As(alias string) *standardTemplateAttachment {
	s.standardTemplateAttachmentDo.DO = *(s.standardTemplateAttachmentDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *standardTemplateAttachment) updateTableName(table string) *standardTemplateAttachment {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.StandardAttachmentID = field.NewInt32(table, "standard_attachment_id")
	s.StandardTemplateID = field.NewInt32(table, "standard_template_id")
	s.CreateTime = field.NewTime(table, "create_time")
	s.CreateBy = field.NewInt32(table, "create_by")
	s.ChangeTime = field.NewTime(table, "change_time")
	s.ChangeBy = field.NewInt32(table, "change_by")

	s.fillFieldMap()

	return s
}

func (s *standardTemplateAttachment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *standardTemplateAttachment) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.ID
	s.fieldMap["standard_attachment_id"] = s.StandardAttachmentID
	s.fieldMap["standard_template_id"] = s.StandardTemplateID
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["change_time"] = s.ChangeTime
	s.fieldMap["change_by"] = s.ChangeBy
}

func (s standardTemplateAttachment) clone(db *gorm.DB) standardTemplateAttachment {
	s.standardTemplateAttachmentDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s standardTemplateAttachment) replaceDB(db *gorm.DB) standardTemplateAttachment {
	s.standardTemplateAttachmentDo.ReplaceDB(db)
	return s
}

type standardTemplateAttachmentDo struct{ gen.DO }

type IStandardTemplateAttachmentDo interface {
	gen.SubQuery
	Debug() IStandardTemplateAttachmentDo
	WithContext(ctx context.Context) IStandardTemplateAttachmentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStandardTemplateAttachmentDo
	WriteDB() IStandardTemplateAttachmentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStandardTemplateAttachmentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStandardTemplateAttachmentDo
	Not(conds ...gen.Condition) IStandardTemplateAttachmentDo
	Or(conds ...gen.Condition) IStandardTemplateAttachmentDo
	Select(conds ...field.Expr) IStandardTemplateAttachmentDo
	Where(conds ...gen.Condition) IStandardTemplateAttachmentDo
	Order(conds ...field.Expr) IStandardTemplateAttachmentDo
	Distinct(cols ...field.Expr) IStandardTemplateAttachmentDo
	Omit(cols ...field.Expr) IStandardTemplateAttachmentDo
	Join(table schema.Tabler, on ...field.Expr) IStandardTemplateAttachmentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStandardTemplateAttachmentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStandardTemplateAttachmentDo
	Group(cols ...field.Expr) IStandardTemplateAttachmentDo
	Having(conds ...gen.Condition) IStandardTemplateAttachmentDo
	Limit(limit int) IStandardTemplateAttachmentDo
	Offset(offset int) IStandardTemplateAttachmentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStandardTemplateAttachmentDo
	Unscoped() IStandardTemplateAttachmentDo
	Create(values ...*model.StandardTemplateAttachment) error
	CreateInBatches(values []*model.StandardTemplateAttachment, batchSize int) error
	Save(values ...*model.StandardTemplateAttachment) error
	First() (*model.StandardTemplateAttachment, error)
	Take() (*model.StandardTemplateAttachment, error)
	Last() (*model.StandardTemplateAttachment, error)
	Find() ([]*model.StandardTemplateAttachment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StandardTemplateAttachment, err error)
	FindInBatches(result *[]*model.StandardTemplateAttachment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.StandardTemplateAttachment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStandardTemplateAttachmentDo
	Assign(attrs ...field.AssignExpr) IStandardTemplateAttachmentDo
	Joins(fields ...field.RelationField) IStandardTemplateAttachmentDo
	Preload(fields ...field.RelationField) IStandardTemplateAttachmentDo
	FirstOrInit() (*model.StandardTemplateAttachment, error)
	FirstOrCreate() (*model.StandardTemplateAttachment, error)
	FindByPage(offset int, limit int) (result []*model.StandardTemplateAttachment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStandardTemplateAttachmentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s standardTemplateAttachmentDo) Debug() IStandardTemplateAttachmentDo {
	return s.withDO(s.DO.Debug())
}

func (s standardTemplateAttachmentDo) WithContext(ctx context.Context) IStandardTemplateAttachmentDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s standardTemplateAttachmentDo) ReadDB() IStandardTemplateAttachmentDo {
	return s.Clauses(dbresolver.Read)
}

func (s standardTemplateAttachmentDo) WriteDB() IStandardTemplateAttachmentDo {
	return s.Clauses(dbresolver.Write)
}

func (s standardTemplateAttachmentDo) Session(config *gorm.Session) IStandardTemplateAttachmentDo {
	return s.withDO(s.DO.Session(config))
}

func (s standardTemplateAttachmentDo) Clauses(conds ...clause.Expression) IStandardTemplateAttachmentDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s standardTemplateAttachmentDo) Returning(value interface{}, columns ...string) IStandardTemplateAttachmentDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s standardTemplateAttachmentDo) Not(conds ...gen.Condition) IStandardTemplateAttachmentDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s standardTemplateAttachmentDo) Or(conds ...gen.Condition) IStandardTemplateAttachmentDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s standardTemplateAttachmentDo) Select(conds ...field.Expr) IStandardTemplateAttachmentDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s standardTemplateAttachmentDo) Where(conds ...gen.Condition) IStandardTemplateAttachmentDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s standardTemplateAttachmentDo) Order(conds ...field.Expr) IStandardTemplateAttachmentDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s standardTemplateAttachmentDo) Distinct(cols ...field.Expr) IStandardTemplateAttachmentDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s standardTemplateAttachmentDo) Omit(cols ...field.Expr) IStandardTemplateAttachmentDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s standardTemplateAttachmentDo) Join(table schema.Tabler, on ...field.Expr) IStandardTemplateAttachmentDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s standardTemplateAttachmentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStandardTemplateAttachmentDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s standardTemplateAttachmentDo) RightJoin(table schema.Tabler, on ...field.Expr) IStandardTemplateAttachmentDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s standardTemplateAttachmentDo) Group(cols ...field.Expr) IStandardTemplateAttachmentDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s standardTemplateAttachmentDo) Having(conds ...gen.Condition) IStandardTemplateAttachmentDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s standardTemplateAttachmentDo) Limit(limit int) IStandardTemplateAttachmentDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s standardTemplateAttachmentDo) Offset(offset int) IStandardTemplateAttachmentDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s standardTemplateAttachmentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStandardTemplateAttachmentDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s standardTemplateAttachmentDo) Unscoped() IStandardTemplateAttachmentDo {
	return s.withDO(s.DO.Unscoped())
}

func (s standardTemplateAttachmentDo) Create(values ...*model.StandardTemplateAttachment) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s standardTemplateAttachmentDo) CreateInBatches(values []*model.StandardTemplateAttachment, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s standardTemplateAttachmentDo) Save(values ...*model.StandardTemplateAttachment) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s standardTemplateAttachmentDo) First() (*model.StandardTemplateAttachment, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StandardTemplateAttachment), nil
	}
}

func (s standardTemplateAttachmentDo) Take() (*model.StandardTemplateAttachment, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StandardTemplateAttachment), nil
	}
}

func (s standardTemplateAttachmentDo) Last() (*model.StandardTemplateAttachment, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StandardTemplateAttachment), nil
	}
}

func (s standardTemplateAttachmentDo) Find() ([]*model.StandardTemplateAttachment, error) {
	result, err := s.DO.Find()
	return result.([]*model.StandardTemplateAttachment), err
}

func (s standardTemplateAttachmentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StandardTemplateAttachment, err error) {
	buf := make([]*model.StandardTemplateAttachment, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s standardTemplateAttachmentDo) FindInBatches(result *[]*model.StandardTemplateAttachment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s standardTemplateAttachmentDo) Attrs(attrs ...field.AssignExpr) IStandardTemplateAttachmentDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s standardTemplateAttachmentDo) Assign(attrs ...field.AssignExpr) IStandardTemplateAttachmentDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s standardTemplateAttachmentDo) Joins(fields ...field.RelationField) IStandardTemplateAttachmentDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s standardTemplateAttachmentDo) Preload(fields ...field.RelationField) IStandardTemplateAttachmentDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s standardTemplateAttachmentDo) FirstOrInit() (*model.StandardTemplateAttachment, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StandardTemplateAttachment), nil
	}
}

func (s standardTemplateAttachmentDo) FirstOrCreate() (*model.StandardTemplateAttachment, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StandardTemplateAttachment), nil
	}
}

func (s standardTemplateAttachmentDo) FindByPage(offset int, limit int) (result []*model.StandardTemplateAttachment, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s standardTemplateAttachmentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s standardTemplateAttachmentDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s standardTemplateAttachmentDo) Delete(models ...*model.StandardTemplateAttachment) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *standardTemplateAttachmentDo) withDO(do gen.Dao) *standardTemplateAttachmentDo {
	s.DO = *do.(*gen.DO)
	return s
}
