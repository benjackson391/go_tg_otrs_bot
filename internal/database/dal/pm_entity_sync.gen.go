// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tg_bot/internal/database/model"
)

func newPmEntitySync(db *gorm.DB, opts ...gen.DOOption) pmEntitySync {
	_pmEntitySync := pmEntitySync{}

	_pmEntitySync.pmEntitySyncDo.UseDB(db, opts...)
	_pmEntitySync.pmEntitySyncDo.UseModel(&model.PmEntitySync{})

	tableName := _pmEntitySync.pmEntitySyncDo.TableName()
	_pmEntitySync.ALL = field.NewAsterisk(tableName)
	_pmEntitySync.EntityType = field.NewString(tableName, "entity_type")
	_pmEntitySync.EntityID = field.NewString(tableName, "entity_id")
	_pmEntitySync.SyncState = field.NewString(tableName, "sync_state")
	_pmEntitySync.CreateTime = field.NewTime(tableName, "create_time")
	_pmEntitySync.ChangeTime = field.NewTime(tableName, "change_time")

	_pmEntitySync.fillFieldMap()

	return _pmEntitySync
}

type pmEntitySync struct {
	pmEntitySyncDo

	ALL        field.Asterisk
	EntityType field.String
	EntityID   field.String
	SyncState  field.String
	CreateTime field.Time
	ChangeTime field.Time

	fieldMap map[string]field.Expr
}

func (p pmEntitySync) Table(newTableName string) *pmEntitySync {
	p.pmEntitySyncDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmEntitySync) As(alias string) *pmEntitySync {
	p.pmEntitySyncDo.DO = *(p.pmEntitySyncDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmEntitySync) updateTableName(table string) *pmEntitySync {
	p.ALL = field.NewAsterisk(table)
	p.EntityType = field.NewString(table, "entity_type")
	p.EntityID = field.NewString(table, "entity_id")
	p.SyncState = field.NewString(table, "sync_state")
	p.CreateTime = field.NewTime(table, "create_time")
	p.ChangeTime = field.NewTime(table, "change_time")

	p.fillFieldMap()

	return p
}

func (p *pmEntitySync) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmEntitySync) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 5)
	p.fieldMap["entity_type"] = p.EntityType
	p.fieldMap["entity_id"] = p.EntityID
	p.fieldMap["sync_state"] = p.SyncState
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["change_time"] = p.ChangeTime
}

func (p pmEntitySync) clone(db *gorm.DB) pmEntitySync {
	p.pmEntitySyncDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmEntitySync) replaceDB(db *gorm.DB) pmEntitySync {
	p.pmEntitySyncDo.ReplaceDB(db)
	return p
}

type pmEntitySyncDo struct{ gen.DO }

type IPmEntitySyncDo interface {
	gen.SubQuery
	Debug() IPmEntitySyncDo
	WithContext(ctx context.Context) IPmEntitySyncDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPmEntitySyncDo
	WriteDB() IPmEntitySyncDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPmEntitySyncDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPmEntitySyncDo
	Not(conds ...gen.Condition) IPmEntitySyncDo
	Or(conds ...gen.Condition) IPmEntitySyncDo
	Select(conds ...field.Expr) IPmEntitySyncDo
	Where(conds ...gen.Condition) IPmEntitySyncDo
	Order(conds ...field.Expr) IPmEntitySyncDo
	Distinct(cols ...field.Expr) IPmEntitySyncDo
	Omit(cols ...field.Expr) IPmEntitySyncDo
	Join(table schema.Tabler, on ...field.Expr) IPmEntitySyncDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPmEntitySyncDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPmEntitySyncDo
	Group(cols ...field.Expr) IPmEntitySyncDo
	Having(conds ...gen.Condition) IPmEntitySyncDo
	Limit(limit int) IPmEntitySyncDo
	Offset(offset int) IPmEntitySyncDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPmEntitySyncDo
	Unscoped() IPmEntitySyncDo
	Create(values ...*model.PmEntitySync) error
	CreateInBatches(values []*model.PmEntitySync, batchSize int) error
	Save(values ...*model.PmEntitySync) error
	First() (*model.PmEntitySync, error)
	Take() (*model.PmEntitySync, error)
	Last() (*model.PmEntitySync, error)
	Find() ([]*model.PmEntitySync, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmEntitySync, err error)
	FindInBatches(result *[]*model.PmEntitySync, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PmEntitySync) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPmEntitySyncDo
	Assign(attrs ...field.AssignExpr) IPmEntitySyncDo
	Joins(fields ...field.RelationField) IPmEntitySyncDo
	Preload(fields ...field.RelationField) IPmEntitySyncDo
	FirstOrInit() (*model.PmEntitySync, error)
	FirstOrCreate() (*model.PmEntitySync, error)
	FindByPage(offset int, limit int) (result []*model.PmEntitySync, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPmEntitySyncDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pmEntitySyncDo) Debug() IPmEntitySyncDo {
	return p.withDO(p.DO.Debug())
}

func (p pmEntitySyncDo) WithContext(ctx context.Context) IPmEntitySyncDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmEntitySyncDo) ReadDB() IPmEntitySyncDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmEntitySyncDo) WriteDB() IPmEntitySyncDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmEntitySyncDo) Session(config *gorm.Session) IPmEntitySyncDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmEntitySyncDo) Clauses(conds ...clause.Expression) IPmEntitySyncDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmEntitySyncDo) Returning(value interface{}, columns ...string) IPmEntitySyncDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmEntitySyncDo) Not(conds ...gen.Condition) IPmEntitySyncDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmEntitySyncDo) Or(conds ...gen.Condition) IPmEntitySyncDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmEntitySyncDo) Select(conds ...field.Expr) IPmEntitySyncDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmEntitySyncDo) Where(conds ...gen.Condition) IPmEntitySyncDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmEntitySyncDo) Order(conds ...field.Expr) IPmEntitySyncDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmEntitySyncDo) Distinct(cols ...field.Expr) IPmEntitySyncDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmEntitySyncDo) Omit(cols ...field.Expr) IPmEntitySyncDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmEntitySyncDo) Join(table schema.Tabler, on ...field.Expr) IPmEntitySyncDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmEntitySyncDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPmEntitySyncDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmEntitySyncDo) RightJoin(table schema.Tabler, on ...field.Expr) IPmEntitySyncDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmEntitySyncDo) Group(cols ...field.Expr) IPmEntitySyncDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmEntitySyncDo) Having(conds ...gen.Condition) IPmEntitySyncDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmEntitySyncDo) Limit(limit int) IPmEntitySyncDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmEntitySyncDo) Offset(offset int) IPmEntitySyncDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmEntitySyncDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPmEntitySyncDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmEntitySyncDo) Unscoped() IPmEntitySyncDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmEntitySyncDo) Create(values ...*model.PmEntitySync) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmEntitySyncDo) CreateInBatches(values []*model.PmEntitySync, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmEntitySyncDo) Save(values ...*model.PmEntitySync) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmEntitySyncDo) First() (*model.PmEntitySync, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmEntitySync), nil
	}
}

func (p pmEntitySyncDo) Take() (*model.PmEntitySync, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmEntitySync), nil
	}
}

func (p pmEntitySyncDo) Last() (*model.PmEntitySync, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmEntitySync), nil
	}
}

func (p pmEntitySyncDo) Find() ([]*model.PmEntitySync, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmEntitySync), err
}

func (p pmEntitySyncDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmEntitySync, err error) {
	buf := make([]*model.PmEntitySync, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmEntitySyncDo) FindInBatches(result *[]*model.PmEntitySync, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmEntitySyncDo) Attrs(attrs ...field.AssignExpr) IPmEntitySyncDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmEntitySyncDo) Assign(attrs ...field.AssignExpr) IPmEntitySyncDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmEntitySyncDo) Joins(fields ...field.RelationField) IPmEntitySyncDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmEntitySyncDo) Preload(fields ...field.RelationField) IPmEntitySyncDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmEntitySyncDo) FirstOrInit() (*model.PmEntitySync, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmEntitySync), nil
	}
}

func (p pmEntitySyncDo) FirstOrCreate() (*model.PmEntitySync, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmEntitySync), nil
	}
}

func (p pmEntitySyncDo) FindByPage(offset int, limit int) (result []*model.PmEntitySync, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmEntitySyncDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmEntitySyncDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmEntitySyncDo) Delete(models ...*model.PmEntitySync) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmEntitySyncDo) withDO(do gen.Dao) *pmEntitySyncDo {
	p.DO = *do.(*gen.DO)
	return p
}
